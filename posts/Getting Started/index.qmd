---
title:   "Getting Started"
date:    "2024-06-01"
image:   "Featured Image.jpg"
jupyter: python3
from:    markdown+emoji
categories: [Python Interpreter, Basics, IPython]
---

# :nerd_face: **CONTEXTO, CONFIGURACIÓN E INTERACCIÓN** :snake:

Este curso es una introducción al trabajo con datos en [Python](https://www.python.org/), ofreciendo una visión general de las principales características de las estructuras de datos y librerías incorporadas para la manipulación de datos.

El enfoque principal del curso es el análisis de datos basados en tablas y la preparación de datos para conjuntos pequeños que puedan manejarse en un ordenador personal. Para utilizar estas herramientas, a veces es necesario organizar los datos desordenados en una forma tabular. Python es ideal para esto, y cuanto más familiarizado esté con el lenguaje y sus tipos de datos, más fácil será preparar los conjuntos de datos para su análisis.

------------------------------------------------------------------------

## :gear: *Configuración Inicial*

### Rstudio

Usaremos la **IDE** de [Rstudio](https://quarto.org/docs/tools/rstudio.html) (*claramente no nos limitaremos a ella, usaremos [Jupyter Notebook](https://jupyter.org/), [VSC](https://quarto.org/docs/tools/vscode.html), [Google Colab](https://colab.research.google.com/), etc*). Pero más adelante trabajaremos con ambos lenguajes (`Python` y `R`) simultáneamente por lo cual nos servirá realizar esta configuración.

1.  Primero necesita conocer con exactitud la ruta del ejecutable `python.exe` :collision: que desea usar (*sea con Python, conda, venv, etc*). Para ello abra la consola de su intérprete (*si usa un environment en particular no olvide ingresar a él* :inbox_tray:) y ejecute los comandos mostrados. Guarde dicha dirección en el portapapeles :paperclip:.

```{python}
#| eval: false
python
import sys
print(sys.executable)
```

![](../../files/images/SysExecutable.png)

2.  Ahora que conoce la dirección correcta de su intérprete de Python :card_index:, diríjase a la ruta mostrada en `Rstudio`. :eyes: En ocasiones no le saldrá para ser seleccionado, por eso es mejor tener la ruta, péguela en la casilla y espere unos segundos :watch: que lo reconozca antes de salir y darle guardar o aplicar (*si realiza lo anterior de forma muy rápida no le quedará*). Le pedirá que reinicie sesión y ya deberá quedar si vuelve a ingresar.

![](../../files/images/PyInterpreter.png)

3.  Por último instalaremos una librería que nos proporcionará un conjunto completo de herramientas para la interoperabilidad entre `Python` y `R` :hammer_and_wrench:.

```{python}
#| eval: false
install.packages("reticulate")
```

### Conda

Como usaremos dentro de los `.qmd` el parámetro `jupyter: python3`, es necesario tener instalada dicha librería en su intérprete :computer:, para lo cual ejecute (*dentro de su kernel a usar y environment elegido*):

```{python}
#| eval: false
conda install jupyter
# conda install numpy pandas scikit-learn matplotlib seaborn jupyter
```

Compruebe que efectivamente haya sido descargado con:

```{python}
#| eval: false
conda list
```

### Quarto

Sí ejecuta el siguiente comando en el terminal :keyboard:, deberá obtener algo como lo siguiente:

```{shell}
quarto check jupyter
```

![](../../files/images/CheckJupyter.png)

Como puede observar tenemos un problema :warning: y es que **no quedó** el kernel que elegimos desde un inicio. Y el error mostrado se debe a que obviamente hay módulos que no hemos instalado en dicho intérprete que `Quarto` selecciona por defecto. Si desea obtener más información de dicho error consulte: [Quarto Uses Wrong Python Version](https://github.com/quarto-dev/quarto-cli/discussions/3977).

Para *"corregir"* lo anterior debemos apoyarnos de la [documentación oficial](https://quarto.org/docs/projects/environment.html), la cual indica que se debe crear un archivo `_environment` (*sí así tal cual sin extensión alguna*) y establecer los valores para `QUARTO_PYTHON="C:\ProgramData\miniconda3\"` :heavy_check_mark:. Así conseguimos que `Quarto` pueda establecer y fijar dicha configuración local para nuestro `.qmd`.

-   `QUARTO_PYTHON` se establece en: {{< env QUARTO_PYTHON >}}
-   `PY_PYTHON` se establece en: {{< env PY_PYTHON >}}
-   `RETICULATE_PYTHON` se establece en: {{< env RETICULATE_PYTHON >}}

El siguiente [blog](https://eraheem.com/blog/2023/11/20/quarto-jupyter-conda-env-rstudio-config/) :notebook_with_decorative_cover: explica demasiado bien lo que acabamos de hacer a mayor detalle, para renderizar un documento `Quarto` con un entorno específico en `RStudio/Posit`.

:green_circle: Finalmente, cree y ejecute un nuevo `.qmd`, puede utilizar la [plantilla ejemplo](https://quarto.org/docs/computations/python.html#code-blocks), y agregue el siguiente chunk para que verifique por su propia cuenta que, a pesar de que Quarto a nivel global está usando otro interprete, al definir el `_environment` queda con el que usted especifica.

```{python}
import sys
print(sys.executable)
print(sys.prefix)
print (sys.version)
```

------------------------------------------------------------------------

## :robot: [*IPython*](https://ipython.readthedocs.io/en/stable)

:bookmark: Cualquier comando estándar de shell puede ser utilizado directamente en `IPython` anteponiendo el carácter `!`. Por ejemplo,

```{python}
# : ....................... Shell Commands en IPython ........................ :
!ls
```

```{python}
directory = !pwd
print(directory)
```

```{python}
message = "Imprimiendo un texto desde shell"
!echo {message}
```

------------------------------------------------------------------------

## :sparkles: *Conceptos Básicos*

-   :triangular_ruler: **Identación (*no llaves* {} )**: Python utiliza espacios en blanco (*tabuladores o espacios*) para estructurar el código en lugar de utilizar llaves como en muchos otros lenguajes como `R` y `C++`.
-   :symbols: **No se necesita terminar con `;`**: El punto y coma puede usarse para separar múltiples sentencias en una sola línea. `a = 1; b = 2; c = 3`
-   :label: Las cadenas admiten tanto comillas simples `'` como comillas dobles `"`: Se prefieren las comillas dobles, y para cadenas de varias líneas con saltos de línea, puede utilizar comillas triples `"""`.
-   :ab: **Vinculación (*binding*)**: En otros lenguajes, la asignación hará que se copien los datos. En Python, hace que se refieran ahora al mismo objeto,

```{python}
a = [1, 2, 3]
b = a
a.append(4)
b
```

```{python}
# Cuando se pasan objetos como argumentos a una función, se crean nuevas variables
# locales que hacen referencia a los objetos originales sin necesidad de copiarlos
def myAppend(lista, elemento):
  lista.append(elemento)
data = [1, 2, 3]
myAppend(data, 4)
data
```

-   :muscle: **Un lenguaje tipado**: Cada objeto tiene un tipo (*o clase*) específico, con la ventaja de que las variables no tienen un tipo inherente asociado a ellas.

```{python}
a = 5      ; print(type(a))
a = "cinco"; print(type(a))
```

```{python}
"5" + 5
```

```{python}
a = 4.5
b = 2
print(a / b)
print(isinstance(a, (int, float)))
```

### Help & Time

```{python}
# Acceso a la Documentación:
help(len)
```

```{python}
letra = "a"
# letra.<Press Tab>
getattr(letra, "split")
```

```{python}
# Guión bajo '_' para salidas anteriores
1+1
2+2
print(_)
```

```{python}
# Acceder a las entradas anteriores (historial)
%history -n 1-3
```

```{python}
# : .......................... Timing Code Snippets .......................... :
%timeit sum(range(100))   # IPython Magic Commands
```

```{python}
%%timeit                  # Cuando es más complejo, baja el número de repeticiones
total = 0
for i in range(1000):
  for j in range(1000):
    total += i * (-1) ** j
```

### Imports

```{{python}}
# Modulo.py
PI = 3.14159
def cuadrado(x):
 return x ** 2
```

```{python}
#| eval: false
import Modulo
print(Modulo.cuadrado(5))
pi = Modulo.PI
# ......................................
from Modulo import PI, cuadrado
cuadrado(PI)
# ......................................
import Modulo as m
from Modulo import PI as kte, cuadrado as elevado

r1 = m.cuadrado(kte); print(r1)
r2 = elevado(6)     ; print(r2)
```

### Operadores Binarios y de Comparación

![](../../files/images/BinaryOperators.png)

```{python}
a = [1, 2, 3]
b = a
c = list(a) # Crea una copia

print(a is b)
print(a is not c)
```

```{python}
a.append(4)
a == c
```

```{python}
# Intercambiar los nombres de las variables:
a, b = 1, 2
# tmp = a
# a = b
# b = tmp
b, a = a, b
print(f'a = {a}, b = {b}')
```

------------------------------------------------------------------------

## :information_source: *Tipos Estándar*

| Tipo    | Descripción                                                                               |
|----------------|--------------------------------------------------------|
| `None`  | El valor "nulo" de Python (*solo existe una instancia del objeto `None`*)                 |
| `str`   | Tipo de cadena; contiene cadenas Unicode                                                  |
| `bytes` | Datos binarios en bruto                                                                   |
| `float` | Número de punto flotante de doble precisión (*nota que no hay un tipo `double` separado*) |
| `bool`  | Un valor booleano `True` o `False`                                                        |
| `int`   | Entero de precisión arbitraria                                                            |

### Booleans

```{python}
print(int(False)); print(int(True))
print(True + False)
print(not not not not True)
print(bool(2024.75)) # Todo valor !=0 se convierte en True
print(bool("."))     # Todo valor !="" se convierte en True
```

### [Strings](https://docs.python.org/3/library/string.html)

Abc.

```{python}
a = "Hola mundo \\>"
b = """
Esta cadena es más larga que
abarca varias líneas
"""
c = r"D:\Documentos\Carpeta"

print(a); print(b); print(c)
b.count("\n")
```

```{python}
# Los strings en Python son inmutables: no se puede modificar una cadena
print(a[5])
a[5] = "M"
```

```{python}
a.replace("m", "M")
```

```{python}
a       # Tras esta operación, la variable no se modifica
```

```{python}
list(a) # Las cadenas son una secuencia de caracteres Unicode
```

#### **Formatted string**

Existen varios métodos para formatear cadenas de texto, entre los cuales encontramos:

1.  ***Operador de Formato `%`***

```{python}
Nombre = "Pepito"
Edad = 33 
Pi   = 3.141592
print("Hola, mi nombre es %s y tengo %d años. Y sé que pi vale: %.2f." % (Nombre, Edad, Pi))
```

2.  ***Método `.format()`***

```{python}
print("Hola, mi nombre es {} y tengo {} años. Y sé que pi vale: {:.2f}.".format(Nombre, Edad, Pi))
print("Nombre: {name}, Edad: {age}".format(name = "Luis", age = 33))
print("El {0} se encuentra en el {1} y el {1} se encuentra en el {0}.".format("sol", "cielo"))
```

```{python}
# 0:.3f El 1re valor será un flotantes con 3 decimales
# 1:s   El 2do valor será un string
# 2:d   El 3re valor será un entero
template = "{0:.3f} {1:s} equivalen a US${2:d}"
template.format(3.960, "pesos Colombianos", 1) # Intente modificar el tipo de alguno de estos
```

3.  ***f-strings***

```{python}
Tasa   = 3.960
Moneda = "Colombianos"
f"{Tasa:.4f} pesos {Moneda} equivalen a US${Tasa/Tasa}"
```

```{python}
# Cálculos Dentro:
a = 5; b = 10
print(f"La suma de {a} y {b} es {a + b}. Además a*b = {a*b}")
# Alinear Texto:
print(f"{'izquierda':<10} {'centrado':^10} {'derecha':>10}")
# Mostrar Números en Diferentes Bases:
Numero = 255
print(f"Decimal: {Numero}, Binario: {Numero:b}, Hexadecimal: {Numero:x}, Octal: {Numero:o}")
# Incluir Expresiones y Métodos:
Txt = "Amo Python"
print(f"El texto en mayúsculas es {Txt.upper()}.")
# Combinación con Diccionarios:
Pais = {"nombre": "Colombia", "NoPoblacion": 50}
print(f"País: {Pais['nombre']}, Habitantes: {Pais['NoPoblacion']}")
# Incluir Llaves Literales:
print(f"Este es un valor literal en llaves: {{Numero}}, y este es el valor de la variable: {Numero}.")
```

4.  ***Método `string.Template`***

```{python}
from string import Template
template = Template("Hola, mi nombre es $name y tengo $age años.")
mensaje  = template.substitute(name = "Pepito", age = 33)
print(mensaje)
```

| Método             | Sintaxis                    | Ventajas                                        | Desventajas                             |
|-----------------|-----------------|---------------------|-----------------|
| Operador `%`       | `Hola, %s` % "mundo"        | Simple y familiar para quienes conocen C        | Menos flexible y más propenso a errores |
| Método `.format()` | `Hola, {}`.format("mundo")  | Muy flexible, soporta nombres y posiciones      | Sintaxis más verbosa                    |
| f-strings          | `f"Hola, {variable}"`       | Muy legible, permite expresiones dentro de `{}` | Disponible solo en Python 3.6+          |
| `string.Template`  | `Template("Hola, $nombre")` | Simple y seguro, fácil de leer                  | Menos potente para formateo complejo    |

### Type casting

Abc.

```{python}

```

### None

Abc.

```{python}

```

### Dates and times

Abc.

```{python}
from datetime import datetime, date, time
dt = datetime(2024, 1, 31, 20, 30, 21)

dt.day
dt.date()
dt.time()
dt.strftime("%Y-%m-%d %H:%M")
```

```{python}
dt_hour = dt.replace(minute = 0, second = 0)
dt_hour
```

```{python}
delta = datetime.now() - dt
delta
```

------------------------------------------------------------------------

## :triangular_flag_on_post: *Objetos Mutables e Inmutables*

### Tuplas

::: callout-note
Una tupla es una secuencia **ordenada** de objetos de longitud fija e **inmutable** (*una vez asignada no puede modificarse*). La forma más sencilla de crear una tupla es con una secuencia de valores separados por comas entre paréntesis.
:::

```{python}
tup1 = (1, 2, 2)      # Pueden contener elementos repetidos
tup2 = 4, 5, 6        # Los paréntesis pueden omitirse
print(tup1); print(tup2)
```
```{python}
# Se puede convertir cualquier secuencia o iterador
print( tuple([7, 8, 9]) )
print( tuple("Texto") )
```

```{python}
tupCompleja = (2, 4, 8), (3, 5)
print(tupCompleja)
tupCompleja[0]
```
```{python}
tupMixta = tuple(['txt', [1, 2], True])
tupMixta[1].append(3) # Si un objeto dentro de una tupla es mutable, se puede modificar
print(tupMixta)
tupMixta[2] = False
```

```{python}
print( tup1*2 + (20, 24) + ('year',) )
```

```{python}
# Desempaquetado (unpacking)
uno, dos, tres = tup1
print(uno)
(a, b, c), (d, e) = tupCompleja
print(a)
```
```{python}
seq = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]
for a, b, c in seq:
    print(f'a = {a}, b = {b}, c = {c}')
```

```{python}
first, second, *rest = (1, 2, 3, 4, 5)
print(f"{first} || {second} || {rest}")
# El guión bajo (_) para descartar las variables no deseadas
first, second, *_ = (1, 2, 3, 4, 5)
```

```{python}
# Si desea definir una tupla con un solo elemento  debe incluir una coma al final:
my_t = (3,)
print(my_t)
# Métodos
(1, 0, 1, 1, 0).count(0)
```

### Listas

Una lista es una colección de elementos en un orden determinado. Puedes poner lo que quieras en una lista, y los elementos que la componen no tienen por qué estar relacionados de ninguna manera en particular. En Python, los corchetes `[ ]` indican una lista, y los elementos individuales de la lista están separados por comas.

-   Las posiciones de índice empiezan en 0, no en 1.

::: callout-note
Las listas son de longitud variable y su contenido puede modificarse (son **mutables**).
:::

```{python}
motorcycles = [0, "honda", "yamaha", "suzuki", None]
print(motorcycles)
list(tup1)
```

```{python}
# Añadir y eliminar elementos
motorcycles.append("ducati")
motorcycles.insert(1, "1")
del motorcycles[-2]         # Removing an Item Using the del Statement
motorcycles.pop(0)          # Popping Items from Any Position
print(motorcycles)
```

::: callout-caution
La inserción (`insert`) es más costosa computacionalmente que la adición (`append`), ya que las referencias a los elementos subsiguientes deben desplazarse internamente para dejar espacio al nuevo elemento.
:::

```{python}
motorcycles.append("2"); print(motorcycles)
motorcycles.remove("2"); print(motorcycles) # Removing an Item by Value
```

```{python}
# Sorting a List
motorcycles.sort(); print(motorcycles)
motorcycles.sort(reverse = True); print(motorcycles)
print(sorted(motorcycles)); print(motorcycles)
```

```{python}
print(motorcycles.reverse())
len(motorcycles)
```

```{python}
# Python returns another index error
listA = []
print(listA[-1])
```

```{python}
squares = []
for value in range(1, 11):
    squares.append(value ** 2)
print(squares)
# List Comprehensions
squares = [value**2 for value in range(1, 11)]
print(squares)
```

```{python}
# Slicing a List
print(motorcycles[0:3])
print(motorcycles[2:])
print(motorcycles[-2:])
```

```{python}
# Copying a List
onces = ["pizza", "arepa", "empanada"]
tusOnces = onces[:]
onces.append("buñuelo")
tusOnces.append("pan")
print(onces); print(tusOnces)
```

### Diccionarios

::: callout-note
Un diccionario (*conocido en otros lengujaes como `maps` o `associative arrays`*) almacena una colección de pares `clave-valor`, donde `clave` y `valor` son objetos Python. Cada clave está asociada a un valor, de modo que un valor puede ser convenientemente recuperado, insertado, modificado o eliminado dada una clave en particular. Tenga presente que las claves únicas (*no permiten duplicados en las claves*).
:::

```{python}
fisico = {'color': 'blanco', 'altura': 1.79}
fisico["ojos"] = "azules"
fisico["peso"] = 87
print(fisico)
```

### Conjuntos

::: callout-warning
This is an example of an tip callout
:::

------------------------------------------------------------------------

## :loop: *Flujo de Control*

### `if`, `elif`, and `else`

```{python}
w = 5; x = 4; y = 3; z = 2
if x < 0:
    print("x es negativo")
elif x == 0:
    print("x es cero")
elif w > x > y > z:
    print("Los valores están en orden")
else:
    print("Otro caso diferente")
```

### `for`

```{python}
numeros = [1, 2, None, 4, None, 5] # sum(numeros)
total = 0
for value in numeros:
    if value is None:
        continue
    if value == 4:
        break       # La sentencia 'break' se usa para salir del bucle
    total += value
total
```

```{python}
# 'break' sólo termina el for más interno, cualquier for externo continuará
for i in range(4):
    for j in range(4):
        if j > i:
            break
        print((i, j))
```

### `while`

Esta estructura permite ejecutar repetidamente un bloque de código mientras una condición especificada se evalúa como **verdadera**. Este ciclo es útil cuando no se sabe de antemano cuántas veces se necesitará repetir el bloque de código, a diferencia del ciclo `for`, que itera sobre una secuencia de elementos de longitud conocida.

```{python}
#| eval: false
while True:
    entrada = input("Escribe 'salir' para terminar: ")
    if entrada.lower() == "salir":
        break
```

### `pass`

Es la sentencia `no-op` (o `no hacer nada`) de Python. Puede usarse en bloques en los que no se va a realizar ninguna acción. Sólo es necesaria porque Python utiliza espacios en blanco para delimitar los bloques.

```{python}
#| eval: false
#| echo: false
for value in numeros:
    if value is None:
        pass
    else:
        total += value
total
```

Cuando la ejecución del programa alcanza una sentencia `continue`, la ejecución del programa salta inmediatamente al inicio del bucle y reevalúa la condición del bucle.

```{python}
#| eval: false
while True:
    print('¿Quién eres tú?')
    name = input()
    if name != 'Juan':
        continue
    print('Hola Juan, cuál es tu contraseña (es un equipo)')
    password = input()
    if password == 'nacional':
        break
print('Acceso Concedido.')
```

> + **Pass** (`for`, `if`): No realiza ninguna acción y se utiliza como marcador de lugar (placeholder para futura implementación).
  + **Continue** (`for`, `while`): Salta a la siguiente iteración del bucle, omitiendo el resto del código en la iteración actual.
  + **Break** (`if`): Termina el bucle inmediatamente, saliendo de la estructura de control de flujo.

### `range`

```{python}
print(f"{   range(10)   }")
print(f"{   range(1, 10)   }")
print(f"{   list(range(0, 20, 2))   }")
print(f"{   list(range(5, -1, -1))   }")
```

<!-- https://jjallaire.github.io/pydata-quarto-dashboards/#/learning-more -->

<!-- import numpy as np import matplotlib.pyplot as plt import pandas as pd import seaborn as sns import statsmodels as sm pd.options.display.max_columns = 20 pd.options.display.max_rows = 20 pd.options.display.max_colwidth = 80 np.set_printoptions(precision=4, suppress=True) -->

------------------------------------------------------------------------

<!-- ## :loop: *Funciones* -->

<!-- ```{python} -->
<!-- # Py añade return None al final de cualquier definición de función sin sentencia return: -->
<!-- def Saludo(nombre): -->
<!--   print("Hola " + nombre) -->

<!-- spam = Saludo("Carlos") -->
<!-- None == spam -->
<!-- ``` -->

<!-- En un programa de Python, hay exactamente un único ámbito global. Este ámbito global es el contexto en el que las variables globales se definen y existen a lo largo de la ejecución del programa. -->

<!-- -   En cuanto a los ámbitos locales, el número de estos puede variar. Cada vez que se define y se llama a una función, se crea un nuevo ámbito local. Por lo tanto, el número de ámbitos locales depende del número de funciones (incluidas las funciones anidadas) y métodos que se llaman durante la ejecución del programa. -->

<!-- ```{python} -->
<!-- # Las variables locales no pueden utilizarse en el ámbito global: -->
<!-- def getPI(): -->
<!--   PI = 3.1415 -->
<!-- getPI() -->
<!-- print(PI) -->
<!-- ``` -->

<!-- ```{python} -->
<!-- # Los ámbitos locales no pueden utilizar variables de otros ámbitos locales: -->
<!-- def a(): -->
<!--   phone = 444 -->
<!--   b() -->
<!--   print(phone) -->
<!-- def b(): -->
<!--   phone = 555 -->
<!-- a() -->
<!-- ``` -->

<!-- ```{python} -->
<!-- # Las variables globales pueden leerse desde un ámbito local: -->
<!-- def a(): -->
<!--   print(cte) -->
<!-- cte = 1234 -->
<!-- a() -->
<!-- print(cte) -->
<!-- ``` -->

<!-- ```{python} -->
<!-- # Si necesitas modificar una variable global desde dentro de una función: -->
<!-- def a(): -->
<!--     global cte -->
<!--     cte = 'Ahoar soy una Variable Global' -->

<!-- cte = 'Global' -->
<!-- a() -->
<!-- print(cte) -->
<!-- ``` -->

<!-- ```{python} -->
<!-- # Evitar que un programa se bloquee cuando recibe un error: -->
<!-- def a(b): -->
<!--     try: -->
<!--         return 1/b -->
<!--     except ZeroDivisionError: -->
<!--         print('Error: b debe ser diferente de 0.') -->
<!-- print(a(2)) -->
<!-- print(a(0)) -->
<!-- ``` -->

Python Enhancement Proposal (PEP): https://peps.python.org/pep-0008/

https://docs.python.org/es/3/library/trace.html python -m trace --count -C . somefile.py Esto ejecutará somefile.py y generará listados anotados de todos los módulos de Python importados durante la ejecución en el directorio actual1.
