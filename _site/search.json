[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Python Course",
    "section": "",
    "text": "Machine Learning\n\n\n\n\n\n\nScikit-Learn\n\n\nTensorFlow\n\n\nKeras\n\n\nPyTorch\n\n\nXGBoost\n\n\ntheano\n\n\n\n\n\n\n\n\n\nAug 15, 2024\n\n\nJeison Alarc√≥n\n\n\n\n\n\n\n\n\n\n\n\n\nDatabase Operation\n\n\n\n\n\n\nDask\n\n\nPySpark\n\n\nHadoop\n\n\nKafka\n\n\nKoalas\n\n\n\n\n\n\n\n\n\nAug 1, 2024\n\n\nJeison Alarc√≥n\n\n\n\n\n\n\n\n\n\n\n\n\nDashboarding\n\n\n\n\n\n\nStreamlit\n\n\nDash\n\n\n\n\n\n\n\n\n\nJul 15, 2024\n\n\nJeison Alarc√≥n\n\n\n\n\n\n\n\n\n\n\n\n\nData Visualization\n\n\n\n\n\n\nPlotly\n\n\nSeaborn\n\n\nFolium\n\n\nMatplotlib\n\n\nBokeh\n\n\nAltair\n\n\n\n\n\n\n\n\n\nJul 1, 2024\n\n\nJeison Alarc√≥n\n\n\n\n\n\n\n\n\n\n\n\n\nStatistical Analysis P2\n\n\n\n\n\n\nSciPy\n\n\nStatsmodels\n\n\nPyStan\n\n\nPyMC3\n\n\nLifelines\n\n\nPingouin\n\n\n\n\n\n\n\n\n\nJun 30, 2024\n\n\nJeison Alarc√≥n\n\n\n\n\n\n\n\n\n\n\n\n\nStatistical Analysis P1\n\n\n\n\n\n\nSciPy\n\n\nStatsmodels\n\n\nPyStan\n\n\nPyMC3\n\n\nLifelines\n\n\nPingouin\n\n\n\n\n\n\n\n\n\nJun 29, 2024\n\n\nJeison Alarc√≥n\n\n\n\n\n\n\n\n\n\n\n\n\nData Manipulation P2\n\n\n\n\n\n\nNumpy\n\n\nPandas\n\n\nPolars\n\n\nModin\n\n\nVaex\n\n\nDatatable\n\n\nCuPy\n\n\n\n\n\n\n\n\n\nJun 16, 2024\n\n\nJeison Alarc√≥n\n\n\n\n\n\n\n\n\n\n\n\n\nData Manipulation P1\n\n\n\n\n\n\nNumpy\n\n\nPandas\n\n\nPolars\n\n\nModin\n\n\nVaex\n\n\nDatatable\n\n\nCuPy\n\n\n\n\n\n\n\n\n\nJun 15, 2024\n\n\nJeison Alarc√≥n\n\n\n\n\n\n\n\n\n\n\n\n\nGetting Started\n\n\n\n\n\n\nPython Interpreter\n\n\nBasics\n\n\nIPython\n\n\n\n\n\n\n\n\n\nJun 1, 2024\n\n\nJeison Alarc√≥n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Getting Started/index.html",
    "href": "posts/Getting Started/index.html",
    "title": "Getting Started",
    "section": "",
    "text": "Este curso es una introducci√≥n al trabajo con datos en Python, ofreciendo una visi√≥n general de las principales caracter√≠sticas de las estructuras de datos y librer√≠as incorporadas para la manipulaci√≥n de datos.\nEl enfoque principal del curso es el an√°lisis de datos basados en tablas y la preparaci√≥n de datos para conjuntos peque√±os que puedan manejarse en un ordenador personal. Para utilizar estas herramientas, a veces es necesario organizar los datos desordenados en una forma tabular. Python es ideal para esto, y cuanto m√°s familiarizado est√© con el lenguaje y sus tipos de datos, m√°s f√°cil ser√° preparar los conjuntos de datos para su an√°lisis.\n\n\n\n\n\nUsaremos la IDE de Rstudio (claramente no nos limitaremos a ella, usaremos Jupyter Notebook, VSC, Google Colab, etc). Pero m√°s adelante trabajaremos con ambos lenguajes (Python y R) simult√°neamente por lo cual nos servir√° realizar esta configuraci√≥n.\n\nPrimero necesita conocer con exactitud la ruta del ejecutable python.exe üí• que desea usar (sea con Python, conda, venv, etc). Para ello abra la consola de su int√©rprete (si usa un environment en particular no olvide ingresar a √©l üì•) y ejecute los comandos mostrados. Guarde dicha direcci√≥n en el portapapeles üìé.\n\n\npython\nimport sys\nprint(sys.executable)\n\n\n\nAhora que conoce la direcci√≥n correcta de su int√©rprete de Python üìá, dir√≠jase a la ruta mostrada en Rstudio. üëÄ En ocasiones no le saldr√° para ser seleccionado, por eso es mejor tener la ruta, p√©guela en la casilla y espere unos segundos ‚åö que lo reconozca antes de salir y darle guardar o aplicar (si realiza lo anterior de forma muy r√°pida no le quedar√°). Le pedir√° que reinicie sesi√≥n y ya deber√° quedar si vuelve a ingresar.\n\n\n\nPor √∫ltimo instalaremos una librer√≠a que nos proporcionar√° un conjunto completo de herramientas para la interoperabilidad entre Python y R üõ†Ô∏è.\n\n\ninstall.packages(\"reticulate\")\n\n\n\n\nComo usaremos dentro de los .qmd el par√°metro jupyter: python3, es necesario tener instalada dicha librer√≠a en su int√©rprete üíª, para lo cual ejecute (dentro de su kernel a usar y environment elegido):\n\nconda install jupyter\n# conda install numpy pandas scikit-learn matplotlib seaborn jupyter\n\nCompruebe que efectivamente haya sido descargado con:\n\nconda list\n\n\n\n\nS√≠ ejecuta el siguiente comando en el terminal ‚å®Ô∏è, deber√° obtener algo como lo siguiente:\nquarto check jupyter\n\nComo puede observar tenemos un problema ‚ö†Ô∏è y es que no qued√≥ el kernel que elegimos desde un inicio. Y el error mostrado se debe a que obviamente hay m√≥dulos que no hemos instalado en dicho int√©rprete que Quarto selecciona por defecto. Si desea obtener m√°s informaci√≥n de dicho error consulte: Quarto Uses Wrong Python Version.\nPara ‚Äúcorregir‚Äù lo anterior debemos apoyarnos de la documentaci√≥n oficial, la cual indica que se debe crear un archivo _environment (s√≠ as√≠ tal cual sin extensi√≥n alguna) y establecer los valores para QUARTO_PYTHON=\"C:\\ProgramData\\miniconda3\\\" ‚úîÔ∏è. As√≠ conseguimos que Quarto pueda establecer y fijar dicha configuraci√≥n local para nuestro .qmd.\n\nQUARTO_PYTHON se establece en: C:\\ProgramData\\miniconda3\\\nPY_PYTHON se establece en: C:\\ProgramData\\miniconda3\\\nRETICULATE_PYTHON se establece en: C:\\ProgramData\\miniconda3\\\n\nEl siguiente blog üìî explica demasiado bien lo que acabamos de hacer a mayor detalle, para renderizar un documento Quarto con un entorno espec√≠fico en RStudio/Posit.\nüü¢ Finalmente, cree y ejecute un nuevo .qmd, puede utilizar la plantilla ejemplo, y agregue el siguiente chunk para que verifique por su propia cuenta que, a pesar de que Quarto a nivel global est√° usando otro interprete, al definir el _environment queda con el que usted especifica.\n\nimport sys\nprint(sys.executable)\nprint(sys.prefix)\nprint (sys.version)\n\nC:\\ProgramData\\miniconda3\\pythonw.exe\nC:\\ProgramData\\miniconda3\n3.12.2 | packaged by Anaconda, Inc. | (main, Feb 27 2024, 17:28:07) [MSC v.1916 64 bit (AMD64)]\n\n\n\n\n\n\n\nüîñ Cualquier comando est√°ndar de shell puede ser utilizado directamente en IPython anteponiendo el car√°cter !. Por ejemplo,\n\n# : ....................... Shell Commands en IPython ........................ :\n!ls\n\nBooks\nLICENSE\nProfile.jpg\nPython Course.Rproj\n_environment\n_freeze\n_publish.yml\n_quarto.yml\n_site\nabout.qmd\nfiles\nindex.qmd\nposts\nstyles.css\n\n\n\ndirectory = !pwd\nprint(directory)\n\n['/d/Documentos/JOBS/DNPE/CursoPython']\n\n\n\nmessage = \"Imprimiendo un texto desde shell\"\n!echo {message}\n\nImprimiendo un texto desde shell\n\n\n\n\n\n\n\nüìê Identaci√≥n (no llaves {} ): Python utiliza espacios en blanco (tabuladores o espacios) para estructurar el c√≥digo en lugar de utilizar llaves como en muchos otros lenguajes como R y C++.\nüî£ No se necesita terminar con ;: El punto y coma puede usarse para separar m√∫ltiples sentencias en una sola l√≠nea. a = 1; b = 2; c = 3\nüè∑Ô∏è Las cadenas admiten tanto comillas simples ' como comillas dobles \": Se prefieren las comillas dobles, y para cadenas de varias l√≠neas con saltos de l√≠nea, puede utilizar comillas triples \"\"\".\nüÜé Vinculaci√≥n (binding): En otros lenguajes, la asignaci√≥n har√° que se copien los datos. En Python, hace que se refieran ahora al mismo objeto,\n\n\na = [1, 2, 3]\nb = a\na.append(4)\nb\n\n[1, 2, 3, 4]\n\n\n\n# Cuando se pasan objetos como argumentos a una funci√≥n, se crean nuevas variables\n# locales que hacen referencia a los objetos originales sin necesidad de copiarlos\ndef myAppend(lista, elemento):\n  lista.append(elemento)\ndata = [1, 2, 3]\nmyAppend(data, 4)\ndata\n\n[1, 2, 3, 4]\n\n\n\nüí™ Un lenguaje tipado: Cada objeto tiene un tipo (o clase) espec√≠fico, con la ventaja de que las variables no tienen un tipo inherente asociado a ellas.\n\n\na = 5      ; print(type(a))\na = \"cinco\"; print(type(a))\n\n&lt;class 'int'&gt;\n&lt;class 'str'&gt;\n\n\n\n\"5\" + 5\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[169], line 1\n----&gt; 1 \"5\" + 5\n\nTypeError: can only concatenate str (not \"int\") to str\n\n\n\n\na = 4.5\nb = 2\nprint(a / b)\nprint(isinstance(a, (int, float)))\n\n2.25\nTrue\n\n\n\n\n\n# Acceso a la Documentaci√≥n:\nhelp(len)\n\nHelp on built-in function len in module builtins:\n\nlen(obj, /)\n    Return the number of items in a container.\n\n\n\n\nletra = \"a\"\n# letra.&lt;Press Tab&gt;\ngetattr(letra, \"split\")\n\n&lt;function str.split(sep=None, maxsplit=-1)&gt;\n\n\n\n# Gui√≥n bajo '_' para salidas anteriores\n1+1\n2+2\nprint(_)\n\n&lt;built-in method split of str object at 0x00007FFB2B841CE0&gt;\n\n\n\n# Acceder a las entradas anteriores (historial)\n%history -n 1-3\n\n   1:\nimport sys\nprint(sys.executable)\nprint(sys.prefix)\nprint (sys.version)\n   2:\n# : ....................... Shell Commands en IPython ........................ :\n!ls\n   3:\ndirectory = !pwd\nprint(directory)\n\n\n\n# : .......................... Timing Code Snippets .......................... :\n%timeit sum(range(100))   # IPython Magic Commands\n\n362 ns ¬± 1.56 ns per loop (mean ¬± std. dev. of 7 runs, 1,000,000 loops each)\n\n\n\n%%timeit                  # Cuando es m√°s complejo, baja el n√∫mero de repeticiones\ntotal = 0\nfor i in range(1000):\n  for j in range(1000):\n    total += i * (-1) ** j\n\n84.9 ms ¬± 897 Œºs per loop (mean ¬± std. dev. of 7 runs, 10 loops each)\n\n\n\n\n\n```{python}\n# Modulo.py\nPI = 3.14159\ndef cuadrado(x):\n return x ** 2\n```\n\nimport Modulo\nprint(Modulo.cuadrado(5))\npi = Modulo.PI\n# ......................................\nfrom Modulo import PI, cuadrado\ncuadrado(PI)\n# ......................................\nimport Modulo as m\nfrom Modulo import PI as kte, cuadrado as elevado\n\nr1 = m.cuadrado(kte); print(r1)\nr2 = elevado(6)     ; print(r2)\n\n\n\n\n\n\na = [1, 2, 3]\nb = a\nc = list(a) # Crea una copia\n\nprint(a is b)\nprint(a is not c)\n\nTrue\nTrue\n\n\n\na.append(4)\na == c\n\nFalse\n\n\n\n# Intercambiar los nombres de las variables:\na, b = 1, 2\n# tmp = a\n# a = b\n# b = tmp\nb, a = a, b\nprint(f'a = {a}, b = {b}')\n\na = 2, b = 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTipo\nDescripci√≥n\n\n\n\n\nNone\nEl valor ‚Äúnulo‚Äù de Python (solo existe una instancia del objeto None)\n\n\nstr\nTipo de cadena; contiene cadenas Unicode\n\n\nbytes\nDatos binarios en bruto\n\n\nfloat\nN√∫mero de punto flotante de doble precisi√≥n (nota que no hay un tipo double separado)\n\n\nbool\nUn valor booleano True o False\n\n\nint\nEntero de precisi√≥n arbitraria\n\n\n\n\n\n\nprint(int(False)); print(int(True))\nprint(True + False)\nprint(bool(2024.75)) # Todo valor !=0 se convierte en True\nprint(bool(\".\"))     # Todo valor !=\"\" se convierte en True\n\n0\n1\n1\nTrue\nTrue\n\n\n\n\n\nAbc.\n\na = \"Hola mundo \\\\&gt;\"\nb = \"\"\"\nEsta cadena es m√°s larga que\nabarca varias l√≠neas\n\"\"\"\nc = r\"D:\\Documentos\\Carpeta\"\n\nprint(a); print(b); print(c)\nb.count(\"\\n\")\n\nHola mundo \\&gt;\n\nEsta cadena es m√°s larga que\nabarca varias l√≠neas\n\nD:\\Documentos\\Carpeta\n\n\n3\n\n\n\n# Los strings en Python son inmutables: no se puede modificar una cadena\nprint(a[5])\na[5] = \"M\"\n\nm\n\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[182], line 3\n      1 # Los strings en Python son inmutables: no se puede modificar una cadena\n      2 print(a[5])\n----&gt; 3 a[5] = \"M\"\n\nTypeError: 'str' object does not support item assignment\n\n\n\n\na.replace(\"m\", \"M\")\n\n'Hola Mundo \\\\&gt;'\n\n\n\na       # Tras esta operaci√≥n, la variable no se modifica\n\n'Hola mundo \\\\&gt;'\n\n\n\nlist(a) # Las cadenas son una secuencia de caracteres Unicode\n\n['H', 'o', 'l', 'a', ' ', 'm', 'u', 'n', 'd', 'o', ' ', '\\\\', '&gt;']\n\n\n\n\nExisten varios m√©todos para formatear cadenas de texto, entre los cuales encontramos:\n\nOperador de Formato %\n\n\nNombre = \"Pepito\"\nEdad = 33 \nPi   = 3.141592\nprint(\"Hola, mi nombre es %s y tengo %d a√±os. Y s√© que pi vale: %.2f.\" % (Nombre, Edad, Pi))\n\nHola, mi nombre es Pepito y tengo 33 a√±os. Y s√© que pi vale: 3.14.\n\n\n\nM√©todo .format()\n\n\nprint(\"Hola, mi nombre es {} y tengo {} a√±os. Y s√© que pi vale: {:.2f}.\".format(Nombre, Edad, Pi))\nprint(\"Nombre: {name}, Edad: {age}\".format(name = \"Luis\", age = 33))\nprint(\"El {0} se encuentra en el {1} y el {1} se encuentra en el {0}.\".format(\"sol\", \"cielo\"))\n\nHola, mi nombre es Pepito y tengo 33 a√±os. Y s√© que pi vale: 3.14.\nNombre: Luis, Edad: 33\nEl sol se encuentra en el cielo y el cielo se encuentra en el sol.\n\n\n\n# 0:.3f El 1re valor ser√° un flotantes con 3 decimales\n# 1:s   El 2do valor ser√° un string\n# 2:d   El 3re valor ser√° un entero\ntemplate = \"{0:.3f} {1:s} equivalen a US${2:d}\"\ntemplate.format(3.960, \"pesos Colombianos\", 1) # Intente modificar el tipo de alguno de estos\n\n'3.960 pesos Colombianos equivalen a US$1'\n\n\n\nf-strings\n\n\nTasa   = 3.960\nMoneda = \"Colombianos\"\nf\"{Tasa:.4f} pesos {Moneda} equivalen a US${Tasa/Tasa}\"\n\n'3.9600 pesos Colombianos equivalen a US$1.0'\n\n\n\n# C√°lculos Dentro:\na = 5; b = 10\nprint(f\"La suma de {a} y {b} es {a + b}. Adem√°s a*b = {a*b}\")\n# Alinear Texto:\nprint(f\"{'izquierda':&lt;10} {'centrado':^10} {'derecha':&gt;10}\")\n# Mostrar N√∫meros en Diferentes Bases:\nNumero = 255\nprint(f\"Decimal: {Numero}, Binario: {Numero:b}, Hexadecimal: {Numero:x}, Octal: {Numero:o}\")\n# Incluir Expresiones y M√©todos:\nTxt = \"Amo Python\"\nprint(f\"El texto en may√∫sculas es {Txt.upper()}.\")\n# Combinaci√≥n con Diccionarios:\nPais = {\"nombre\": \"Colombia\", \"NoPoblacion\": 50}\nprint(f\"Pa√≠s: {Pais['nombre']}, Habitantes: {Pais['NoPoblacion']}\")\n# Incluir Llaves Literales:\nprint(f\"Este es un valor literal en llaves: {{Numero}}, y este es el valor de la variable: {Numero}.\")\n\nLa suma de 5 y 10 es 15. Adem√°s a*b = 50\nizquierda   centrado     derecha\nDecimal: 255, Binario: 11111111, Hexadecimal: ff, Octal: 377\nEl texto en may√∫sculas es AMO PYTHON.\nPa√≠s: Colombia, Habitantes: 50\nEste es un valor literal en llaves: {Numero}, y este es el valor de la variable: 255.\n\n\n\nM√©todo string.Template\n\n\nfrom string import Template\ntemplate = Template(\"Hola, mi nombre es $name y tengo $age a√±os.\")\nmensaje  = template.substitute(name = \"Pepito\", age = 33)\nprint(mensaje)\n\nHola, mi nombre es Pepito y tengo 33 a√±os.\n\n\n\n\n\n\n\n\n\n\n\nM√©todo\nSintaxis\nVentajas\nDesventajas\n\n\n\n\nOperador %\nHola, %s % ‚Äúmundo‚Äù\nSimple y familiar para quienes conocen C\nMenos flexible y m√°s propenso a errores\n\n\nM√©todo .format()\nHola, {}.format(‚Äúmundo‚Äù)\nMuy flexible, soporta nombres y posiciones\nSintaxis m√°s verbosa\n\n\nf-strings\nf\"Hola, {variable}\"\nMuy legible, permite expresiones dentro de {}\nDisponible solo en Python 3.6+\n\n\nstring.Template\nTemplate(\"Hola, $nombre\")\nSimple y seguro, f√°cil de leer\nMenos potente para formateo complejo\n\n\n\n\n\n\n\nAbc.\n\n\n\nAbc.\n\n\n\nAbc.\n\nfrom datetime import datetime, date, time\ndt = datetime(2024, 1, 31, 20, 30, 21)\n\ndt.day\ndt.date()\ndt.time()\ndt.strftime(\"%Y-%m-%d %H:%M\")\n\n'2024-01-31 20:30'\n\n\n\ndt_hour = dt.replace(minute = 0, second = 0)\ndt_hour\n\ndatetime.datetime(2024, 1, 31, 20, 0)\n\n\n\ndelta = datetime.now() - dt\ndelta\n\ndatetime.timedelta(days=141, seconds=5334, microseconds=636194)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nUna tupla es una secuencia de objetos de longitud fija e inmutable (una vez asignada no puede modificarse). La forma m√°s sencilla de crear una tupla es con una secuencia de valores separados por comas entre par√©ntesis\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nLas listas son de longitud variable y su contenido puede modificarse (son mutables).\n\n\n\n\n\n\n\n\nCaution\n\n\n\nLa inserci√≥n (insert) es m√°s costosa computacionalmente que la adici√≥n (append), ya que las referencias a los elementos subsiguientes deben desplazarse internamente para dejar espacio al nuevo elemento.\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nUn diccionario (conocido en otros lengujaes como maps o associative arrays) almacena una colecci√≥n de pares clave-valor, donde clave y valor son objetos Python. Cada clave est√° asociada a un valor, de modo que un valor puede ser convenientemente recuperado, insertado, modificado o eliminado dada una clave en particular.\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThis is an example of an tip callout\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEs la sentencia no-op (o no hacer nada) de Python. Puede usarse en bloques en los que no se va a realizar ninguna acci√≥n. S√≥lo es necesaria porque Python utiliza espacios en blanco para delimitar los bloques."
  },
  {
    "objectID": "posts/Getting Started/index.html#configuraci√≥n-inicial",
    "href": "posts/Getting Started/index.html#configuraci√≥n-inicial",
    "title": "Getting Started",
    "section": "",
    "text": "Usaremos la IDE de Rstudio (claramente no nos limitaremos a ella, usaremos Jupyter Notebook, VSC, Google Colab, etc). Pero m√°s adelante trabajaremos con ambos lenguajes (Python y R) simult√°neamente por lo cual nos servir√° realizar esta configuraci√≥n.\n\nPrimero necesita conocer con exactitud la ruta del ejecutable python.exe üí• que desea usar (sea con Python, conda, venv, etc). Para ello abra la consola de su int√©rprete (si usa un environment en particular no olvide ingresar a √©l üì•) y ejecute los comandos mostrados. Guarde dicha direcci√≥n en el portapapeles üìé.\n\n\npython\nimport sys\nprint(sys.executable)\n\n\n\nAhora que conoce la direcci√≥n correcta de su int√©rprete de Python üìá, dir√≠jase a la ruta mostrada en Rstudio. üëÄ En ocasiones no le saldr√° para ser seleccionado, por eso es mejor tener la ruta, p√©guela en la casilla y espere unos segundos ‚åö que lo reconozca antes de salir y darle guardar o aplicar (si realiza lo anterior de forma muy r√°pida no le quedar√°). Le pedir√° que reinicie sesi√≥n y ya deber√° quedar si vuelve a ingresar.\n\n\n\nPor √∫ltimo instalaremos una librer√≠a que nos proporcionar√° un conjunto completo de herramientas para la interoperabilidad entre Python y R üõ†Ô∏è.\n\n\ninstall.packages(\"reticulate\")\n\n\n\n\nComo usaremos dentro de los .qmd el par√°metro jupyter: python3, es necesario tener instalada dicha librer√≠a en su int√©rprete üíª, para lo cual ejecute (dentro de su kernel a usar y environment elegido):\n\nconda install jupyter\n# conda install numpy pandas scikit-learn matplotlib seaborn jupyter\n\nCompruebe que efectivamente haya sido descargado con:\n\nconda list\n\n\n\n\nS√≠ ejecuta el siguiente comando en el terminal ‚å®Ô∏è, deber√° obtener algo como lo siguiente:\nquarto check jupyter\n\nComo puede observar tenemos un problema ‚ö†Ô∏è y es que no qued√≥ el kernel que elegimos desde un inicio. Y el error mostrado se debe a que obviamente hay m√≥dulos que no hemos instalado en dicho int√©rprete que Quarto selecciona por defecto. Si desea obtener m√°s informaci√≥n de dicho error consulte: Quarto Uses Wrong Python Version.\nPara ‚Äúcorregir‚Äù lo anterior debemos apoyarnos de la documentaci√≥n oficial, la cual indica que se debe crear un archivo _environment (s√≠ as√≠ tal cual sin extensi√≥n alguna) y establecer los valores para QUARTO_PYTHON=\"C:\\ProgramData\\miniconda3\\\" ‚úîÔ∏è. As√≠ conseguimos que Quarto pueda establecer y fijar dicha configuraci√≥n local para nuestro .qmd.\n\nQUARTO_PYTHON se establece en: C:\\ProgramData\\miniconda3\\\nPY_PYTHON se establece en: C:\\ProgramData\\miniconda3\\\nRETICULATE_PYTHON se establece en: C:\\ProgramData\\miniconda3\\\n\nEl siguiente blog üìî explica demasiado bien lo que acabamos de hacer a mayor detalle, para renderizar un documento Quarto con un entorno espec√≠fico en RStudio/Posit.\nüü¢ Finalmente, cree y ejecute un nuevo .qmd, puede utilizar la plantilla ejemplo, y agregue el siguiente chunk para que verifique por su propia cuenta que, a pesar de que Quarto a nivel global est√° usando otro interprete, al definir el _environment queda con el que usted especifica.\n\nimport sys\nprint(sys.executable)\nprint(sys.prefix)\nprint (sys.version)\n\nC:\\ProgramData\\miniconda3\\pythonw.exe\nC:\\ProgramData\\miniconda3\n3.12.2 | packaged by Anaconda, Inc. | (main, Feb 27 2024, 17:28:07) [MSC v.1916 64 bit (AMD64)]"
  },
  {
    "objectID": "posts/Getting Started/index.html#ipython",
    "href": "posts/Getting Started/index.html#ipython",
    "title": "Getting Started",
    "section": "",
    "text": "üîñ Cualquier comando est√°ndar de shell puede ser utilizado directamente en IPython anteponiendo el car√°cter !. Por ejemplo,\n\n# : ....................... Shell Commands en IPython ........................ :\n!ls\n\nBooks\nLICENSE\nProfile.jpg\nPython Course.Rproj\n_environment\n_freeze\n_publish.yml\n_quarto.yml\n_site\nabout.qmd\nfiles\nindex.qmd\nposts\nstyles.css\n\n\n\ndirectory = !pwd\nprint(directory)\n\n['/d/Documentos/JOBS/DNPE/CursoPython']\n\n\n\nmessage = \"Imprimiendo un texto desde shell\"\n!echo {message}\n\nImprimiendo un texto desde shell"
  },
  {
    "objectID": "posts/Getting Started/index.html#conceptos-b√°sicos",
    "href": "posts/Getting Started/index.html#conceptos-b√°sicos",
    "title": "Getting Started",
    "section": "",
    "text": "üìê Identaci√≥n (no llaves {} ): Python utiliza espacios en blanco (tabuladores o espacios) para estructurar el c√≥digo en lugar de utilizar llaves como en muchos otros lenguajes como R y C++.\nüî£ No se necesita terminar con ;: El punto y coma puede usarse para separar m√∫ltiples sentencias en una sola l√≠nea. a = 1; b = 2; c = 3\nüè∑Ô∏è Las cadenas admiten tanto comillas simples ' como comillas dobles \": Se prefieren las comillas dobles, y para cadenas de varias l√≠neas con saltos de l√≠nea, puede utilizar comillas triples \"\"\".\nüÜé Vinculaci√≥n (binding): En otros lenguajes, la asignaci√≥n har√° que se copien los datos. En Python, hace que se refieran ahora al mismo objeto,\n\n\na = [1, 2, 3]\nb = a\na.append(4)\nb\n\n[1, 2, 3, 4]\n\n\n\n# Cuando se pasan objetos como argumentos a una funci√≥n, se crean nuevas variables\n# locales que hacen referencia a los objetos originales sin necesidad de copiarlos\ndef myAppend(lista, elemento):\n  lista.append(elemento)\ndata = [1, 2, 3]\nmyAppend(data, 4)\ndata\n\n[1, 2, 3, 4]\n\n\n\nüí™ Un lenguaje tipado: Cada objeto tiene un tipo (o clase) espec√≠fico, con la ventaja de que las variables no tienen un tipo inherente asociado a ellas.\n\n\na = 5      ; print(type(a))\na = \"cinco\"; print(type(a))\n\n&lt;class 'int'&gt;\n&lt;class 'str'&gt;\n\n\n\n\"5\" + 5\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[169], line 1\n----&gt; 1 \"5\" + 5\n\nTypeError: can only concatenate str (not \"int\") to str\n\n\n\n\na = 4.5\nb = 2\nprint(a / b)\nprint(isinstance(a, (int, float)))\n\n2.25\nTrue\n\n\n\n\n\n# Acceso a la Documentaci√≥n:\nhelp(len)\n\nHelp on built-in function len in module builtins:\n\nlen(obj, /)\n    Return the number of items in a container.\n\n\n\n\nletra = \"a\"\n# letra.&lt;Press Tab&gt;\ngetattr(letra, \"split\")\n\n&lt;function str.split(sep=None, maxsplit=-1)&gt;\n\n\n\n# Gui√≥n bajo '_' para salidas anteriores\n1+1\n2+2\nprint(_)\n\n&lt;built-in method split of str object at 0x00007FFB2B841CE0&gt;\n\n\n\n# Acceder a las entradas anteriores (historial)\n%history -n 1-3\n\n   1:\nimport sys\nprint(sys.executable)\nprint(sys.prefix)\nprint (sys.version)\n   2:\n# : ....................... Shell Commands en IPython ........................ :\n!ls\n   3:\ndirectory = !pwd\nprint(directory)\n\n\n\n# : .......................... Timing Code Snippets .......................... :\n%timeit sum(range(100))   # IPython Magic Commands\n\n362 ns ¬± 1.56 ns per loop (mean ¬± std. dev. of 7 runs, 1,000,000 loops each)\n\n\n\n%%timeit                  # Cuando es m√°s complejo, baja el n√∫mero de repeticiones\ntotal = 0\nfor i in range(1000):\n  for j in range(1000):\n    total += i * (-1) ** j\n\n84.9 ms ¬± 897 Œºs per loop (mean ¬± std. dev. of 7 runs, 10 loops each)\n\n\n\n\n\n```{python}\n# Modulo.py\nPI = 3.14159\ndef cuadrado(x):\n return x ** 2\n```\n\nimport Modulo\nprint(Modulo.cuadrado(5))\npi = Modulo.PI\n# ......................................\nfrom Modulo import PI, cuadrado\ncuadrado(PI)\n# ......................................\nimport Modulo as m\nfrom Modulo import PI as kte, cuadrado as elevado\n\nr1 = m.cuadrado(kte); print(r1)\nr2 = elevado(6)     ; print(r2)\n\n\n\n\n\n\na = [1, 2, 3]\nb = a\nc = list(a) # Crea una copia\n\nprint(a is b)\nprint(a is not c)\n\nTrue\nTrue\n\n\n\na.append(4)\na == c\n\nFalse\n\n\n\n# Intercambiar los nombres de las variables:\na, b = 1, 2\n# tmp = a\n# a = b\n# b = tmp\nb, a = a, b\nprint(f'a = {a}, b = {b}')\n\na = 2, b = 1"
  },
  {
    "objectID": "posts/Getting Started/index.html#‚Ñπ-tipos-est√°ndar",
    "href": "posts/Getting Started/index.html#‚Ñπ-tipos-est√°ndar",
    "title": "Getting Started",
    "section": "",
    "text": "Tipo\nDescripci√≥n\n\n\n\n\nNone\nEl valor ‚Äúnulo‚Äù de Python (solo existe una instancia del objeto None)\n\n\nstr\nTipo de cadena; contiene cadenas Unicode\n\n\nbytes\nDatos binarios en bruto\n\n\nfloat\nN√∫mero de punto flotante de doble precisi√≥n (nota que no hay un tipo double separado)\n\n\nbool\nUn valor booleano True o False\n\n\nint\nEntero de precisi√≥n arbitraria\n\n\n\n\n\n\nprint(int(False)); print(int(True))\nprint(True + False)\nprint(bool(2024.75)) # Todo valor !=0 se convierte en True\nprint(bool(\".\"))     # Todo valor !=\"\" se convierte en True\n\n0\n1\n1\nTrue\nTrue\n\n\n\n\n\nAbc.\n\na = \"Hola mundo \\\\&gt;\"\nb = \"\"\"\nEsta cadena es m√°s larga que\nabarca varias l√≠neas\n\"\"\"\nc = r\"D:\\Documentos\\Carpeta\"\n\nprint(a); print(b); print(c)\nb.count(\"\\n\")\n\nHola mundo \\&gt;\n\nEsta cadena es m√°s larga que\nabarca varias l√≠neas\n\nD:\\Documentos\\Carpeta\n\n\n3\n\n\n\n# Los strings en Python son inmutables: no se puede modificar una cadena\nprint(a[5])\na[5] = \"M\"\n\nm\n\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[182], line 3\n      1 # Los strings en Python son inmutables: no se puede modificar una cadena\n      2 print(a[5])\n----&gt; 3 a[5] = \"M\"\n\nTypeError: 'str' object does not support item assignment\n\n\n\n\na.replace(\"m\", \"M\")\n\n'Hola Mundo \\\\&gt;'\n\n\n\na       # Tras esta operaci√≥n, la variable no se modifica\n\n'Hola mundo \\\\&gt;'\n\n\n\nlist(a) # Las cadenas son una secuencia de caracteres Unicode\n\n['H', 'o', 'l', 'a', ' ', 'm', 'u', 'n', 'd', 'o', ' ', '\\\\', '&gt;']\n\n\n\n\nExisten varios m√©todos para formatear cadenas de texto, entre los cuales encontramos:\n\nOperador de Formato %\n\n\nNombre = \"Pepito\"\nEdad = 33 \nPi   = 3.141592\nprint(\"Hola, mi nombre es %s y tengo %d a√±os. Y s√© que pi vale: %.2f.\" % (Nombre, Edad, Pi))\n\nHola, mi nombre es Pepito y tengo 33 a√±os. Y s√© que pi vale: 3.14.\n\n\n\nM√©todo .format()\n\n\nprint(\"Hola, mi nombre es {} y tengo {} a√±os. Y s√© que pi vale: {:.2f}.\".format(Nombre, Edad, Pi))\nprint(\"Nombre: {name}, Edad: {age}\".format(name = \"Luis\", age = 33))\nprint(\"El {0} se encuentra en el {1} y el {1} se encuentra en el {0}.\".format(\"sol\", \"cielo\"))\n\nHola, mi nombre es Pepito y tengo 33 a√±os. Y s√© que pi vale: 3.14.\nNombre: Luis, Edad: 33\nEl sol se encuentra en el cielo y el cielo se encuentra en el sol.\n\n\n\n# 0:.3f El 1re valor ser√° un flotantes con 3 decimales\n# 1:s   El 2do valor ser√° un string\n# 2:d   El 3re valor ser√° un entero\ntemplate = \"{0:.3f} {1:s} equivalen a US${2:d}\"\ntemplate.format(3.960, \"pesos Colombianos\", 1) # Intente modificar el tipo de alguno de estos\n\n'3.960 pesos Colombianos equivalen a US$1'\n\n\n\nf-strings\n\n\nTasa   = 3.960\nMoneda = \"Colombianos\"\nf\"{Tasa:.4f} pesos {Moneda} equivalen a US${Tasa/Tasa}\"\n\n'3.9600 pesos Colombianos equivalen a US$1.0'\n\n\n\n# C√°lculos Dentro:\na = 5; b = 10\nprint(f\"La suma de {a} y {b} es {a + b}. Adem√°s a*b = {a*b}\")\n# Alinear Texto:\nprint(f\"{'izquierda':&lt;10} {'centrado':^10} {'derecha':&gt;10}\")\n# Mostrar N√∫meros en Diferentes Bases:\nNumero = 255\nprint(f\"Decimal: {Numero}, Binario: {Numero:b}, Hexadecimal: {Numero:x}, Octal: {Numero:o}\")\n# Incluir Expresiones y M√©todos:\nTxt = \"Amo Python\"\nprint(f\"El texto en may√∫sculas es {Txt.upper()}.\")\n# Combinaci√≥n con Diccionarios:\nPais = {\"nombre\": \"Colombia\", \"NoPoblacion\": 50}\nprint(f\"Pa√≠s: {Pais['nombre']}, Habitantes: {Pais['NoPoblacion']}\")\n# Incluir Llaves Literales:\nprint(f\"Este es un valor literal en llaves: {{Numero}}, y este es el valor de la variable: {Numero}.\")\n\nLa suma de 5 y 10 es 15. Adem√°s a*b = 50\nizquierda   centrado     derecha\nDecimal: 255, Binario: 11111111, Hexadecimal: ff, Octal: 377\nEl texto en may√∫sculas es AMO PYTHON.\nPa√≠s: Colombia, Habitantes: 50\nEste es un valor literal en llaves: {Numero}, y este es el valor de la variable: 255.\n\n\n\nM√©todo string.Template\n\n\nfrom string import Template\ntemplate = Template(\"Hola, mi nombre es $name y tengo $age a√±os.\")\nmensaje  = template.substitute(name = \"Pepito\", age = 33)\nprint(mensaje)\n\nHola, mi nombre es Pepito y tengo 33 a√±os.\n\n\n\n\n\n\n\n\n\n\n\nM√©todo\nSintaxis\nVentajas\nDesventajas\n\n\n\n\nOperador %\nHola, %s % ‚Äúmundo‚Äù\nSimple y familiar para quienes conocen C\nMenos flexible y m√°s propenso a errores\n\n\nM√©todo .format()\nHola, {}.format(‚Äúmundo‚Äù)\nMuy flexible, soporta nombres y posiciones\nSintaxis m√°s verbosa\n\n\nf-strings\nf\"Hola, {variable}\"\nMuy legible, permite expresiones dentro de {}\nDisponible solo en Python 3.6+\n\n\nstring.Template\nTemplate(\"Hola, $nombre\")\nSimple y seguro, f√°cil de leer\nMenos potente para formateo complejo\n\n\n\n\n\n\n\nAbc.\n\n\n\nAbc.\n\n\n\nAbc.\n\nfrom datetime import datetime, date, time\ndt = datetime(2024, 1, 31, 20, 30, 21)\n\ndt.day\ndt.date()\ndt.time()\ndt.strftime(\"%Y-%m-%d %H:%M\")\n\n'2024-01-31 20:30'\n\n\n\ndt_hour = dt.replace(minute = 0, second = 0)\ndt_hour\n\ndatetime.datetime(2024, 1, 31, 20, 0)\n\n\n\ndelta = datetime.now() - dt\ndelta\n\ndatetime.timedelta(days=141, seconds=5334, microseconds=636194)"
  },
  {
    "objectID": "posts/Getting Started/index.html#objetos-mutables-e-inmutables",
    "href": "posts/Getting Started/index.html#objetos-mutables-e-inmutables",
    "title": "Getting Started",
    "section": "",
    "text": "Note\n\n\n\nUna tupla es una secuencia de objetos de longitud fija e inmutable (una vez asignada no puede modificarse). La forma m√°s sencilla de crear una tupla es con una secuencia de valores separados por comas entre par√©ntesis\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nLas listas son de longitud variable y su contenido puede modificarse (son mutables).\n\n\n\n\n\n\n\n\nCaution\n\n\n\nLa inserci√≥n (insert) es m√°s costosa computacionalmente que la adici√≥n (append), ya que las referencias a los elementos subsiguientes deben desplazarse internamente para dejar espacio al nuevo elemento.\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nUn diccionario (conocido en otros lengujaes como maps o associative arrays) almacena una colecci√≥n de pares clave-valor, donde clave y valor son objetos Python. Cada clave est√° asociada a un valor, de modo que un valor puede ser convenientemente recuperado, insertado, modificado o eliminado dada una clave en particular.\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThis is an example of an tip callout"
  },
  {
    "objectID": "posts/Getting Started/index.html#flujo-de-control",
    "href": "posts/Getting Started/index.html#flujo-de-control",
    "title": "Getting Started",
    "section": "",
    "text": "Es la sentencia no-op (o no hacer nada) de Python. Puede usarse en bloques en los que no se va a realizar ninguna acci√≥n. S√≥lo es necesaria porque Python utiliza espacios en blanco para delimitar los bloques."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Este curso est√° dise√±ado para guiarte desde los conceptos b√°sicos hasta las habilidades intermedias en uno de los lenguajes de programaci√≥n m√°s poderosos/populares y vers√°tiles de la actualidad. Este curso est√° orientado tanto a principiantes absolutos en la programaci√≥n como a aquellos con experiencia en otros lenguajes que deseen expandir sus conocimientos y competencias en Python."
  },
  {
    "objectID": "about.html#objetivos-del-curso",
    "href": "about.html#objetivos-del-curso",
    "title": "About",
    "section": "Objetivos del Curso",
    "text": "Objetivos del Curso\nEl objetivo principal de este curso es proporcionar una comprensi√≥n s√≥lida de los fundamentos de Python y su aplicaci√≥n pr√°ctica. Al finalizar este curso, los estudiantes ser√°n capaces de:\n\nComprender la Sintaxis y Sem√°ntica de Python: Familiarizarse con la estructura b√°sica del lenguaje, incluyendo variables, tipos de datos, operadores y estructuras de control.\nEscribir y Ejecutar Programas Simples: Crear scripts que resuelvan problemas cotidianos y automaticen tareas comunes.\nManipular Datos: Trabajar con listas, diccionarios y otros tipos de datos compuestos para gestionar y procesar informaci√≥n de manera eficiente.\nDesarrollar Habilidades de Resoluci√≥n de Problemas: Aplicar t√©cnicas de pensamiento algor√≠tmico para dise√±ar soluciones efectivas y optimizadas.\nIntroducci√≥n a la Programaci√≥n Orientada a Objetos (POO): Entender los conceptos b√°sicos de POO y c√≥mo se implementan en Python.\nUtilizar M√≥dulos y Paquetes: Explorar y emplear bibliotecas est√°ndar y de terceros para ampliar las capacidades de tus programas."
  },
  {
    "objectID": "about.html#estructura-del-curso",
    "href": "about.html#estructura-del-curso",
    "title": "About",
    "section": "Estructura del Curso",
    "text": "Estructura del Curso\nEl curso est√° dividido en varios m√≥dulos, cada uno centrado en un aspecto fundamental de Python:\n\nIntroducci√≥n y Configuraci√≥n del Entorno:\n\nInstalaci√≥n de Python y configuraciones iniciales.\nIntroducci√≥n a los entornos de desarrollo integrados (IDE) y editores de texto.\n\nSintaxis B√°sica y Estructuras de Control:\n\nVariables, tipos de datos y operaciones b√°sicas.\nCondicionales, bucles y comprensi√≥n de listas.\n\nFunciones y M√≥dulos:\n\nDefinici√≥n y uso de funciones.\nModularizaci√≥n del c√≥digo con scripts y m√≥dulos.\n\nEstructuras de Datos Avanzadas:\n\nListas, tuplas, conjuntos y diccionarios.\nM√©todos avanzados y manipulaci√≥n de datos.\n\nProgramaci√≥n Orientada a Objetos (POO):\n\nClases y objetos.\nHerencia, encapsulamiento y polimorfismo.\n\nManejo de Errores y Excepciones:\n\nIdentificaci√≥n y gesti√≥n de errores (try, except, y finally).\nUso de excepciones para control de flujo robusto.\n\nInteracci√≥n con Archivos y Datos:\n\nLectura y escritura de archivos.\nIntroducci√≥n al manejo de datos con bibliotecas como Pandas.\n\nIntroducci√≥n a Librer√≠as Populares:\n\nUso de librer√≠as esenciales como NumPy, Pandas, Matplotlib, y m√°s.\nAplicaciones pr√°cticas en ciencia de datos y visualizaci√≥n."
  },
  {
    "objectID": "about.html#requisitos-previos",
    "href": "about.html#requisitos-previos",
    "title": "About",
    "section": "Requisitos Previos",
    "text": "Requisitos Previos\nNo se requieren conocimientos previos de programaci√≥n. Sin embargo, se recomienda tener una disposici√≥n positiva hacia el aprendizaje y la resoluci√≥n de problemas."
  }
]