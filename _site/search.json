[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Python Course",
    "section": "",
    "text": "Machine Learning\n\n\n\n\n\n\nScikit-Learn\n\n\nTensorFlow\n\n\nKeras\n\n\nPyTorch\n\n\nXGBoost\n\n\ntheano\n\n\n\n\n\n\n\n\n\nAug 15, 2024\n\n\nJeison Alarc√≥n\n\n\n\n\n\n\n\n\n\n\n\n\nDatabase Operation\n\n\n\n\n\n\nDask\n\n\nPySpark\n\n\nHadoop\n\n\nKafka\n\n\nKoalas\n\n\n\n\n\n\n\n\n\nAug 1, 2024\n\n\nJeison Alarc√≥n\n\n\n\n\n\n\n\n\n\n\n\n\nDashboarding\n\n\n\n\n\n\nStreamlit\n\n\nDash\n\n\n\n\n\n\n\n\n\nJul 15, 2024\n\n\nJeison Alarc√≥n\n\n\n\n\n\n\n\n\n\n\n\n\nData Manipulation P1\n\n\n\n\n\n\nNumpy\n\n\nPandas\n\n\nPolars\n\n\nModin\n\n\nVaex\n\n\nDatatable\n\n\nCuPy\n\n\n\n\n\n\n\n\n\nJul 15, 2024\n\n\nJeison Alarc√≥n\n\n\n\n\n\n\n\n\n\n\n\n\nData Visualization\n\n\n\n\n\n\nPlotly\n\n\nSeaborn\n\n\nFolium\n\n\nMatplotlib\n\n\nBokeh\n\n\nAltair\n\n\n\n\n\n\n\n\n\nJul 1, 2024\n\n\nJeison Alarc√≥n\n\n\n\n\n\n\n\n\n\n\n\n\nStatistical Analysis P2\n\n\n\n\n\n\nSciPy\n\n\nStatsmodels\n\n\nPyStan\n\n\nPyMC3\n\n\nLifelines\n\n\nPingouin\n\n\n\n\n\n\n\n\n\nJun 30, 2024\n\n\nJeison Alarc√≥n\n\n\n\n\n\n\n\n\n\n\n\n\nStatistical Analysis P1\n\n\n\n\n\n\nSciPy\n\n\nStatsmodels\n\n\nPyStan\n\n\nPyMC3\n\n\nLifelines\n\n\nPingouin\n\n\n\n\n\n\n\n\n\nJun 29, 2024\n\n\nJeison Alarc√≥n\n\n\n\n\n\n\n\n\n\n\n\n\nData Manipulation P2\n\n\n\n\n\n\nNumpy\n\n\nPandas\n\n\nPolars\n\n\nModin\n\n\nVaex\n\n\nDatatable\n\n\nCuPy\n\n\n\n\n\n\n\n\n\nJun 16, 2024\n\n\nJeison Alarc√≥n\n\n\n\n\n\n\n\n\n\n\n\n\nGetting Started\n\n\n\n\n\n\nPython Interpreter\n\n\nBasics\n\n\nIPython\n\n\n\n\n\n\n\n\n\nJun 1, 2024\n\n\nJeison Alarc√≥n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Getting Started/index.html",
    "href": "posts/Getting Started/index.html",
    "title": "Getting Started",
    "section": "",
    "text": "Este curso es una introducci√≥n al trabajo con datos en Python, ofreciendo una visi√≥n general de las principales caracter√≠sticas de las estructuras de datos y librer√≠as incorporadas para la manipulaci√≥n de datos.\nEl enfoque principal del curso es el an√°lisis de datos basados en tablas y la preparaci√≥n de datos para conjuntos peque√±os que puedan manejarse en un ordenador personal. Para utilizar estas herramientas, a veces es necesario organizar los datos desordenados en una forma tabular. Python es ideal para esto, y cuanto m√°s familiarizado est√© con el lenguaje y sus tipos de datos, m√°s f√°cil ser√° preparar los conjuntos de datos para su an√°lisis.\n\n\n\n\n\nUsaremos la IDE de Rstudio (claramente no nos limitaremos a ella, usaremos Jupyter Notebook, VSC, Google Colab, etc). Pero m√°s adelante trabajaremos con ambos lenguajes (Python y R) simult√°neamente por lo cual nos servir√° realizar esta configuraci√≥n.\n\nPrimero necesita conocer con exactitud la ruta del ejecutable python.exe üí• que desea usar (sea con Python, conda, venv, etc). Para ello abra la consola de su int√©rprete (si usa un environment en particular no olvide ingresar a √©l üì•) y ejecute los comandos mostrados. Guarde dicha direcci√≥n en el portapapeles üìé.\n\n\npython\nimport sys\nprint(sys.executable)\n\n\n\nAhora que conoce la direcci√≥n correcta de su int√©rprete de Python üìá, dir√≠jase a la ruta mostrada en Rstudio. üëÄ En ocasiones no le saldr√° para ser seleccionado, por eso es mejor tener la ruta, p√©guela en la casilla y espere unos segundos ‚åö que lo reconozca antes de salir y darle guardar o aplicar (si realiza lo anterior de forma muy r√°pida no le quedar√°). Le pedir√° que reinicie sesi√≥n y ya deber√° quedar si vuelve a ingresar.\n\n\n\nPor √∫ltimo instalaremos una librer√≠a que nos proporcionar√° un conjunto completo de herramientas para la interoperabilidad entre Python y R üõ†Ô∏è.\n\n\ninstall.packages(\"reticulate\")\n\n\n\n\nComo usaremos dentro de los .qmd el par√°metro jupyter: python3, es necesario tener instalada dicha librer√≠a en su int√©rprete üíª, para lo cual ejecute (dentro de su kernel a usar y environment elegido):\n\nconda install jupyter\n# conda install numpy pandas scikit-learn matplotlib seaborn jupyter\n\nCompruebe que efectivamente haya sido descargado con:\n\nconda list\n\n\n\n\nS√≠ ejecuta el siguiente comando en el terminal ‚å®Ô∏è, deber√° obtener algo como lo siguiente:\nquarto check jupyter\n\nComo puede observar tenemos un problema ‚ö†Ô∏è y es que no qued√≥ el kernel que elegimos desde un inicio. Y el error mostrado se debe a que obviamente hay m√≥dulos que no hemos instalado en dicho int√©rprete que Quarto selecciona por defecto. Si desea obtener m√°s informaci√≥n de dicho error consulte: Quarto Uses Wrong Python Version.\nPara ‚Äúcorregir‚Äù lo anterior debemos apoyarnos de la documentaci√≥n oficial, la cual indica que se debe crear un archivo _environment (s√≠ as√≠ tal cual sin extensi√≥n alguna) y establecer los valores para QUARTO_PYTHON=\"C:\\ProgramData\\miniconda3\\\" ‚úîÔ∏è. As√≠ conseguimos que Quarto pueda establecer y fijar dicha configuraci√≥n local para nuestro .qmd.\n\nQUARTO_PYTHON se establece en: C:\\ProgramData\\miniconda3\\\nPY_PYTHON se establece en: C:\\ProgramData\\miniconda3\\\nRETICULATE_PYTHON se establece en: C:\\ProgramData\\miniconda3\\\n\nEl siguiente blog üìî explica demasiado bien lo que acabamos de hacer a mayor detalle, para renderizar un documento Quarto con un entorno espec√≠fico en RStudio/Posit.\nüü¢ Finalmente, cree y ejecute un nuevo .qmd, puede utilizar la plantilla ejemplo, y agregue el siguiente chunk para que verifique por su propia cuenta que, a pesar de que Quarto a nivel global est√° usando otro int√©rprete, al definir el _environment queda con el que usted especifica.\n\nimport sys\nprint(sys.executable)\nprint(sys.prefix)\nprint (sys.version)\n\nC:\\ProgramData\\miniconda3\\pythonw.exe\nC:\\ProgramData\\miniconda3\n3.12.2 | packaged by Anaconda, Inc. | (main, Feb 27 2024, 17:28:07) [MSC v.1916 64 bit (AMD64)]\n\n\n\n\n\n\n\nüîñ Cualquier comando est√°ndar de shell puede ser utilizado directamente en IPython anteponiendo el car√°cter !. Por ejemplo,\n\n# : ....................... Shell Commands en IPython ........................ :\n!ls\n\nBooks\nLICENSE\nProfile.jpg\nPython Course.Rproj\n_environment\n_freeze\n_publish.yml\n_quarto.yml\n_site\nabout.qmd\nfiles\nindex.qmd\nposts\nstyles.css\n\n\n\ndirectory = !pwd\nprint(directory)\n\n['/d/Documentos/JOBS/DNPE/CursoPython']\n\n\n\nmessage = \"Imprimiendo un texto desde shell\"\n!echo {message}\n\nImprimiendo un texto desde shell\n\n\n\n\n\n\n\nüìê Identaci√≥n (no llaves {} ): Python utiliza espacios en blanco (tabuladores o espacios) para estructurar el c√≥digo en lugar de utilizar llaves como en muchos otros lenguajes como R y C++.\nüî£ No se necesita terminar con ;: El punto y coma puede usarse para separar m√∫ltiples sentencias en una sola l√≠nea. a = 1; b = 2; c = 3\nüè∑Ô∏è Las cadenas admiten tanto comillas simples ' como comillas dobles \": Se prefieren las comillas dobles, y para cadenas de varias l√≠neas con saltos de l√≠nea, puede utilizar comillas triples \"\"\".\nüÜé Vinculaci√≥n (binding): En otros lenguajes, la asignaci√≥n har√° que se copien los datos. En Python, hace que se refieran ahora al mismo objeto,\n\n\na = [1, 2, 3]\nb = a\na.append(4)\nb\n\n[1, 2, 3, 4]\n\n\n\n# Cuando se pasan objetos como argumentos a una funci√≥n, se crean nuevas variables\n# locales que hacen referencia a los objetos originales sin necesidad de copiarlos\ndef myAppend(lista, elemento):\n    lista.append(elemento)\ndata = [1, 2, 3]\nmyAppend(data, 4)\ndata\n\n[1, 2, 3, 4]\n\n\n\nüí™ Un lenguaje tipado: Cada objeto tiene un tipo (o clase) espec√≠fico, con la ventaja de que las variables no tienen un tipo inherente asociado a ellas.\n\n\na = 5      ; print(type(a))\na = \"cinco\"; print(type(a))\n\n&lt;class 'int'&gt;\n&lt;class 'str'&gt;\n\n\n\n\"5\" + 5\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[8], line 1\n----&gt; 1 \"5\" + 5\n\nTypeError: can only concatenate str (not \"int\") to str\n\n\n\n\na = 4.5\nb = 2\nprint(a / b)\nprint(isinstance(a, (int, float)))\n\n2.25\nTrue\n\n\n\n\n\n# Acceso a la Documentaci√≥n:\nhelp(len)\n\nHelp on built-in function len in module builtins:\n\nlen(obj, /)\n    Return the number of items in a container.\n\n\n\n\nletra = \"a\"\n# letra.&lt;Press Tab&gt;\ngetattr(letra, \"split\")\n\n&lt;function str.split(sep=None, maxsplit=-1)&gt;\n\n\n\n# Gui√≥n bajo '_' para salidas anteriores\n1+1\n2+2\nprint(_)\n\n&lt;built-in method split of str object at 0x00007FF807D71CE0&gt;\n\n\n\n# Acceder a las entradas anteriores (historial)\n%history -n 1-3\n\n   1:\nimport sys\nprint(sys.executable)\nprint(sys.prefix)\nprint (sys.version)\n   2:\n# : ....................... Shell Commands en IPython ........................ :\n!ls\n   3:\ndirectory = !pwd\nprint(directory)\n\n\n\n# : .......................... Timing Code Snippets .......................... :\n%timeit sum(range(100))   # IPython Magic Commands\n\n356 ns ¬± 1.58 ns per loop (mean ¬± std. dev. of 7 runs, 1,000,000 loops each)\n\n\n\n%%timeit                  # Cuando es m√°s complejo, baja el n√∫mero de repeticiones\ntotal = 0\nfor i in range(1000):\n    for j in range(1000):\n        total += i * (-1) ** j\n\n84.9 ms ¬± 2.39 ms per loop (mean ¬± std. dev. of 7 runs, 10 loops each)\n\n\n\n\n\n```{python}\n# Modulo.py\nPI = 3.14159\ndef cuadrado(x):\n return x ** 2\n```\n\nimport Modulo\nprint(Modulo.cuadrado(5))\npi = Modulo.PI\n# ......................................\nfrom Modulo import PI, cuadrado\ncuadrado(PI)\n# ......................................\nimport Modulo as m\nfrom Modulo import PI as kte, cuadrado as elevado\n\nr1 = m.cuadrado(kte); print(r1)\nr2 = elevado(6)     ; print(r2)\n\n\n\n\n\n\na = [1, 2, 3]\nb = a\nc = list(a) # Crea una copia\n\nprint(a is b)\nprint(a is not c)\n\nTrue\nTrue\n\n\n\na.append(4)\na == c\n\nFalse\n\n\n\n# Intercambiar los nombres de las variables:\na, b = 1, 2\n# tmp = a\n# a = b\n# b = tmp\nb, a = a, b\nprint(f'a = {a}, b = {b}')\n\na = 2, b = 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTipo\nDescripci√≥n\n\n\n\n\nNone\nEl valor ‚Äúnulo‚Äù de Python (solo existe una instancia del objeto None)\n\n\nstr\nTipo de cadena; contiene cadenas Unicode\n\n\nbytes\nDatos binarios en bruto\n\n\nfloat\nN√∫mero de punto flotante de doble precisi√≥n (nota que no hay un tipo double separado)\n\n\nbool\nUn valor booleano True o False\n\n\nint\nEntero de precisi√≥n arbitraria\n\n\n\n\n\n\nprint(int(False)); print(int(True))\nprint(True + False)\nprint(not not not not True)\nprint(bool(2024.75)) # Todo valor !=0 se convierte en True\nprint(bool(\".\"))     # Todo valor !=\"\" se convierte en True\n\n0\n1\n1\nTrue\nTrue\nTrue\n\n\n\n\n\n\na = \"Hola mundo \\\\&gt;\"\nprint(a)\n\nHola mundo \\&gt;\n\n\n\nb = \"\"\"\nEsta cadena es m√°s larga que\nabarca varias l√≠neas\n\"\"\"\nprint(b)\nb.count(\"\\n\")\n\n\nEsta cadena es m√°s larga que\nabarca varias l√≠neas\n\n\n\n3\n\n\n\nc = r\"D:\\Documentos\\Carpeta\"\nprint(c)\n\nD:\\Documentos\\Carpeta\n\n\n\n# Los strings en Python son inmutables: no se puede modificar una cadena\nprint(a[5])\na[5] = \"M\"\n\nm\n\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[23], line 3\n      1 # Los strings en Python son inmutables: no se puede modificar una cadena\n      2 print(a[5])\n----&gt; 3 a[5] = \"M\"\n\nTypeError: 'str' object does not support item assignment\n\n\n\n\na.replace(\"m\", \"M\")\n\n'Hola Mundo \\\\&gt;'\n\n\n\na       # Tras esta operaci√≥n, la variable no se modifica\n\n'Hola mundo \\\\&gt;'\n\n\n\nlist(a) # Las cadenas son una secuencia de caracteres Unicode\n\n['H', 'o', 'l', 'a', ' ', 'm', 'u', 'n', 'd', 'o', ' ', '\\\\', '&gt;']\n\n\n\n\nExisten varios m√©todos para formatear cadenas de texto, entre los cuales encontramos:\n\nOperador de Formato %\n\n\nNombre = \"Juan\"\nEdad = 33\nPi   = 3.141592\nprint(\"Hola, mi nombre es %s y tengo %d a√±os. Y s√© que pi vale: %.2f.\" % (Nombre, Edad, Pi))\n\nHola, mi nombre es Juan y tengo 33 a√±os. Y s√© que pi vale: 3.14.\n\n\n\nM√©todo .format()\n\n\nprint(\"Hola, mi nombre es {} y tengo {} a√±os. Y s√© que pi vale: {:.2f}.\".format(Nombre, Edad, Pi))\nprint(\"Nombre: {name}, Edad: {age}\".format(name = \"Luis\", age = 33))\nprint(\"El {0} se encuentra en el {1} y el {1} se encuentra en el {0}.\".format(\"sol\", \"cielo\"))\n\nHola, mi nombre es Juan y tengo 33 a√±os. Y s√© que pi vale: 3.14.\nNombre: Luis, Edad: 33\nEl sol se encuentra en el cielo y el cielo se encuentra en el sol.\n\n\n\n# 0:.3f El 1re valor ser√° un flotantes con 3 decimales\n# 1:s   El 2do valor ser√° un string\n# 2:d   El 3re valor ser√° un entero\ntemplate = \"{0:.3f} {1:s} equivalen a US${2:d}\"\ntemplate.format(3.960, \"pesos Colombianos\", 1) # Intente modificar el tipo de alguno de estos\n\n'3.960 pesos Colombianos equivalen a US$1'\n\n\n\nf-strings\n\n\nTasa   = 3.960\nMoneda = \"Colombianos\"\nf\"{Tasa:.4f} pesos {Moneda} equivalen a US${Tasa/Tasa}\"\n\n'3.9600 pesos Colombianos equivalen a US$1.0'\n\n\n\n# C√°lculos Dentro:\na = 5; b = 10\nprint(f\"La suma de {a} y {b} es {a + b}. Adem√°s, a*b = {a*b}\")\n\nLa suma de 5 y 10 es 15. Adem√°s, a*b = 50\n\n\n\n# Alinear Texto:\nprint(f\"{'izquierda':&lt;10} {'centrado':^10} {'derecha':&gt;10}\")\n\nizquierda   centrado     derecha\n\n\n\n# Mostrar N√∫meros en Diferentes Bases:\nNumero = 255\nprint(f\"Decimal: {Numero}, Binario: {Numero:b}, Hexadecimal: {Numero:x}, Octal: {Numero:o}\")\n\nDecimal: 255, Binario: 11111111, Hexadecimal: ff, Octal: 377\n\n\n\n# Incluir Expresiones y M√©todos:\nTxt = \"Amo Python\"\nprint(f\"El texto en may√∫sculas es: {Txt.upper()}.\")\n\nEl texto en may√∫sculas es: AMO PYTHON.\n\n\n\n# Combinaci√≥n con Diccionarios:\nPais = {\"nombre\": \"Colombia\", \"NoPoblacion\": 50}\nprint(f\"Pa√≠s: {Pais['nombre']} | Habitantes: {Pais['NoPoblacion']}\")\n\nPa√≠s: Colombia | Habitantes: 50\n\n\n\n# Incluir Llaves Literales:\nprint(f\"Este es un valor literal en llaves: {{Numero}}, y este es el valor de la variable: {Numero}.\")\n\nEste es un valor literal en llaves: {Numero}, y este es el valor de la variable: 255.\n\n\n\nM√©todo string.Template\n\n\nfrom string import Template\ntemplate = Template(\"Hola, mi nombre es $name y tengo $age a√±os.\")\nmensaje  = template.substitute(name = \"Juan\", age = 33)\nprint(mensaje)\n\nHola, mi nombre es Juan y tengo 33 a√±os.\n\n\n\n\n\n\n\n\n\n\n\nM√©todo\nSintaxis\nVentajas\nDesventajas\n\n\n\n\nOperador %\nHola, %s % ‚Äúmundo‚Äù\nSimple y familiar para quienes conocen C\nMenos flexible y m√°s propenso a errores\n\n\nM√©todo .format()\nHola, {}.format(‚Äúmundo‚Äù)\nMuy flexible, soporta nombres y posiciones\nSintaxis m√°s verbosa\n\n\nf-strings\nf\"Hola, {variable}\"\nMuy legible, permite expresiones dentro de {}\nDisponible solo en Python 3.6+\n\n\nstring.Template\nTemplate(\"Hola, $nombre\")\nSimple y seguro, f√°cil de leer\nMenos potente para formateo complejo\n\n\n\n\n\n\n\nAbc.\n\n\n\n\nfrom datetime import datetime, date, time\n\ndt = datetime(2024, 1, 31, 20, 30, 21)\ndt.day\n\n31\n\n\n\ndt.date()\n\ndatetime.date(2024, 1, 31)\n\n\n\ndt.time()\n\ndatetime.time(20, 30, 21)\n\n\n\ndt.strftime(\"%Y-%m-%d %H:%M\")\n\n'2024-01-31 20:30'\n\n\n\ndt_hour = dt.replace(minute = 0, second = 0)\ndt_hour\n\ndatetime.datetime(2024, 1, 31, 20, 0)\n\n\n\ndelta = datetime.now() - dt\ndelta\n\ndatetime.timedelta(days=181, seconds=80865, microseconds=14995)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nUna tupla es una secuencia ordenada de objetos de longitud fija e inmutable (una vez asignada no puede modificarse). La forma m√°s sencilla de crear una tupla es con una secuencia de valores separados por comas entre par√©ntesis.\n\n\n\ntup1 = (1, 2, 3)      # Pueden contener elementos repetidos\ntup2 = 4, 5, 6        # Los par√©ntesis pueden omitirse\nprint(tup1); print(tup2)\n\n(1, 2, 3)\n(4, 5, 6)\n\n\n\n# Se puede convertir cualquier secuencia o iterador\nprint( tuple([7, 8, 9]) )\nprint( tuple(\"Texto\") )\n\n(7, 8, 9)\n('T', 'e', 'x', 't', 'o')\n\n\n\ntupCompleja = (2, 4, 8), (3, 5)\nprint(tupCompleja)\ntupCompleja[0]\n\n((2, 4, 8), (3, 5))\n\n\n(2, 4, 8)\n\n\n\ntupMixta = tuple(['txt', [1, 2], True])\ntupMixta[1].append(3) # Si un objeto dentro de una tupla es mutable, se puede modificar\nprint(tupMixta)\ntupMixta[2] = False\n\n('txt', [1, 2, 3], True)\n\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[47], line 4\n      2 tupMixta[1].append(3) # Si un objeto dentro de una tupla es mutable, se puede modificar\n      3 print(tupMixta)\n----&gt; 4 tupMixta[2] = False\n\nTypeError: 'tuple' object does not support item assignment\n\n\n\n\nprint( tup1*2 + (20, 24) + ('year',) )\n\n(1, 2, 3, 1, 2, 3, 20, 24, 'year')\n\n\n\n# Desempaquetado (unpacking)\nuno, dos, tres = tup1\nprint(uno)\n(a, b, c), (d, e) = tupCompleja\nprint(a)\n\n1\n2\n\n\n\nseq = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nfor a, b, c in seq:\n    print(f'a = {a}, b = {b}, c = {c}')\n\na = 1, b = 2, c = 3\na = 4, b = 5, c = 6\na = 7, b = 8, c = 9\n\n\n\nfirst, second, *rest = (1, 2, 3, 4, 5)\nprint(f\"{first} || {second} || {rest}\")\n# El gui√≥n bajo (_) para descartar las variables no deseadas\nfirst, second, *_ = (1, 2, 3, 4, 5)\nprint(*_)\n\n1 || 2 || [3, 4, 5]\n3 4 5\n\n\n\n# Si desea definir una tupla con un solo elemento debe incluir una coma al final:\nmy_t = (3,)\nprint(my_t)\n# M√©todos\n(1, 0, 1, 1, 0).count(0)\n\n(3,)\n\n\n2\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nUna lista es una colecci√≥n de elementos en un orden determinado. Puedes poner lo que quieras en una lista, y los elementos que la componen no tienen porqu√© estar relacionados de ninguna manera en particular. En Python, los corchetes [ ] indican una lista, y los elementos individuales de la lista est√°n separados por comas.\n\n\n\n\n\n\n\n\nWarning\n\n\n\n\nLas posiciones de √≠ndice empiezan en 0, no en 1.\nLas listas son de longitud variable y su contenido puede modificarse (son mutables).\n\n\n\n\nmotorcycles = [0, \"honda\", \"yamaha\", \"suzuki\", None]\nprint(motorcycles)\nlist(tup1)\n\n[0, 'honda', 'yamaha', 'suzuki', None]\n\n\n[1, 2, 3]\n\n\n\n# A√±adir y eliminar elementos\nmotorcycles.append(\"ducati\")\nmotorcycles.insert(1, \"1\")\ndel motorcycles[-2]         # Removing an Item Using the del Statement\nmotorcycles.pop(0)          # Popping Items from Any Position\nprint(motorcycles)\n\n['1', 'honda', 'yamaha', 'suzuki', 'ducati']\n\n\n\n\n\n\n\n\nCaution\n\n\n\nLa inserci√≥n (insert) es m√°s costosa computacionalmente que la adici√≥n (append), ya que las referencias a los elementos subsiguientes deben desplazarse internamente para dejar espacio al nuevo elemento.\n\n\n\nmotorcycles.append(\"2\"); print(motorcycles)\nmotorcycles.remove(\"2\"); print(motorcycles) # Removing an Item by Value\n\n['1', 'honda', 'yamaha', 'suzuki', 'ducati', '2']\n['1', 'honda', 'yamaha', 'suzuki', 'ducati']\n\n\n\n# Sorting a List\nmotorcycles.sort(); print(motorcycles)\nmotorcycles.sort(reverse = True); print(motorcycles)\nprint(sorted(motorcycles)); print(motorcycles)\n\n['1', 'ducati', 'honda', 'suzuki', 'yamaha']\n['yamaha', 'suzuki', 'honda', 'ducati', '1']\n['1', 'ducati', 'honda', 'suzuki', 'yamaha']\n['yamaha', 'suzuki', 'honda', 'ducati', '1']\n\n\n\nprint(motorcycles.reverse())\nlen(motorcycles)\n\nNone\n\n\n5\n\n\n\n# Python returns another index error\nlistA = []\nprint(listA[-1])\n\n\n---------------------------------------------------------------------------\nIndexError                                Traceback (most recent call last)\nCell In[58], line 3\n      1 # Python returns another index error\n      2 listA = []\n----&gt; 3 print(listA[-1])\n\nIndexError: list index out of range\n\n\n\n\nsquares = []\nfor value in range(1, 11):\n    squares.append(value ** 2)\nprint(squares)\n# List Comprehensions\nsquares = [value**2 for value in range(1, 11)]\nprint(squares)\n\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\n\n\n# Slicing a List\nprint(motorcycles[0:3])\nprint(motorcycles[2:])\nprint(motorcycles[-2:])\n\n['1', 'ducati', 'honda']\n['honda', 'suzuki', 'yamaha']\n['suzuki', 'yamaha']\n\n\n\n# Copying a List\nonces = [\"pizza\", \"arepa\", \"empanada\"]\ntusOnces = onces[:]\nonces.append(\"bu√±uelo\")\ntusOnces.append(\"pan\")\nprint(onces); print(tusOnces)\n\n['pizza', 'arepa', 'empanada', 'bu√±uelo']\n['pizza', 'arepa', 'empanada', 'pan']\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nUn diccionario (conocido en otros lenguajes como maps o associative arrays) almacena una colecci√≥n de pares clave-valor, donde clave y valor son objetos Python. Cada clave est√° asociada a un valor, de modo que un valor puede ser convenientemente recuperado, insertado, modificado o eliminado dada una clave en particular. Tenga presente que las claves √∫nicas (no permiten duplicados en las claves).\n\n\n\nfisico = {'color': 'blanco', 'altura': 1.79}\nfisico[\"ojos\"] = \"azules\"\nfisico[\"peso\"] = 87\nprint(fisico)\n\n{'color': 'blanco', 'altura': 1.79, 'ojos': 'azules', 'peso': 87}\n\n\n\n# Diccionario con tuplas como claves\npuntos = {\n    (0, 0): \"Origen\",\n    (1, 2): \"Punto A\",\n    (3, 4): \"Punto B\"\n}\nprint(puntos[(1, 2)])\n\nPunto A\n\n\n\n\n\nAbc.\n\n# Mutable\nmi_lista = [1, 2, 3]\nprint(id(mi_lista))  # Ejemplo de ID: 2180570982400\nmi_lista.append(4)\nprint(id(mi_lista))  # Mismo ID: 2180570982400\n\n# Inmutable\nmi_tupla = (1, 2, 3)\nprint(id(mi_tupla))  # Ejemplo de ID: 2180571003840\nmi_tupla = (1, 2, 3, 4)\nprint(id(mi_tupla))  # Nuevo ID: 2180571086992\n\n1610394567040\n1610394567040\n1610394610496\n1610394566256\n\n\n\n\n\n\n\n\n\n\nw = 5; x = 4; y = 3; z = 2\nif x &lt; 0:\n    print(\"x es negativo.\")\nelif x == 0:\n    print(\"x es cero\")\nelif w &gt; x &gt; y &gt; z:\n    print(\"Los valores est√°n en orden.\")\nelse:\n    print(\"Otro caso diferente.\")\n\nLos valores est√°n en orden.\n\n\n\n\n\n\nnumeros = [1, 2, None, 4, None, 5] # sum(numeros)\ntotal = 0\nfor value in numeros:\n    if value is None:\n        continue\n    if value == 4:\n        break       # La sentencia 'break' se usa para salir del bucle\n    total += value\ntotal\n\n3\n\n\n\n# 'break' s√≥lo termina el for m√°s interno, cualquier for externo continuar√°\nfor i in range(4):\n    for j in range(4):\n        if j &gt; i:\n            break\n        print((i, j))\n\n(0, 0)\n(1, 0)\n(1, 1)\n(2, 0)\n(2, 1)\n(2, 2)\n(3, 0)\n(3, 1)\n(3, 2)\n(3, 3)\n\n\n\n\n\nEsta estructura permite ejecutar repetidamente un bloque de c√≥digo mientras una condici√≥n especificada se eval√∫a como verdadera. Este ciclo es √∫til cuando no se sabe de antemano cu√°ntas veces se necesitar√° repetir el bloque de c√≥digo, a diferencia del ciclo for, que itera sobre una secuencia de elementos de longitud conocida.\n\nwhile True:\n    entrada = input(\"Escribe 'salir' para terminar: \")\n    if entrada.lower() == \"salir\":\n        break\n\n\n\n\nEs la sentencia no-op (o no hacer nada) de Python. Puede usarse en bloques en los que no se va a realizar ninguna acci√≥n. S√≥lo es necesaria porque Python utiliza espacios en blanco para delimitar los bloques.\nCuando la ejecuci√≥n del programa alcanza una sentencia continue, la ejecuci√≥n del programa salta inmediatamente al inicio del bucle y reeval√∫a la condici√≥n del bucle.\n\nwhile True:\n    print('¬øQui√©n eres t√∫?')\n    name = input()\n    if name != 'Juan':\n        continue\n    print('Hola Juan, cu√°l es tu contrase√±a (es un equipo)')\n    password = input()\n    if password == 'nacional':\n        break\nprint('Acceso Concedido.')\n\n\n\nPass (for, if): No realiza ninguna acci√≥n y se utiliza como marcador de lugar (placeholder para futura implementaci√≥n).\nContinue (for, while): Salta a la siguiente iteraci√≥n del bucle, omitiendo el resto del c√≥digo en la iteraci√≥n actual.\nBreak (if): Termina el bucle inmediatamente, saliendo de la estructura de control de flujo.\n\n\n\n\n\n\nprint(f\"{   range(10)   }\")\nprint(f\"{   range(1, 10)   }\")\nprint(f\"{   list(range(0, 20, 2))   }\")\nprint(f\"{   list(range(5, -1, -1))   }\")\n\nrange(0, 10)\nrange(1, 10)\n[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\n[5, 4, 3, 2, 1, 0]\n\n\n\n\n\n\n\nLas funciones en Python son bloques de c√≥digo reutilizables que permiten estructurar y organizar mejor los programas. Se definen usando la palabra clave def y pueden aceptar argumentos y devolver valores.\n\n# Py a√±ade return None al final de cualquier definici√≥n de funci√≥n sin sentencia return:\ndef Saludo(nombre):\n    print(\"Hola \" + nombre)\n\nspam = Saludo(\"Carlos\")\nNone == spam\n\nHola Carlos\n\n\nTrue\n\n\nEn un programa de Python, hay exactamente un √∫nico √°mbito global. Este √°mbito global es el contexto en el que las variables globales se definen y existen a lo largo de la ejecuci√≥n del programa.\n\nEn cuanto a los √°mbitos locales, el n√∫mero de estos puede variar. Cada vez que se define y se llama a una funci√≥n, se crea un nuevo √°mbito local. Por lo tanto, el n√∫mero de √°mbitos locales depende del n√∫mero de funciones (incluidas las funciones anidadas) y m√©todos que se llaman durante la ejecuci√≥n del programa.\n\n\n# Las variables locales no pueden utilizarse en el √°mbito global:\ndef getPI():\n    PI = 3.1415\ngetPI()\nprint(PI)\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[70], line 5\n      3     PI = 3.1415\n      4 getPI()\n----&gt; 5 print(PI)\n\nNameError: name 'PI' is not defined\n\n\n\n\n# Los √°mbitos locales no pueden utilizar variables de otros √°mbitos locales:\ndef a():\n    phone = 444\n    b()\n    print(phone)\ndef b():\n    phone = 555\na()\n\n444\n\n\n\n# Las variables globales pueden leerse desde un √°mbito local:\ndef a():\n    print(cte)\ncte = 1234\na()\nprint(cte)\n\n1234\n1234\n\n\n\n# Si necesitas modificar una variable global desde dentro de una funci√≥n:\ndef a():\n    global cte\n    cte = 'Ahora soy una Variable Global'\n\ncte = 'Global'\na()\nprint(cte)\n\nAhora soy una Variable Global\n\n\n\n# Funciones con Valores por Defecto:\ndef saludar(nombre = \"Paola\"):\n    print(f\"¬°Hola, {nombre}!\")\n\nsaludar()\nsaludar(\"Pedro\")\n\n¬°Hola, Paola!\n¬°Hola, Pedro!\n\n\n\n# Funciones con Varios Valores de Retorno:\ndef operaciones(a, b):\n    suma  = a + b\n    resta = a - b\n    return suma, resta\n\nsuma, resta = operaciones(10, 2)\nprint(f\"Suma: {suma}\\t| Resta: {resta}\")\n\nSuma: 12    | Resta: 8\n\n\n\n# Evitar que un programa se bloquee cuando recibe un error:\ndef a(b):\n    try:\n        return 1/b\n    except ZeroDivisionError:\n        print('Error: b debe ser diferente de 0.')\nprint(a(2))\nprint(a(0))\n\n0.5\nError: b debe ser diferente de 0.\nNone\n\n\n\n\nEl par√°metro args se usa en las funciones para pasar un n√∫mero variable de argumentos posicionales. Dentro de la funci√≥n, args es una tupla que contiene todos los argumentos posicionales proporcionados.\nCaracter√≠sticas:\n\nPermite pasar una cantidad variable de argumentos a una funci√≥n.\nLos argumentos se agrupan en una tupla dentro de la funci√≥n.\n\n\ndef imprimir_argumentos(*args):\n    for i, arg in enumerate(args):\n        print(f\"Argumento {i}: {arg}\")\n\nimprimir_argumentos('a', 'b', 'c')\n\nArgumento 0: a\nArgumento 1: b\nArgumento 2: c\n\n\n\n\n\nEl par√°metro kwargs se usa para pasar un n√∫mero variable de argumentos con nombre (palabra clave). Dentro de la funci√≥n, kwargs es un diccionario que contiene todos los argumentos con nombre proporcionados.\nCaracter√≠sticas:\n\nPermite pasar una cantidad variable de argumentos con nombre a una funci√≥n.\nLos argumentos se agrupan en un diccionario dentro de la funci√≥n.\n\n\ndef mostrar_info(**kwargs):\n    for key, value in kwargs.items():\n        print(f\"{key}: {value}\")\n\nmostrar_info(nombre = \"Alice\", edad = 30, ciudad = \"Nueva York\")\n\nnombre: Alice\nedad: 30\nciudad: Nueva York\n\n\n\n# Ejemplo combinado:\ndef combinar(*args, **kwargs):\n    print(\"Argumentos posicionales:\", args)\n    print(\"Argumentos con nombre:\", kwargs)\n\ncombinar(1, 2, 3, a = \"Uno\", b = \"Dos\", c = \"Tres\")\n\nArgumentos posicionales: (1, 2, 3)\nArgumentos con nombre: {'a': 'Uno', 'b': 'Dos', 'c': 'Tres'}\n\n\n\n\n\nSon funciones an√≥nimas y de una sola l√≠nea que pueden ser definidas usando la palabra clave lambda argumentos: expresi√≥n. Son especialmente √∫tiles cuando se necesita una funci√≥n peque√±a y desechable que se puede definir en una expresi√≥n.\n\ncuadrado = lambda x: x ** 2\nprint(cuadrado(5))\n\nmultiplicar = lambda x, y: x * y\nprint(multiplicar(4, 6))\n\n25\n24\n\n\nUso con Funciones Integradas\nLas funciones lambda son especialmente √∫tiles cuando se combinan con ciertas funciones integradas de Python.\n\nmap(): Aplica una funci√≥n a cada √≠tem de un iterable (como una lista) y devuelve un nuevo iterable con los resultados.\n\n\nnumeros = list(range(11))\ncuadrados = map(lambda x: x**2, numeros)\nprint(list(cuadrados))\n\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\n\n\nfilter(): Filtra un iterable, permitiendo s√≥lo los √≠tems que coincidan con una condici√≥n.\n\n\npares = filter(lambda x: x%2 == 0, numeros)\nprint(list(pares))\n\n[0, 2, 4, 6, 8, 10]\n\n\n\nprint(list(filter(lambda x: (x % 2 == 0) and (x &gt; 7), numeros)))\n\n[8, 10]\n\n\n\nreduce(): Aplica una funci√≥n a los √≠tems de un iterable, acumulando el resultado.\n\n\nfrom functools import reduce\n\nsuma_total = reduce(lambda x,y: x + y, numeros)\nprint(suma_total)\n\n55\n\n\n\nsorted(): Las funciones lambda pueden ser usadas para personalizar el ordenamiento de listas.\n\n\ncoordenadas = [(1, 2), (3, 4), (5, 1), (7, 3)]\nordenado = sorted(coordenadas, key = lambda x: x[1])\nprint(ordenado)\n\n[(5, 1), (1, 2), (7, 3), (3, 4)]\n\n\n\nNotas = [\n    {'Nombre': 'Ana', 'Definitiva': 8},\n    {'Nombre': 'Juan', 'Definitiva': 6},\n    {'Nombre': 'Maria', 'Definitiva': 9}\n]\nprint(sorted(Notas, key = lambda x: x['Definitiva']))\n\n[{'Nombre': 'Juan', 'Definitiva': 6}, {'Nombre': 'Ana', 'Definitiva': 8}, {'Nombre': 'Maria', 'Definitiva': 9}]\n\n\nLimitaciones\n\nUna sola expresi√≥n: Las lambdas est√°n limitadas a una √∫nica expresi√≥n. No pueden contener declaraciones ni m√∫ltiples l√≠neas de c√≥digo.\nLegibilidad: Aunque √∫tiles para funciones cortas y simples, las lambdas pueden hacer el c√≥digo m√°s dif√≠cil de leer si se usan en exceso o de manera compleja.\n\n\n\n\nLos decoradores en Python son una herramienta poderosa que permite modificar el comportamiento de una funci√≥n o m√©todo. Los decoradores permiten envolver una funci√≥n en otra funci√≥n, lo que facilita a√±adir funcionalidades adicionales de una manera muy elegante y reutilizable.\n\ndef decorador(func):\n    def envoltura():\n        print(\"Antes de la funci√≥n\")\n        func()\n        print(\"Despu√©s de la funci√≥n\")\n    return envoltura\n@decorador\ndef f():\n    print(\"Funci√≥n original\")\nf()\n\nAntes de la funci√≥n\nFunci√≥n original\nDespu√©s de la funci√≥n\n\n\n\n# Registro de Llamadas a Funciones:\ndef registrar(func):\n    def envoltura(*args, **kwargs):\n        print(f\"Llamando a {func.__name__} con {args} y {kwargs}\")\n        resultado = func(*args, **kwargs)\n        print(f\"{func.__name__} retorn√≥ {resultado}\")\n        return resultado\n    return envoltura\n\n@registrar\ndef suma(a, b):\n    return a + b\n\nsuma(3, 5)\n\nLlamando a suma con (3, 5) y {}\nsuma retorn√≥ 8\n\n\n8\n\n\n\n# Contador de Llamadas a una Funci√≥n:\ndef contador_de_llamadas(func):\n    def wrapper(*args, **kwargs):\n        wrapper.llamadas += 1\n        print(f\"Llamada n√∫mero: {wrapper.llamadas}\")\n        return func(*args, **kwargs)\n    wrapper.llamadas = 0\n    return wrapper\n\n@contador_de_llamadas\ndef mi_funcion():\n    print(\"Ejecutando la funci√≥n\")\n\nmi_funcion()\nmi_funcion()\n\nLlamada n√∫mero: 1\nEjecutando la funci√≥n\nLlamada n√∫mero: 2\nEjecutando la funci√≥n\n\n\n\n# Medici√≥n de Tiempo de Ejecuci√≥n:\nimport time\ndef medir_tiempo(func):\n    def envoltura(*args, **kwargs):\n        inicio = time.time()\n        resultado = func(*args, **kwargs)\n        fin = time.time()\n        print(f\"{func.__name__} tom√≥ {fin - inicio} segundos\")\n        return resultado\n    return envoltura\n\n@medir_tiempo\ndef contar_hasta(numero):\n    for i in range(numero):\n        pass\n    return numero\n\ncontar_hasta(1000000)\n\ncontar_hasta tom√≥ 0.018638134002685547 segundos\n\n\n1000000\n\n\n\n# Memorizaci√≥n de Resultados:\ndef memoize(func):\n    cache = {}\n    def envoltura(*args):\n        if args in cache:\n            return cache[args]\n        resultado = func(*args)\n        cache[args] = resultado\n        return resultado\n    return envoltura\n\n@memoize\ndef fibonacci(n):\n    if n &lt;= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)\n\nprint(fibonacci(30))\n\n832040\n\n\n\n# Decoradores con Par√°metros:\ndef repetir(veces):\n    def decorador(func):\n        def envoltura(*args, **kwargs):\n            for _ in range(veces):\n                func(*args, **kwargs)\n        return envoltura\n    return decorador\n\n@repetir(3)\ndef saludar():\n    print(\"¬°Hola!\")\n\nsaludar()\n\n¬°Hola!\n¬°Hola!\n¬°Hola!\n\n\n\n\n\nEn Python, la documentaci√≥n de funciones se suele escribir utilizando docstrings, que son cadenas de texto que describen el prop√≥sito y el uso de una funci√≥n, m√©todo, clase o m√≥dulo.\ndef nombre_funcion(param1, param2):\n    \"\"\"\n    Descripci√≥n breve de lo que hace la funci√≥n.\n\n    Args:\n        param1 (tipo): Descripci√≥n de param1.\n        param2 (tipo): Descripci√≥n de param2.\n\n    Returns:\n        tipo: Descripci√≥n de lo que devuelve la funci√≥n.\n\n    Raises:\n        ExceptionType: Descripci√≥n de las excepciones que puede lanzar la funci√≥n.\n    \"\"\"\n    pass\n\ndef division(a, b):\n    \"\"\"\n    Divide a entre b.\n\n    Args:\n        a (float): El numerador.\n        b (float): El denominador.\n\n    Returns:\n        float: El resultado de la divisi√≥n.\n\n    Examples:\n        &gt;&gt;&gt; division(1, 2)\n        0.5\n        &gt;&gt;&gt; division(1, 10)\n        0.1\n\n    Raises:\n        ValueError: Si b es cero.\n        \n    \"\"\"\n    if b == 0:\n        raise ValueError(\"El denominador no puede ser cero.\")\n    return a / b\n\nhelp(division)\ndivision(1, 0)\n\nHelp on function division in module __main__:\n\ndivision(a, b)\n    Divide a entre b.\n\n    Args:\n        a (float): El numerador.\n        b (float): El denominador.\n\n    Returns:\n        float: El resultado de la divisi√≥n.\n\n    Examples:\n        &gt;&gt;&gt; division(1, 2)\n        0.5\n        &gt;&gt;&gt; division(1, 10)\n        0.1\n\n    Raises:\n        ValueError: Si b es cero.\n\n\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[93], line 27\n     24     return a / b\n     26 help(division)\n---&gt; 27 division(1, 0)\n\nCell In[93], line 23, in division(a, b)\n      2 \"\"\"\n      3 Divide a entre b.\n      4 \n   (...)\n     20     \n     21 \"\"\"\n     22 if b == 0:\n---&gt; 23     raise ValueError(\"El denominador no puede ser cero.\")\n     24 return a / b\n\nValueError: El denominador no puede ser cero.\n\n\n\nConvenciones de Formato\nHay varias convenciones para escribir docstrings. La m√°s com√∫n en Python es la convenci√≥n de estilo Google, pero tambi√©n existen otras como el estilo NumPy/SciPy y el estilo reStructuredText (reST), que es utilizado por Sphinx para generar documentaci√≥n.\n\nEstilo Google\n\n\ndef f(param1, param2):\n    \"\"\"\n    Una breve descripci√≥n de la funci√≥n.\n\n    Args:\n        param1 (int): El primer par√°metro.\n        param2 (str): El segundo par√°metro.\n\n    Returns:\n        bool: El valor de retorno.\n    \"\"\"\n    pass\n\n\nEstilo NumPy/SciPy\n\n\ndef f(param1, param2):\n    \"\"\"\n    Una breve descripci√≥n de la funci√≥n.\n\n    Parameters\n    ----------\n    param1 : int\n        El primer par√°metro.\n    param2 : str\n        El segundo par√°metro.\n\n    Returns\n    -------\n    bool\n        El valor de retorno.\n    \"\"\"\n    pass\n\n\nEstilo reStructuredText (reST)\n\n\ndef f(param1, param2):\n    \"\"\"\n    Una breve descripci√≥n de la funci√≥n.\n\n    :param param1: El primer par√°metro.\n    :type param1: int\n    :param param2: El segundo par√°metro.\n    :type param2: str\n    :returns: El valor de retorno.\n    :rtype: bool\n    \"\"\"\n    pass\n\n\n\n\n\n\n\n\nEn Python, name es una variable especial que se define autom√°ticamente. Su valor depende de c√≥mo se ejecuta el archivo:\n\nSi el archivo se ejecuta directamente, name es igual a ‚Äúmain‚Äù.\nSi el archivo se importa como un m√≥dulo en otro archivo, name toma el nombre del archivo (sin la extensi√≥n .py).\n\n¬øPor qu√© usar if name == \"main\":?\nEl uso de esta construcci√≥n permite definir una secci√≥n de c√≥digo que solo se ejecutar√° cuando el archivo se ejecute directamente, y no cuando se importe como m√≥dulo. Esto es √∫til para escribir scripts que pueden funcionar tanto como programas independientes como m√≥dulos reutilizables.\n\n# mi_script.py\ndef saludo():\n    print(\"¬°Hola, Mundo!\")\n\nif __name__ == \"__main__\":\n    saludo()\n# Si ejecutas mi_script.py directamente, la salida ser√° ¬°Hola, Mundo!.\n# Si importas mi_script.py en otro archivo, no se ejecutar√° autom√°ticamente saludo().\n\n¬°Hola, Mundo!\n\n\n\n\n\nEl m√≥dulo sys proporciona acceso a algunos objetos utilizados o mantenidos por el int√©rprete de Python y a funciones que interaccionan fuertemente con el int√©rprete.\n\nimport sys\n\n# Lista en la que cada elemento es un argumento pasado al script\ndef main():\n    print(\"Nombre del script:\", sys.argv[0])\n    for i, arg in enumerate(sys.argv[1:], start = 1):\n        print(f\"Argumento {i}: {arg}\")\n\nif __name__ == \"__main__\":\n    main()\n\nNombre del script: C:\\Users\\Jason\\AppData\\Roaming\\Python\\Python312\\site-packages\\ipykernel_launcher.py\nArgumento 1: -f\nArgumento 2: C:\\Users\\Jason\\AppData\\Local\\Temp\\tmp9upt3ui7.json\nArgumento 3: --HistoryManager.hist_file=:memory:\n\n\n\n\n\nEl m√≥dulo os permite interactuar con el sistema operativo.\n\nimport os\n\n# Diccionario que contiene las variables de entorno del sistema\ndef mostrar_variables_entorno():\n    for clave, valor in os.environ.items():\n        print(f\"{clave}: {valor}\")\n\nif __name__ == \"__main__\":\n    mostrar_variables_entorno()\n\nALLUSERSPROFILE: C:\\ProgramData\nAPPDATA: C:\\Users\\Jason\\AppData\\Roaming\nCLICOLOR_FORCE: 1\nCOMMONPROGRAMFILES: C:\\Program Files\\Common Files\nCOMMONPROGRAMFILES(X86): C:\\Program Files (x86)\\Common Files\nCOMMONPROGRAMW6432: C:\\Program Files\\Common Files\nCOMPUTERNAME: JEISONALARCON\nCOMSPEC: C:\\Windows\\system32\\cmd.exe\nCURL_CA_BUNDLE: C:/PROGRA~1/R/R-44~1.0PA/etc/curl-ca-bundle.crt\nDENO_DOM_PLUGIN: C:\\PROGRA~1\\Quarto\\bin\\tools\\x86_64\\deno_dom\\plugin.dll\nDENO_NO_UPDATE_CHECK: 1\nDENO_TLS_CA_STORE: system,mozilla\nDISPLAY: :0\nDRIVERDATA: C:\\Windows\\System32\\Drivers\\DriverData\nEFC_5056: 1\nGFORTRAN_STDERR_UNIT: -1\nGFORTRAN_STDOUT_UNIT: -1\nGIT_ASKPASS: rpostback-askpass\nHOME: C:\\Users\\Jason\\OneDrive\\Documents\nHOMEDRIVE: C:\nHOMEPATH: \\Users\\Jason\nIPY_INTERRUPT_EVENT: 1116\nJPY_INTERRUPT_EVENT: 1116\nJPY_PARENT_PID: 852\nLOCALAPPDATA: C:\\Users\\Jason\\AppData\\Local\nLOGONSERVER: \\\\JEISONALARCON\nMPLBACKEND: module://matplotlib_inline.backend_inline\nMPLENGINE: tkAgg\nMSYS2_ENV_CONV_EXCL: R_ARCH\nNO_COLOR: TRUE\nNUMBER_OF_PROCESSORS: 16\nONEDRIVE: C:\\Users\\Jason\\OneDrive\nORIGINAL_XDG_CURRENT_DESKTOP: undefined\nOS: Windows_NT\nPATH: C:\\rtools44\\x86_64-w64-mingw32.static.posix\\bin;C:\\rtools44\\usr\\bin;C:\\Program Files\\R\\R-4.4.0patched\\bin\\x64;C:\\Program Files\\Quarto\\bin;C:\\Program Files\\Python312\\Scripts\\;C:\\Program Files\\Python312\\;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Windows\\System32\\OpenSSH\\;C:\\Program Files\\Git\\cmd;C:\\Users\\Jason\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\Jason\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;C:\\Users\\Jason\\AppData\\Local\\Programs\\MiKTeX\\miktex\\bin\\x64\\;C:\\Program Files\\Quarto\\bin;C:\\Program Files\\RStudio\\resources\\app\\bin\\postback\nPATHEXT: .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.PY;.PYW\nPROCESSOR_ARCHITECTURE: AMD64\nPROCESSOR_IDENTIFIER: AMD64 Family 25 Model 116 Stepping 1, AuthenticAMD\nPROCESSOR_LEVEL: 25\nPROCESSOR_REVISION: 7401\nPROGRAMDATA: C:\\ProgramData\nPROGRAMFILES: C:\\Program Files\nPROGRAMFILES(X86): C:\\Program Files (x86)\nPROGRAMW6432: C:\\Program Files\nPSMODULEPATH: C:\\Program Files\\WindowsPowerShell\\Modules;C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\nPUBLIC: C:\\Users\\Public\nPYDEVD_DISABLE_FILE_VALIDATION: 1\nPYTHONIOENCODING: utf-8\nPY_PYTHON: C:\\ProgramData\\miniconda3\\\nQUARTO_BIN_PATH: C:\\PROGRA~1\\Quarto\\bin\nQUARTO_DENO: C:\\PROGRA~1\\Quarto\\bin\\tools\\x86_64\\deno\nQUARTO_DOCUMENT_PATH: D:\\Documentos\\JOBS\\DNPE\\CursoPython\\posts\\Getting Started\nQUARTO_FIG_DPI: 192\nQUARTO_FIG_FORMAT: png\nQUARTO_FIG_HEIGHT: 5\nQUARTO_FIG_WIDTH: 7\nQUARTO_PROFILE: \nQUARTO_PROJECT_ROOT: D:\\Documentos\\JOBS\\DNPE\\CursoPython\nQUARTO_PYTHON: C:\\ProgramData\\miniconda3\\\nQUARTO_RENDER_TOKEN: f20dd7d5-943c-414a-9790-0d782f256425\nQUARTO_SHARE_PATH: C:\\PROGRA~1\\Quarto\\share\nRETICULATE_PYTHON: C:\\ProgramData\\miniconda3\\\nRMARKDOWN_MATHJAX_PATH: C:/Program Files/RStudio/resources/app/resources/mathjax-27\nRSTUDIO: 1\nRSTUDIO_CHILD_PROCESS_PANE: job\nRSTUDIO_CLI_HYPERLINKS: true\nRSTUDIO_CONSOLE_COLOR: 256\nRSTUDIO_CONSOLE_WIDTH: 193\nRSTUDIO_DESKTOP_EXE: C:\\Program Files\\RStudio\\rstudio.exe\nRSTUDIO_MSYS_SSH: C:/Program Files/RStudio/resources/app/bin/msys-ssh-1000-18\nRSTUDIO_PANDOC: C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools\nRSTUDIO_PROGRAM_MODE: desktop\nRSTUDIO_SESSION_PID: 9388\nRSTUDIO_SESSION_PORT: 37453\nRSTUDIO_USER_IDENTITY: Jason\nRSTUDIO_WINUTILS: C:/Program Files/RStudio/resources/app/bin/winutils\nRS_LOCAL_PEER: \\\\.\\pipe\\37453-rsession\nRS_LOG_LEVEL: WARN\nRS_RPOSTBACK_PATH: C:/Program Files/RStudio/resources/app/bin/rpostback.exe\nRS_SHARED_SECRET: 3a833e1a-f1b9-434a-8e77-092fec2a585e\nRTOOLS44_HOME: C:\\rtools44\nR_ARCH: /x64\nR_CLI_HAS_HYPERLINK_IDE_HELP: true\nR_CLI_HAS_HYPERLINK_IDE_RUN: true\nR_CLI_HAS_HYPERLINK_IDE_VIGNETTE: true\nR_COMPILED_BY: gcc 13.2.0\nR_DOC_DIR: C:/PROGRA~1/R/R-44~1.0PA/doc\nR_HOME: C:/PROGRA~1/R/R-44~1.0PA\nR_INCLUDE_DIR: C:/PROGRA~1/R/R-44~1.0PA/include\nR_LIBS_SITE: C:/PROGRA~1/R/R-44~1.0PA/site-library\nR_LIBS_USER: C:\\Users\\Jason\\AppData\\Local/R/win-library/4.4\nR_PLATFORM: \nR_RTOOLS44_PATH: C:\\rtools44/x86_64-w64-mingw32.static.posix/bin;C:\\rtools44/usr/bin\nR_RUNTIME: ucrt\nR_SHARE_DIR: C:/PROGRA~1/R/R-44~1.0PA/share\nR_USER: C:/Users/Jason/OneDrive/Documents\nSESSIONNAME: Console\nSSH_ASKPASS: rpostback-askpass\nSYSTEMDRIVE: C:\nSYSTEMROOT: C:\\Windows\nTEMP: C:\\Users\\Jason\\AppData\\Local\\Temp\nTERM: xterm-color\nTMP: C:\\Users\\Jason\\AppData\\Local\\Temp\nUSERDOMAIN: JEISONALARCON\nUSERDOMAIN_ROAMINGPROFILE: JEISONALARCON\nUSERNAME: Jason\nUSERPROFILE: C:\\Users\\Jason\nWINDIR: C:\\Windows\nPYDEVD_USE_FRAME_EVAL: NO\nCLICOLOR: 1\nFORCE_COLOR: 1\nPAGER: cat\nGIT_PAGER: cat\n\n\n\n\n\n\n\ncadena = \"Hola, Mundo!\"\n# Convertir a min√∫sculas\nprint(cadena.lower())                     # tolower(cadena)\n\n# Reemplazar caracteres\nprint(cadena.replace(\"Mundo\", \"Python\"))  # sub(\"Mundo\", \"R\", cadena)\n\n# Dividir cadenas\nprint(cadena.split(\", \"))                 # strsplit(cadena, \", \")\n\n# Comprensiones de Listas\nprint([x ** 2 for x in range(10)])        # sapply(0:9, function(x) x^2)\n\n\n\n\ndef exterior(x):\n    def interior(y):\n        return x + y\n    return interior\n\nprint(exterior(5)) \n\n#| eval: false\nexterior &lt;- function(x) {\n    interior &lt;- function(y) {\n        x + y\n    }\n    interior\n}\n\nexterior(5)\n\n\n\n\nsexo = [\"M\", \"F\", \"F\", \"M\", \"M\"]\nniveles = {\"M\": \"Male\", \"F\": \"Female\"}\nprint([niveles[s] for s in sexo])\n\n#| eval: false\nsexo &lt;- factor(c(\"M\", \"F\", \"F\", \"M\", \"M\"))\nlevels(sexo) &lt;- c(\"Female\", \"Male\")\nprint(sexo)\n\n\n\n\nclass Coche:\n    def __init__(self, marca, modelo):\n        self.marca = marca\n        self.modelo = modelo\n    \n    def descripcion(self):\n        return f\"Coche: {self.marca} {self.modelo}\"\n\nmi_coche = Coche(\"Toyota\", \"Corolla\")\nprint(mi_coche.descripcion())  # Coche: Toyota Corolla\n\n#| eval: false\nsetClass(\"Coche\",\n         slots = list(marca = \"character\", modelo = \"character\"))\n\nsetMethod(\"initialize\", \"Coche\",\n          function(.Object, marca, modelo) {\n            .Object@marca &lt;- marca\n            .Object@modelo &lt;- modelo\n            .Object\n          })\n\nsetMethod(\"descripcion\", \"Coche\",\n          function(object) {\n            paste(\"Coche:\", object@marca, object@modelo)\n          })\n\nmi_coche &lt;- new(\"Coche\", marca = \"Toyota\", modelo = \"Corolla\")\ndescripcion(mi_coche)  # \"Coche: Toyota Corolla\"\nPython Enhancement Proposal (PEP): https://peps.python.org/pep-0008/\nhttps://docs.python.org/es/3/library/trace.html python -m trace ‚Äìcount -C . somefile.py Esto ejecutar√° somefile.py y generar√° listados anotados de todos los m√≥dulos de Python importados durante la ejecuci√≥n en el directorio actual.\nhttps://jjallaire.github.io/pydata-quarto-dashboards/#/learning-more\n\n# import numpy as np\n# import matplotlib.pyplot as plt\n# import pandas as pd\n# import seaborn as sns\n# import statsmodels as sm\n#\n# pd.options.display.max_columns = 20\n# pd.options.display.max_rows = 20\n# pd.options.display.max_colwidth = 80\n# np.set_printoptions(precision = 4, suppress = True)"
  },
  {
    "objectID": "posts/Getting Started/index.html#configuraci√≥n-inicial",
    "href": "posts/Getting Started/index.html#configuraci√≥n-inicial",
    "title": "Getting Started",
    "section": "",
    "text": "Usaremos la IDE de Rstudio (claramente no nos limitaremos a ella, usaremos Jupyter Notebook, VSC, Google Colab, etc). Pero m√°s adelante trabajaremos con ambos lenguajes (Python y R) simult√°neamente por lo cual nos servir√° realizar esta configuraci√≥n.\n\nPrimero necesita conocer con exactitud la ruta del ejecutable python.exe üí• que desea usar (sea con Python, conda, venv, etc). Para ello abra la consola de su int√©rprete (si usa un environment en particular no olvide ingresar a √©l üì•) y ejecute los comandos mostrados. Guarde dicha direcci√≥n en el portapapeles üìé.\n\n\npython\nimport sys\nprint(sys.executable)\n\n\n\nAhora que conoce la direcci√≥n correcta de su int√©rprete de Python üìá, dir√≠jase a la ruta mostrada en Rstudio. üëÄ En ocasiones no le saldr√° para ser seleccionado, por eso es mejor tener la ruta, p√©guela en la casilla y espere unos segundos ‚åö que lo reconozca antes de salir y darle guardar o aplicar (si realiza lo anterior de forma muy r√°pida no le quedar√°). Le pedir√° que reinicie sesi√≥n y ya deber√° quedar si vuelve a ingresar.\n\n\n\nPor √∫ltimo instalaremos una librer√≠a que nos proporcionar√° un conjunto completo de herramientas para la interoperabilidad entre Python y R üõ†Ô∏è.\n\n\ninstall.packages(\"reticulate\")\n\n\n\n\nComo usaremos dentro de los .qmd el par√°metro jupyter: python3, es necesario tener instalada dicha librer√≠a en su int√©rprete üíª, para lo cual ejecute (dentro de su kernel a usar y environment elegido):\n\nconda install jupyter\n# conda install numpy pandas scikit-learn matplotlib seaborn jupyter\n\nCompruebe que efectivamente haya sido descargado con:\n\nconda list\n\n\n\n\nS√≠ ejecuta el siguiente comando en el terminal ‚å®Ô∏è, deber√° obtener algo como lo siguiente:\nquarto check jupyter\n\nComo puede observar tenemos un problema ‚ö†Ô∏è y es que no qued√≥ el kernel que elegimos desde un inicio. Y el error mostrado se debe a que obviamente hay m√≥dulos que no hemos instalado en dicho int√©rprete que Quarto selecciona por defecto. Si desea obtener m√°s informaci√≥n de dicho error consulte: Quarto Uses Wrong Python Version.\nPara ‚Äúcorregir‚Äù lo anterior debemos apoyarnos de la documentaci√≥n oficial, la cual indica que se debe crear un archivo _environment (s√≠ as√≠ tal cual sin extensi√≥n alguna) y establecer los valores para QUARTO_PYTHON=\"C:\\ProgramData\\miniconda3\\\" ‚úîÔ∏è. As√≠ conseguimos que Quarto pueda establecer y fijar dicha configuraci√≥n local para nuestro .qmd.\n\nQUARTO_PYTHON se establece en: C:\\ProgramData\\miniconda3\\\nPY_PYTHON se establece en: C:\\ProgramData\\miniconda3\\\nRETICULATE_PYTHON se establece en: C:\\ProgramData\\miniconda3\\\n\nEl siguiente blog üìî explica demasiado bien lo que acabamos de hacer a mayor detalle, para renderizar un documento Quarto con un entorno espec√≠fico en RStudio/Posit.\nüü¢ Finalmente, cree y ejecute un nuevo .qmd, puede utilizar la plantilla ejemplo, y agregue el siguiente chunk para que verifique por su propia cuenta que, a pesar de que Quarto a nivel global est√° usando otro int√©rprete, al definir el _environment queda con el que usted especifica.\n\nimport sys\nprint(sys.executable)\nprint(sys.prefix)\nprint (sys.version)\n\nC:\\ProgramData\\miniconda3\\pythonw.exe\nC:\\ProgramData\\miniconda3\n3.12.2 | packaged by Anaconda, Inc. | (main, Feb 27 2024, 17:28:07) [MSC v.1916 64 bit (AMD64)]"
  },
  {
    "objectID": "posts/Getting Started/index.html#ipython",
    "href": "posts/Getting Started/index.html#ipython",
    "title": "Getting Started",
    "section": "",
    "text": "üîñ Cualquier comando est√°ndar de shell puede ser utilizado directamente en IPython anteponiendo el car√°cter !. Por ejemplo,\n\n# : ....................... Shell Commands en IPython ........................ :\n!ls\n\nBooks\nLICENSE\nProfile.jpg\nPython Course.Rproj\n_environment\n_freeze\n_publish.yml\n_quarto.yml\n_site\nabout.qmd\nfiles\nindex.qmd\nposts\nstyles.css\n\n\n\ndirectory = !pwd\nprint(directory)\n\n['/d/Documentos/JOBS/DNPE/CursoPython']\n\n\n\nmessage = \"Imprimiendo un texto desde shell\"\n!echo {message}\n\nImprimiendo un texto desde shell"
  },
  {
    "objectID": "posts/Getting Started/index.html#conceptos-b√°sicos",
    "href": "posts/Getting Started/index.html#conceptos-b√°sicos",
    "title": "Getting Started",
    "section": "",
    "text": "üìê Identaci√≥n (no llaves {} ): Python utiliza espacios en blanco (tabuladores o espacios) para estructurar el c√≥digo en lugar de utilizar llaves como en muchos otros lenguajes como R y C++.\nüî£ No se necesita terminar con ;: El punto y coma puede usarse para separar m√∫ltiples sentencias en una sola l√≠nea. a = 1; b = 2; c = 3\nüè∑Ô∏è Las cadenas admiten tanto comillas simples ' como comillas dobles \": Se prefieren las comillas dobles, y para cadenas de varias l√≠neas con saltos de l√≠nea, puede utilizar comillas triples \"\"\".\nüÜé Vinculaci√≥n (binding): En otros lenguajes, la asignaci√≥n har√° que se copien los datos. En Python, hace que se refieran ahora al mismo objeto,\n\n\na = [1, 2, 3]\nb = a\na.append(4)\nb\n\n[1, 2, 3, 4]\n\n\n\n# Cuando se pasan objetos como argumentos a una funci√≥n, se crean nuevas variables\n# locales que hacen referencia a los objetos originales sin necesidad de copiarlos\ndef myAppend(lista, elemento):\n    lista.append(elemento)\ndata = [1, 2, 3]\nmyAppend(data, 4)\ndata\n\n[1, 2, 3, 4]\n\n\n\nüí™ Un lenguaje tipado: Cada objeto tiene un tipo (o clase) espec√≠fico, con la ventaja de que las variables no tienen un tipo inherente asociado a ellas.\n\n\na = 5      ; print(type(a))\na = \"cinco\"; print(type(a))\n\n&lt;class 'int'&gt;\n&lt;class 'str'&gt;\n\n\n\n\"5\" + 5\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[8], line 1\n----&gt; 1 \"5\" + 5\n\nTypeError: can only concatenate str (not \"int\") to str\n\n\n\n\na = 4.5\nb = 2\nprint(a / b)\nprint(isinstance(a, (int, float)))\n\n2.25\nTrue\n\n\n\n\n\n# Acceso a la Documentaci√≥n:\nhelp(len)\n\nHelp on built-in function len in module builtins:\n\nlen(obj, /)\n    Return the number of items in a container.\n\n\n\n\nletra = \"a\"\n# letra.&lt;Press Tab&gt;\ngetattr(letra, \"split\")\n\n&lt;function str.split(sep=None, maxsplit=-1)&gt;\n\n\n\n# Gui√≥n bajo '_' para salidas anteriores\n1+1\n2+2\nprint(_)\n\n&lt;built-in method split of str object at 0x00007FF807D71CE0&gt;\n\n\n\n# Acceder a las entradas anteriores (historial)\n%history -n 1-3\n\n   1:\nimport sys\nprint(sys.executable)\nprint(sys.prefix)\nprint (sys.version)\n   2:\n# : ....................... Shell Commands en IPython ........................ :\n!ls\n   3:\ndirectory = !pwd\nprint(directory)\n\n\n\n# : .......................... Timing Code Snippets .......................... :\n%timeit sum(range(100))   # IPython Magic Commands\n\n356 ns ¬± 1.58 ns per loop (mean ¬± std. dev. of 7 runs, 1,000,000 loops each)\n\n\n\n%%timeit                  # Cuando es m√°s complejo, baja el n√∫mero de repeticiones\ntotal = 0\nfor i in range(1000):\n    for j in range(1000):\n        total += i * (-1) ** j\n\n84.9 ms ¬± 2.39 ms per loop (mean ¬± std. dev. of 7 runs, 10 loops each)\n\n\n\n\n\n```{python}\n# Modulo.py\nPI = 3.14159\ndef cuadrado(x):\n return x ** 2\n```\n\nimport Modulo\nprint(Modulo.cuadrado(5))\npi = Modulo.PI\n# ......................................\nfrom Modulo import PI, cuadrado\ncuadrado(PI)\n# ......................................\nimport Modulo as m\nfrom Modulo import PI as kte, cuadrado as elevado\n\nr1 = m.cuadrado(kte); print(r1)\nr2 = elevado(6)     ; print(r2)\n\n\n\n\n\n\na = [1, 2, 3]\nb = a\nc = list(a) # Crea una copia\n\nprint(a is b)\nprint(a is not c)\n\nTrue\nTrue\n\n\n\na.append(4)\na == c\n\nFalse\n\n\n\n# Intercambiar los nombres de las variables:\na, b = 1, 2\n# tmp = a\n# a = b\n# b = tmp\nb, a = a, b\nprint(f'a = {a}, b = {b}')\n\na = 2, b = 1"
  },
  {
    "objectID": "posts/Getting Started/index.html#‚Ñπ-tipos-est√°ndar",
    "href": "posts/Getting Started/index.html#‚Ñπ-tipos-est√°ndar",
    "title": "Getting Started",
    "section": "",
    "text": "Tipo\nDescripci√≥n\n\n\n\n\nNone\nEl valor ‚Äúnulo‚Äù de Python (solo existe una instancia del objeto None)\n\n\nstr\nTipo de cadena; contiene cadenas Unicode\n\n\nbytes\nDatos binarios en bruto\n\n\nfloat\nN√∫mero de punto flotante de doble precisi√≥n (nota que no hay un tipo double separado)\n\n\nbool\nUn valor booleano True o False\n\n\nint\nEntero de precisi√≥n arbitraria\n\n\n\n\n\n\nprint(int(False)); print(int(True))\nprint(True + False)\nprint(not not not not True)\nprint(bool(2024.75)) # Todo valor !=0 se convierte en True\nprint(bool(\".\"))     # Todo valor !=\"\" se convierte en True\n\n0\n1\n1\nTrue\nTrue\nTrue\n\n\n\n\n\n\na = \"Hola mundo \\\\&gt;\"\nprint(a)\n\nHola mundo \\&gt;\n\n\n\nb = \"\"\"\nEsta cadena es m√°s larga que\nabarca varias l√≠neas\n\"\"\"\nprint(b)\nb.count(\"\\n\")\n\n\nEsta cadena es m√°s larga que\nabarca varias l√≠neas\n\n\n\n3\n\n\n\nc = r\"D:\\Documentos\\Carpeta\"\nprint(c)\n\nD:\\Documentos\\Carpeta\n\n\n\n# Los strings en Python son inmutables: no se puede modificar una cadena\nprint(a[5])\na[5] = \"M\"\n\nm\n\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[23], line 3\n      1 # Los strings en Python son inmutables: no se puede modificar una cadena\n      2 print(a[5])\n----&gt; 3 a[5] = \"M\"\n\nTypeError: 'str' object does not support item assignment\n\n\n\n\na.replace(\"m\", \"M\")\n\n'Hola Mundo \\\\&gt;'\n\n\n\na       # Tras esta operaci√≥n, la variable no se modifica\n\n'Hola mundo \\\\&gt;'\n\n\n\nlist(a) # Las cadenas son una secuencia de caracteres Unicode\n\n['H', 'o', 'l', 'a', ' ', 'm', 'u', 'n', 'd', 'o', ' ', '\\\\', '&gt;']\n\n\n\n\nExisten varios m√©todos para formatear cadenas de texto, entre los cuales encontramos:\n\nOperador de Formato %\n\n\nNombre = \"Juan\"\nEdad = 33\nPi   = 3.141592\nprint(\"Hola, mi nombre es %s y tengo %d a√±os. Y s√© que pi vale: %.2f.\" % (Nombre, Edad, Pi))\n\nHola, mi nombre es Juan y tengo 33 a√±os. Y s√© que pi vale: 3.14.\n\n\n\nM√©todo .format()\n\n\nprint(\"Hola, mi nombre es {} y tengo {} a√±os. Y s√© que pi vale: {:.2f}.\".format(Nombre, Edad, Pi))\nprint(\"Nombre: {name}, Edad: {age}\".format(name = \"Luis\", age = 33))\nprint(\"El {0} se encuentra en el {1} y el {1} se encuentra en el {0}.\".format(\"sol\", \"cielo\"))\n\nHola, mi nombre es Juan y tengo 33 a√±os. Y s√© que pi vale: 3.14.\nNombre: Luis, Edad: 33\nEl sol se encuentra en el cielo y el cielo se encuentra en el sol.\n\n\n\n# 0:.3f El 1re valor ser√° un flotantes con 3 decimales\n# 1:s   El 2do valor ser√° un string\n# 2:d   El 3re valor ser√° un entero\ntemplate = \"{0:.3f} {1:s} equivalen a US${2:d}\"\ntemplate.format(3.960, \"pesos Colombianos\", 1) # Intente modificar el tipo de alguno de estos\n\n'3.960 pesos Colombianos equivalen a US$1'\n\n\n\nf-strings\n\n\nTasa   = 3.960\nMoneda = \"Colombianos\"\nf\"{Tasa:.4f} pesos {Moneda} equivalen a US${Tasa/Tasa}\"\n\n'3.9600 pesos Colombianos equivalen a US$1.0'\n\n\n\n# C√°lculos Dentro:\na = 5; b = 10\nprint(f\"La suma de {a} y {b} es {a + b}. Adem√°s, a*b = {a*b}\")\n\nLa suma de 5 y 10 es 15. Adem√°s, a*b = 50\n\n\n\n# Alinear Texto:\nprint(f\"{'izquierda':&lt;10} {'centrado':^10} {'derecha':&gt;10}\")\n\nizquierda   centrado     derecha\n\n\n\n# Mostrar N√∫meros en Diferentes Bases:\nNumero = 255\nprint(f\"Decimal: {Numero}, Binario: {Numero:b}, Hexadecimal: {Numero:x}, Octal: {Numero:o}\")\n\nDecimal: 255, Binario: 11111111, Hexadecimal: ff, Octal: 377\n\n\n\n# Incluir Expresiones y M√©todos:\nTxt = \"Amo Python\"\nprint(f\"El texto en may√∫sculas es: {Txt.upper()}.\")\n\nEl texto en may√∫sculas es: AMO PYTHON.\n\n\n\n# Combinaci√≥n con Diccionarios:\nPais = {\"nombre\": \"Colombia\", \"NoPoblacion\": 50}\nprint(f\"Pa√≠s: {Pais['nombre']} | Habitantes: {Pais['NoPoblacion']}\")\n\nPa√≠s: Colombia | Habitantes: 50\n\n\n\n# Incluir Llaves Literales:\nprint(f\"Este es un valor literal en llaves: {{Numero}}, y este es el valor de la variable: {Numero}.\")\n\nEste es un valor literal en llaves: {Numero}, y este es el valor de la variable: 255.\n\n\n\nM√©todo string.Template\n\n\nfrom string import Template\ntemplate = Template(\"Hola, mi nombre es $name y tengo $age a√±os.\")\nmensaje  = template.substitute(name = \"Juan\", age = 33)\nprint(mensaje)\n\nHola, mi nombre es Juan y tengo 33 a√±os.\n\n\n\n\n\n\n\n\n\n\n\nM√©todo\nSintaxis\nVentajas\nDesventajas\n\n\n\n\nOperador %\nHola, %s % ‚Äúmundo‚Äù\nSimple y familiar para quienes conocen C\nMenos flexible y m√°s propenso a errores\n\n\nM√©todo .format()\nHola, {}.format(‚Äúmundo‚Äù)\nMuy flexible, soporta nombres y posiciones\nSintaxis m√°s verbosa\n\n\nf-strings\nf\"Hola, {variable}\"\nMuy legible, permite expresiones dentro de {}\nDisponible solo en Python 3.6+\n\n\nstring.Template\nTemplate(\"Hola, $nombre\")\nSimple y seguro, f√°cil de leer\nMenos potente para formateo complejo\n\n\n\n\n\n\n\nAbc.\n\n\n\n\nfrom datetime import datetime, date, time\n\ndt = datetime(2024, 1, 31, 20, 30, 21)\ndt.day\n\n31\n\n\n\ndt.date()\n\ndatetime.date(2024, 1, 31)\n\n\n\ndt.time()\n\ndatetime.time(20, 30, 21)\n\n\n\ndt.strftime(\"%Y-%m-%d %H:%M\")\n\n'2024-01-31 20:30'\n\n\n\ndt_hour = dt.replace(minute = 0, second = 0)\ndt_hour\n\ndatetime.datetime(2024, 1, 31, 20, 0)\n\n\n\ndelta = datetime.now() - dt\ndelta\n\ndatetime.timedelta(days=181, seconds=80865, microseconds=14995)"
  },
  {
    "objectID": "posts/Getting Started/index.html#objetos-mutables-e-inmutables",
    "href": "posts/Getting Started/index.html#objetos-mutables-e-inmutables",
    "title": "Getting Started",
    "section": "",
    "text": "Note\n\n\n\nUna tupla es una secuencia ordenada de objetos de longitud fija e inmutable (una vez asignada no puede modificarse). La forma m√°s sencilla de crear una tupla es con una secuencia de valores separados por comas entre par√©ntesis.\n\n\n\ntup1 = (1, 2, 3)      # Pueden contener elementos repetidos\ntup2 = 4, 5, 6        # Los par√©ntesis pueden omitirse\nprint(tup1); print(tup2)\n\n(1, 2, 3)\n(4, 5, 6)\n\n\n\n# Se puede convertir cualquier secuencia o iterador\nprint( tuple([7, 8, 9]) )\nprint( tuple(\"Texto\") )\n\n(7, 8, 9)\n('T', 'e', 'x', 't', 'o')\n\n\n\ntupCompleja = (2, 4, 8), (3, 5)\nprint(tupCompleja)\ntupCompleja[0]\n\n((2, 4, 8), (3, 5))\n\n\n(2, 4, 8)\n\n\n\ntupMixta = tuple(['txt', [1, 2], True])\ntupMixta[1].append(3) # Si un objeto dentro de una tupla es mutable, se puede modificar\nprint(tupMixta)\ntupMixta[2] = False\n\n('txt', [1, 2, 3], True)\n\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[47], line 4\n      2 tupMixta[1].append(3) # Si un objeto dentro de una tupla es mutable, se puede modificar\n      3 print(tupMixta)\n----&gt; 4 tupMixta[2] = False\n\nTypeError: 'tuple' object does not support item assignment\n\n\n\n\nprint( tup1*2 + (20, 24) + ('year',) )\n\n(1, 2, 3, 1, 2, 3, 20, 24, 'year')\n\n\n\n# Desempaquetado (unpacking)\nuno, dos, tres = tup1\nprint(uno)\n(a, b, c), (d, e) = tupCompleja\nprint(a)\n\n1\n2\n\n\n\nseq = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nfor a, b, c in seq:\n    print(f'a = {a}, b = {b}, c = {c}')\n\na = 1, b = 2, c = 3\na = 4, b = 5, c = 6\na = 7, b = 8, c = 9\n\n\n\nfirst, second, *rest = (1, 2, 3, 4, 5)\nprint(f\"{first} || {second} || {rest}\")\n# El gui√≥n bajo (_) para descartar las variables no deseadas\nfirst, second, *_ = (1, 2, 3, 4, 5)\nprint(*_)\n\n1 || 2 || [3, 4, 5]\n3 4 5\n\n\n\n# Si desea definir una tupla con un solo elemento debe incluir una coma al final:\nmy_t = (3,)\nprint(my_t)\n# M√©todos\n(1, 0, 1, 1, 0).count(0)\n\n(3,)\n\n\n2\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nUna lista es una colecci√≥n de elementos en un orden determinado. Puedes poner lo que quieras en una lista, y los elementos que la componen no tienen porqu√© estar relacionados de ninguna manera en particular. En Python, los corchetes [ ] indican una lista, y los elementos individuales de la lista est√°n separados por comas.\n\n\n\n\n\n\n\n\nWarning\n\n\n\n\nLas posiciones de √≠ndice empiezan en 0, no en 1.\nLas listas son de longitud variable y su contenido puede modificarse (son mutables).\n\n\n\n\nmotorcycles = [0, \"honda\", \"yamaha\", \"suzuki\", None]\nprint(motorcycles)\nlist(tup1)\n\n[0, 'honda', 'yamaha', 'suzuki', None]\n\n\n[1, 2, 3]\n\n\n\n# A√±adir y eliminar elementos\nmotorcycles.append(\"ducati\")\nmotorcycles.insert(1, \"1\")\ndel motorcycles[-2]         # Removing an Item Using the del Statement\nmotorcycles.pop(0)          # Popping Items from Any Position\nprint(motorcycles)\n\n['1', 'honda', 'yamaha', 'suzuki', 'ducati']\n\n\n\n\n\n\n\n\nCaution\n\n\n\nLa inserci√≥n (insert) es m√°s costosa computacionalmente que la adici√≥n (append), ya que las referencias a los elementos subsiguientes deben desplazarse internamente para dejar espacio al nuevo elemento.\n\n\n\nmotorcycles.append(\"2\"); print(motorcycles)\nmotorcycles.remove(\"2\"); print(motorcycles) # Removing an Item by Value\n\n['1', 'honda', 'yamaha', 'suzuki', 'ducati', '2']\n['1', 'honda', 'yamaha', 'suzuki', 'ducati']\n\n\n\n# Sorting a List\nmotorcycles.sort(); print(motorcycles)\nmotorcycles.sort(reverse = True); print(motorcycles)\nprint(sorted(motorcycles)); print(motorcycles)\n\n['1', 'ducati', 'honda', 'suzuki', 'yamaha']\n['yamaha', 'suzuki', 'honda', 'ducati', '1']\n['1', 'ducati', 'honda', 'suzuki', 'yamaha']\n['yamaha', 'suzuki', 'honda', 'ducati', '1']\n\n\n\nprint(motorcycles.reverse())\nlen(motorcycles)\n\nNone\n\n\n5\n\n\n\n# Python returns another index error\nlistA = []\nprint(listA[-1])\n\n\n---------------------------------------------------------------------------\nIndexError                                Traceback (most recent call last)\nCell In[58], line 3\n      1 # Python returns another index error\n      2 listA = []\n----&gt; 3 print(listA[-1])\n\nIndexError: list index out of range\n\n\n\n\nsquares = []\nfor value in range(1, 11):\n    squares.append(value ** 2)\nprint(squares)\n# List Comprehensions\nsquares = [value**2 for value in range(1, 11)]\nprint(squares)\n\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\n\n\n# Slicing a List\nprint(motorcycles[0:3])\nprint(motorcycles[2:])\nprint(motorcycles[-2:])\n\n['1', 'ducati', 'honda']\n['honda', 'suzuki', 'yamaha']\n['suzuki', 'yamaha']\n\n\n\n# Copying a List\nonces = [\"pizza\", \"arepa\", \"empanada\"]\ntusOnces = onces[:]\nonces.append(\"bu√±uelo\")\ntusOnces.append(\"pan\")\nprint(onces); print(tusOnces)\n\n['pizza', 'arepa', 'empanada', 'bu√±uelo']\n['pizza', 'arepa', 'empanada', 'pan']\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nUn diccionario (conocido en otros lenguajes como maps o associative arrays) almacena una colecci√≥n de pares clave-valor, donde clave y valor son objetos Python. Cada clave est√° asociada a un valor, de modo que un valor puede ser convenientemente recuperado, insertado, modificado o eliminado dada una clave en particular. Tenga presente que las claves √∫nicas (no permiten duplicados en las claves).\n\n\n\nfisico = {'color': 'blanco', 'altura': 1.79}\nfisico[\"ojos\"] = \"azules\"\nfisico[\"peso\"] = 87\nprint(fisico)\n\n{'color': 'blanco', 'altura': 1.79, 'ojos': 'azules', 'peso': 87}\n\n\n\n# Diccionario con tuplas como claves\npuntos = {\n    (0, 0): \"Origen\",\n    (1, 2): \"Punto A\",\n    (3, 4): \"Punto B\"\n}\nprint(puntos[(1, 2)])\n\nPunto A\n\n\n\n\n\nAbc.\n\n# Mutable\nmi_lista = [1, 2, 3]\nprint(id(mi_lista))  # Ejemplo de ID: 2180570982400\nmi_lista.append(4)\nprint(id(mi_lista))  # Mismo ID: 2180570982400\n\n# Inmutable\nmi_tupla = (1, 2, 3)\nprint(id(mi_tupla))  # Ejemplo de ID: 2180571003840\nmi_tupla = (1, 2, 3, 4)\nprint(id(mi_tupla))  # Nuevo ID: 2180571086992\n\n1610394567040\n1610394567040\n1610394610496\n1610394566256"
  },
  {
    "objectID": "posts/Getting Started/index.html#flujo-de-control",
    "href": "posts/Getting Started/index.html#flujo-de-control",
    "title": "Getting Started",
    "section": "",
    "text": "w = 5; x = 4; y = 3; z = 2\nif x &lt; 0:\n    print(\"x es negativo.\")\nelif x == 0:\n    print(\"x es cero\")\nelif w &gt; x &gt; y &gt; z:\n    print(\"Los valores est√°n en orden.\")\nelse:\n    print(\"Otro caso diferente.\")\n\nLos valores est√°n en orden.\n\n\n\n\n\n\nnumeros = [1, 2, None, 4, None, 5] # sum(numeros)\ntotal = 0\nfor value in numeros:\n    if value is None:\n        continue\n    if value == 4:\n        break       # La sentencia 'break' se usa para salir del bucle\n    total += value\ntotal\n\n3\n\n\n\n# 'break' s√≥lo termina el for m√°s interno, cualquier for externo continuar√°\nfor i in range(4):\n    for j in range(4):\n        if j &gt; i:\n            break\n        print((i, j))\n\n(0, 0)\n(1, 0)\n(1, 1)\n(2, 0)\n(2, 1)\n(2, 2)\n(3, 0)\n(3, 1)\n(3, 2)\n(3, 3)\n\n\n\n\n\nEsta estructura permite ejecutar repetidamente un bloque de c√≥digo mientras una condici√≥n especificada se eval√∫a como verdadera. Este ciclo es √∫til cuando no se sabe de antemano cu√°ntas veces se necesitar√° repetir el bloque de c√≥digo, a diferencia del ciclo for, que itera sobre una secuencia de elementos de longitud conocida.\n\nwhile True:\n    entrada = input(\"Escribe 'salir' para terminar: \")\n    if entrada.lower() == \"salir\":\n        break\n\n\n\n\nEs la sentencia no-op (o no hacer nada) de Python. Puede usarse en bloques en los que no se va a realizar ninguna acci√≥n. S√≥lo es necesaria porque Python utiliza espacios en blanco para delimitar los bloques.\nCuando la ejecuci√≥n del programa alcanza una sentencia continue, la ejecuci√≥n del programa salta inmediatamente al inicio del bucle y reeval√∫a la condici√≥n del bucle.\n\nwhile True:\n    print('¬øQui√©n eres t√∫?')\n    name = input()\n    if name != 'Juan':\n        continue\n    print('Hola Juan, cu√°l es tu contrase√±a (es un equipo)')\n    password = input()\n    if password == 'nacional':\n        break\nprint('Acceso Concedido.')\n\n\n\nPass (for, if): No realiza ninguna acci√≥n y se utiliza como marcador de lugar (placeholder para futura implementaci√≥n).\nContinue (for, while): Salta a la siguiente iteraci√≥n del bucle, omitiendo el resto del c√≥digo en la iteraci√≥n actual.\nBreak (if): Termina el bucle inmediatamente, saliendo de la estructura de control de flujo.\n\n\n\n\n\n\nprint(f\"{   range(10)   }\")\nprint(f\"{   range(1, 10)   }\")\nprint(f\"{   list(range(0, 20, 2))   }\")\nprint(f\"{   list(range(5, -1, -1))   }\")\n\nrange(0, 10)\nrange(1, 10)\n[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\n[5, 4, 3, 2, 1, 0]"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Este curso est√° dise√±ado para guiarte desde los conceptos b√°sicos hasta las habilidades intermedias en uno de los lenguajes de programaci√≥n m√°s poderosos/populares y vers√°tiles de la actualidad. Este curso est√° orientado tanto a principiantes absolutos en la programaci√≥n como a aquellos con experiencia en otros lenguajes que deseen expandir sus conocimientos y competencias en Python."
  },
  {
    "objectID": "about.html#objetivos-del-curso",
    "href": "about.html#objetivos-del-curso",
    "title": "About",
    "section": "Objetivos del Curso",
    "text": "Objetivos del Curso\nEl objetivo principal de este curso es proporcionar una comprensi√≥n s√≥lida de los fundamentos de Python y su aplicaci√≥n pr√°ctica. Al finalizar este curso, los estudiantes ser√°n capaces de:\n\nComprender la Sintaxis y Sem√°ntica de Python: Familiarizarse con la estructura b√°sica del lenguaje, incluyendo variables, tipos de datos, operadores y estructuras de control.\nEscribir y Ejecutar Programas Simples: Crear scripts que resuelvan problemas cotidianos y automaticen tareas comunes.\nManipular Datos: Trabajar con listas, diccionarios y otros tipos de datos compuestos para gestionar y procesar informaci√≥n de manera eficiente.\nDesarrollar Habilidades de Resoluci√≥n de Problemas: Aplicar t√©cnicas de pensamiento algor√≠tmico para dise√±ar soluciones efectivas y optimizadas.\nIntroducci√≥n a la Programaci√≥n Orientada a Objetos (POO): Entender los conceptos b√°sicos de POO y c√≥mo se implementan en Python.\nUtilizar M√≥dulos y Paquetes: Explorar y emplear bibliotecas est√°ndar y de terceros para ampliar las capacidades de tus programas."
  },
  {
    "objectID": "about.html#estructura-del-curso",
    "href": "about.html#estructura-del-curso",
    "title": "About",
    "section": "Estructura del Curso",
    "text": "Estructura del Curso\nEl curso est√° dividido en varios m√≥dulos, cada uno centrado en un aspecto fundamental de Python:\n\nIntroducci√≥n y Configuraci√≥n del Entorno:\n\nInstalaci√≥n de Python y configuraciones iniciales.\nIntroducci√≥n a los entornos de desarrollo integrados (IDE) y editores de texto.\n\nSintaxis B√°sica y Estructuras de Control:\n\nVariables, tipos de datos y operaciones b√°sicas.\nCondicionales, bucles y comprensi√≥n de listas.\n\nFunciones y M√≥dulos:\n\nDefinici√≥n y uso de funciones.\nModularizaci√≥n del c√≥digo con scripts y m√≥dulos.\n\nEstructuras de Datos Avanzadas:\n\nListas, tuplas, conjuntos y diccionarios.\nM√©todos avanzados y manipulaci√≥n de datos.\n\nProgramaci√≥n Orientada a Objetos (POO):\n\nClases y objetos.\nHerencia, encapsulamiento y polimorfismo.\n\nManejo de Errores y Excepciones:\n\nIdentificaci√≥n y gesti√≥n de errores (try, except, y finally).\nUso de excepciones para control de flujo robusto.\n\nInteracci√≥n con Archivos y Datos:\n\nLectura y escritura de archivos.\nIntroducci√≥n al manejo de datos con bibliotecas como Pandas.\n\nIntroducci√≥n a Librer√≠as Populares:\n\nUso de librer√≠as esenciales como NumPy, Pandas, Matplotlib, y m√°s.\nAplicaciones pr√°cticas en ciencia de datos y visualizaci√≥n."
  },
  {
    "objectID": "about.html#requisitos-previos",
    "href": "about.html#requisitos-previos",
    "title": "About",
    "section": "Requisitos Previos",
    "text": "Requisitos Previos\nNo se requieren conocimientos previos de programaci√≥n. Sin embargo, se recomienda tener una disposici√≥n positiva hacia el aprendizaje y la resoluci√≥n de problemas."
  },
  {
    "objectID": "posts/Getting Started/index.html#funciones",
    "href": "posts/Getting Started/index.html#funciones",
    "title": "Getting Started",
    "section": "",
    "text": "Las funciones en Python son bloques de c√≥digo reutilizables que permiten estructurar y organizar mejor los programas. Se definen usando la palabra clave def y pueden aceptar argumentos y devolver valores.\n\n# Py a√±ade return None al final de cualquier definici√≥n de funci√≥n sin sentencia return:\ndef Saludo(nombre):\n    print(\"Hola \" + nombre)\n\nspam = Saludo(\"Carlos\")\nNone == spam\n\nHola Carlos\n\n\nTrue\n\n\nEn un programa de Python, hay exactamente un √∫nico √°mbito global. Este √°mbito global es el contexto en el que las variables globales se definen y existen a lo largo de la ejecuci√≥n del programa.\n\nEn cuanto a los √°mbitos locales, el n√∫mero de estos puede variar. Cada vez que se define y se llama a una funci√≥n, se crea un nuevo √°mbito local. Por lo tanto, el n√∫mero de √°mbitos locales depende del n√∫mero de funciones (incluidas las funciones anidadas) y m√©todos que se llaman durante la ejecuci√≥n del programa.\n\n\n# Las variables locales no pueden utilizarse en el √°mbito global:\ndef getPI():\n    PI = 3.1415\ngetPI()\nprint(PI)\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[70], line 5\n      3     PI = 3.1415\n      4 getPI()\n----&gt; 5 print(PI)\n\nNameError: name 'PI' is not defined\n\n\n\n\n# Los √°mbitos locales no pueden utilizar variables de otros √°mbitos locales:\ndef a():\n    phone = 444\n    b()\n    print(phone)\ndef b():\n    phone = 555\na()\n\n444\n\n\n\n# Las variables globales pueden leerse desde un √°mbito local:\ndef a():\n    print(cte)\ncte = 1234\na()\nprint(cte)\n\n1234\n1234\n\n\n\n# Si necesitas modificar una variable global desde dentro de una funci√≥n:\ndef a():\n    global cte\n    cte = 'Ahora soy una Variable Global'\n\ncte = 'Global'\na()\nprint(cte)\n\nAhora soy una Variable Global\n\n\n\n# Funciones con Valores por Defecto:\ndef saludar(nombre = \"Paola\"):\n    print(f\"¬°Hola, {nombre}!\")\n\nsaludar()\nsaludar(\"Pedro\")\n\n¬°Hola, Paola!\n¬°Hola, Pedro!\n\n\n\n# Funciones con Varios Valores de Retorno:\ndef operaciones(a, b):\n    suma  = a + b\n    resta = a - b\n    return suma, resta\n\nsuma, resta = operaciones(10, 2)\nprint(f\"Suma: {suma}\\t| Resta: {resta}\")\n\nSuma: 12    | Resta: 8\n\n\n\n# Evitar que un programa se bloquee cuando recibe un error:\ndef a(b):\n    try:\n        return 1/b\n    except ZeroDivisionError:\n        print('Error: b debe ser diferente de 0.')\nprint(a(2))\nprint(a(0))\n\n0.5\nError: b debe ser diferente de 0.\nNone\n\n\n\n\nEl par√°metro args se usa en las funciones para pasar un n√∫mero variable de argumentos posicionales. Dentro de la funci√≥n, args es una tupla que contiene todos los argumentos posicionales proporcionados.\nCaracter√≠sticas:\n\nPermite pasar una cantidad variable de argumentos a una funci√≥n.\nLos argumentos se agrupan en una tupla dentro de la funci√≥n.\n\n\ndef imprimir_argumentos(*args):\n    for i, arg in enumerate(args):\n        print(f\"Argumento {i}: {arg}\")\n\nimprimir_argumentos('a', 'b', 'c')\n\nArgumento 0: a\nArgumento 1: b\nArgumento 2: c\n\n\n\n\n\nEl par√°metro kwargs se usa para pasar un n√∫mero variable de argumentos con nombre (palabra clave). Dentro de la funci√≥n, kwargs es un diccionario que contiene todos los argumentos con nombre proporcionados.\nCaracter√≠sticas:\n\nPermite pasar una cantidad variable de argumentos con nombre a una funci√≥n.\nLos argumentos se agrupan en un diccionario dentro de la funci√≥n.\n\n\ndef mostrar_info(**kwargs):\n    for key, value in kwargs.items():\n        print(f\"{key}: {value}\")\n\nmostrar_info(nombre = \"Alice\", edad = 30, ciudad = \"Nueva York\")\n\nnombre: Alice\nedad: 30\nciudad: Nueva York\n\n\n\n# Ejemplo combinado:\ndef combinar(*args, **kwargs):\n    print(\"Argumentos posicionales:\", args)\n    print(\"Argumentos con nombre:\", kwargs)\n\ncombinar(1, 2, 3, a = \"Uno\", b = \"Dos\", c = \"Tres\")\n\nArgumentos posicionales: (1, 2, 3)\nArgumentos con nombre: {'a': 'Uno', 'b': 'Dos', 'c': 'Tres'}\n\n\n\n\n\nSon funciones an√≥nimas y de una sola l√≠nea que pueden ser definidas usando la palabra clave lambda argumentos: expresi√≥n. Son especialmente √∫tiles cuando se necesita una funci√≥n peque√±a y desechable que se puede definir en una expresi√≥n.\n\ncuadrado = lambda x: x ** 2\nprint(cuadrado(5))\n\nmultiplicar = lambda x, y: x * y\nprint(multiplicar(4, 6))\n\n25\n24\n\n\nUso con Funciones Integradas\nLas funciones lambda son especialmente √∫tiles cuando se combinan con ciertas funciones integradas de Python.\n\nmap(): Aplica una funci√≥n a cada √≠tem de un iterable (como una lista) y devuelve un nuevo iterable con los resultados.\n\n\nnumeros = list(range(11))\ncuadrados = map(lambda x: x**2, numeros)\nprint(list(cuadrados))\n\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\n\n\nfilter(): Filtra un iterable, permitiendo s√≥lo los √≠tems que coincidan con una condici√≥n.\n\n\npares = filter(lambda x: x%2 == 0, numeros)\nprint(list(pares))\n\n[0, 2, 4, 6, 8, 10]\n\n\n\nprint(list(filter(lambda x: (x % 2 == 0) and (x &gt; 7), numeros)))\n\n[8, 10]\n\n\n\nreduce(): Aplica una funci√≥n a los √≠tems de un iterable, acumulando el resultado.\n\n\nfrom functools import reduce\n\nsuma_total = reduce(lambda x,y: x + y, numeros)\nprint(suma_total)\n\n55\n\n\n\nsorted(): Las funciones lambda pueden ser usadas para personalizar el ordenamiento de listas.\n\n\ncoordenadas = [(1, 2), (3, 4), (5, 1), (7, 3)]\nordenado = sorted(coordenadas, key = lambda x: x[1])\nprint(ordenado)\n\n[(5, 1), (1, 2), (7, 3), (3, 4)]\n\n\n\nNotas = [\n    {'Nombre': 'Ana', 'Definitiva': 8},\n    {'Nombre': 'Juan', 'Definitiva': 6},\n    {'Nombre': 'Maria', 'Definitiva': 9}\n]\nprint(sorted(Notas, key = lambda x: x['Definitiva']))\n\n[{'Nombre': 'Juan', 'Definitiva': 6}, {'Nombre': 'Ana', 'Definitiva': 8}, {'Nombre': 'Maria', 'Definitiva': 9}]\n\n\nLimitaciones\n\nUna sola expresi√≥n: Las lambdas est√°n limitadas a una √∫nica expresi√≥n. No pueden contener declaraciones ni m√∫ltiples l√≠neas de c√≥digo.\nLegibilidad: Aunque √∫tiles para funciones cortas y simples, las lambdas pueden hacer el c√≥digo m√°s dif√≠cil de leer si se usan en exceso o de manera compleja.\n\n\n\n\nLos decoradores en Python son una herramienta poderosa que permite modificar el comportamiento de una funci√≥n o m√©todo. Los decoradores permiten envolver una funci√≥n en otra funci√≥n, lo que facilita a√±adir funcionalidades adicionales de una manera muy elegante y reutilizable.\n\ndef decorador(func):\n    def envoltura():\n        print(\"Antes de la funci√≥n\")\n        func()\n        print(\"Despu√©s de la funci√≥n\")\n    return envoltura\n@decorador\ndef f():\n    print(\"Funci√≥n original\")\nf()\n\nAntes de la funci√≥n\nFunci√≥n original\nDespu√©s de la funci√≥n\n\n\n\n# Registro de Llamadas a Funciones:\ndef registrar(func):\n    def envoltura(*args, **kwargs):\n        print(f\"Llamando a {func.__name__} con {args} y {kwargs}\")\n        resultado = func(*args, **kwargs)\n        print(f\"{func.__name__} retorn√≥ {resultado}\")\n        return resultado\n    return envoltura\n\n@registrar\ndef suma(a, b):\n    return a + b\n\nsuma(3, 5)\n\nLlamando a suma con (3, 5) y {}\nsuma retorn√≥ 8\n\n\n8\n\n\n\n# Contador de Llamadas a una Funci√≥n:\ndef contador_de_llamadas(func):\n    def wrapper(*args, **kwargs):\n        wrapper.llamadas += 1\n        print(f\"Llamada n√∫mero: {wrapper.llamadas}\")\n        return func(*args, **kwargs)\n    wrapper.llamadas = 0\n    return wrapper\n\n@contador_de_llamadas\ndef mi_funcion():\n    print(\"Ejecutando la funci√≥n\")\n\nmi_funcion()\nmi_funcion()\n\nLlamada n√∫mero: 1\nEjecutando la funci√≥n\nLlamada n√∫mero: 2\nEjecutando la funci√≥n\n\n\n\n# Medici√≥n de Tiempo de Ejecuci√≥n:\nimport time\ndef medir_tiempo(func):\n    def envoltura(*args, **kwargs):\n        inicio = time.time()\n        resultado = func(*args, **kwargs)\n        fin = time.time()\n        print(f\"{func.__name__} tom√≥ {fin - inicio} segundos\")\n        return resultado\n    return envoltura\n\n@medir_tiempo\ndef contar_hasta(numero):\n    for i in range(numero):\n        pass\n    return numero\n\ncontar_hasta(1000000)\n\ncontar_hasta tom√≥ 0.018638134002685547 segundos\n\n\n1000000\n\n\n\n# Memorizaci√≥n de Resultados:\ndef memoize(func):\n    cache = {}\n    def envoltura(*args):\n        if args in cache:\n            return cache[args]\n        resultado = func(*args)\n        cache[args] = resultado\n        return resultado\n    return envoltura\n\n@memoize\ndef fibonacci(n):\n    if n &lt;= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)\n\nprint(fibonacci(30))\n\n832040\n\n\n\n# Decoradores con Par√°metros:\ndef repetir(veces):\n    def decorador(func):\n        def envoltura(*args, **kwargs):\n            for _ in range(veces):\n                func(*args, **kwargs)\n        return envoltura\n    return decorador\n\n@repetir(3)\ndef saludar():\n    print(\"¬°Hola!\")\n\nsaludar()\n\n¬°Hola!\n¬°Hola!\n¬°Hola!\n\n\n\n\n\nEn Python, la documentaci√≥n de funciones se suele escribir utilizando docstrings, que son cadenas de texto que describen el prop√≥sito y el uso de una funci√≥n, m√©todo, clase o m√≥dulo.\ndef nombre_funcion(param1, param2):\n    \"\"\"\n    Descripci√≥n breve de lo que hace la funci√≥n.\n\n    Args:\n        param1 (tipo): Descripci√≥n de param1.\n        param2 (tipo): Descripci√≥n de param2.\n\n    Returns:\n        tipo: Descripci√≥n de lo que devuelve la funci√≥n.\n\n    Raises:\n        ExceptionType: Descripci√≥n de las excepciones que puede lanzar la funci√≥n.\n    \"\"\"\n    pass\n\ndef division(a, b):\n    \"\"\"\n    Divide a entre b.\n\n    Args:\n        a (float): El numerador.\n        b (float): El denominador.\n\n    Returns:\n        float: El resultado de la divisi√≥n.\n\n    Examples:\n        &gt;&gt;&gt; division(1, 2)\n        0.5\n        &gt;&gt;&gt; division(1, 10)\n        0.1\n\n    Raises:\n        ValueError: Si b es cero.\n        \n    \"\"\"\n    if b == 0:\n        raise ValueError(\"El denominador no puede ser cero.\")\n    return a / b\n\nhelp(division)\ndivision(1, 0)\n\nHelp on function division in module __main__:\n\ndivision(a, b)\n    Divide a entre b.\n\n    Args:\n        a (float): El numerador.\n        b (float): El denominador.\n\n    Returns:\n        float: El resultado de la divisi√≥n.\n\n    Examples:\n        &gt;&gt;&gt; division(1, 2)\n        0.5\n        &gt;&gt;&gt; division(1, 10)\n        0.1\n\n    Raises:\n        ValueError: Si b es cero.\n\n\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[93], line 27\n     24     return a / b\n     26 help(division)\n---&gt; 27 division(1, 0)\n\nCell In[93], line 23, in division(a, b)\n      2 \"\"\"\n      3 Divide a entre b.\n      4 \n   (...)\n     20     \n     21 \"\"\"\n     22 if b == 0:\n---&gt; 23     raise ValueError(\"El denominador no puede ser cero.\")\n     24 return a / b\n\nValueError: El denominador no puede ser cero.\n\n\n\nConvenciones de Formato\nHay varias convenciones para escribir docstrings. La m√°s com√∫n en Python es la convenci√≥n de estilo Google, pero tambi√©n existen otras como el estilo NumPy/SciPy y el estilo reStructuredText (reST), que es utilizado por Sphinx para generar documentaci√≥n.\n\nEstilo Google\n\n\ndef f(param1, param2):\n    \"\"\"\n    Una breve descripci√≥n de la funci√≥n.\n\n    Args:\n        param1 (int): El primer par√°metro.\n        param2 (str): El segundo par√°metro.\n\n    Returns:\n        bool: El valor de retorno.\n    \"\"\"\n    pass\n\n\nEstilo NumPy/SciPy\n\n\ndef f(param1, param2):\n    \"\"\"\n    Una breve descripci√≥n de la funci√≥n.\n\n    Parameters\n    ----------\n    param1 : int\n        El primer par√°metro.\n    param2 : str\n        El segundo par√°metro.\n\n    Returns\n    -------\n    bool\n        El valor de retorno.\n    \"\"\"\n    pass\n\n\nEstilo reStructuredText (reST)\n\n\ndef f(param1, param2):\n    \"\"\"\n    Una breve descripci√≥n de la funci√≥n.\n\n    :param param1: El primer par√°metro.\n    :type param1: int\n    :param param2: El segundo par√°metro.\n    :type param2: str\n    :returns: El valor de retorno.\n    :rtype: bool\n    \"\"\"\n    pass"
  },
  {
    "objectID": "posts/Getting Started/index.html#variables-especiales-y-√∫tiles",
    "href": "posts/Getting Started/index.html#variables-especiales-y-√∫tiles",
    "title": "Getting Started",
    "section": "",
    "text": "En Python, name es una variable especial que se define autom√°ticamente. Su valor depende de c√≥mo se ejecuta el archivo:\n\nSi el archivo se ejecuta directamente, name es igual a ‚Äúmain‚Äù.\nSi el archivo se importa como un m√≥dulo en otro archivo, name toma el nombre del archivo (sin la extensi√≥n .py).\n\n¬øPor qu√© usar if name == \"main\":?\nEl uso de esta construcci√≥n permite definir una secci√≥n de c√≥digo que solo se ejecutar√° cuando el archivo se ejecute directamente, y no cuando se importe como m√≥dulo. Esto es √∫til para escribir scripts que pueden funcionar tanto como programas independientes como m√≥dulos reutilizables.\n\n# mi_script.py\ndef saludo():\n    print(\"¬°Hola, Mundo!\")\n\nif __name__ == \"__main__\":\n    saludo()\n# Si ejecutas mi_script.py directamente, la salida ser√° ¬°Hola, Mundo!.\n# Si importas mi_script.py en otro archivo, no se ejecutar√° autom√°ticamente saludo().\n\n¬°Hola, Mundo!\n\n\n\n\n\nEl m√≥dulo sys proporciona acceso a algunos objetos utilizados o mantenidos por el int√©rprete de Python y a funciones que interaccionan fuertemente con el int√©rprete.\n\nimport sys\n\n# Lista en la que cada elemento es un argumento pasado al script\ndef main():\n    print(\"Nombre del script:\", sys.argv[0])\n    for i, arg in enumerate(sys.argv[1:], start = 1):\n        print(f\"Argumento {i}: {arg}\")\n\nif __name__ == \"__main__\":\n    main()\n\nNombre del script: C:\\Users\\Jason\\AppData\\Roaming\\Python\\Python312\\site-packages\\ipykernel_launcher.py\nArgumento 1: -f\nArgumento 2: C:\\Users\\Jason\\AppData\\Local\\Temp\\tmp9upt3ui7.json\nArgumento 3: --HistoryManager.hist_file=:memory:\n\n\n\n\n\nEl m√≥dulo os permite interactuar con el sistema operativo.\n\nimport os\n\n# Diccionario que contiene las variables de entorno del sistema\ndef mostrar_variables_entorno():\n    for clave, valor in os.environ.items():\n        print(f\"{clave}: {valor}\")\n\nif __name__ == \"__main__\":\n    mostrar_variables_entorno()\n\nALLUSERSPROFILE: C:\\ProgramData\nAPPDATA: C:\\Users\\Jason\\AppData\\Roaming\nCLICOLOR_FORCE: 1\nCOMMONPROGRAMFILES: C:\\Program Files\\Common Files\nCOMMONPROGRAMFILES(X86): C:\\Program Files (x86)\\Common Files\nCOMMONPROGRAMW6432: C:\\Program Files\\Common Files\nCOMPUTERNAME: JEISONALARCON\nCOMSPEC: C:\\Windows\\system32\\cmd.exe\nCURL_CA_BUNDLE: C:/PROGRA~1/R/R-44~1.0PA/etc/curl-ca-bundle.crt\nDENO_DOM_PLUGIN: C:\\PROGRA~1\\Quarto\\bin\\tools\\x86_64\\deno_dom\\plugin.dll\nDENO_NO_UPDATE_CHECK: 1\nDENO_TLS_CA_STORE: system,mozilla\nDISPLAY: :0\nDRIVERDATA: C:\\Windows\\System32\\Drivers\\DriverData\nEFC_5056: 1\nGFORTRAN_STDERR_UNIT: -1\nGFORTRAN_STDOUT_UNIT: -1\nGIT_ASKPASS: rpostback-askpass\nHOME: C:\\Users\\Jason\\OneDrive\\Documents\nHOMEDRIVE: C:\nHOMEPATH: \\Users\\Jason\nIPY_INTERRUPT_EVENT: 1116\nJPY_INTERRUPT_EVENT: 1116\nJPY_PARENT_PID: 852\nLOCALAPPDATA: C:\\Users\\Jason\\AppData\\Local\nLOGONSERVER: \\\\JEISONALARCON\nMPLBACKEND: module://matplotlib_inline.backend_inline\nMPLENGINE: tkAgg\nMSYS2_ENV_CONV_EXCL: R_ARCH\nNO_COLOR: TRUE\nNUMBER_OF_PROCESSORS: 16\nONEDRIVE: C:\\Users\\Jason\\OneDrive\nORIGINAL_XDG_CURRENT_DESKTOP: undefined\nOS: Windows_NT\nPATH: C:\\rtools44\\x86_64-w64-mingw32.static.posix\\bin;C:\\rtools44\\usr\\bin;C:\\Program Files\\R\\R-4.4.0patched\\bin\\x64;C:\\Program Files\\Quarto\\bin;C:\\Program Files\\Python312\\Scripts\\;C:\\Program Files\\Python312\\;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Windows\\System32\\OpenSSH\\;C:\\Program Files\\Git\\cmd;C:\\Users\\Jason\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\Jason\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;C:\\Users\\Jason\\AppData\\Local\\Programs\\MiKTeX\\miktex\\bin\\x64\\;C:\\Program Files\\Quarto\\bin;C:\\Program Files\\RStudio\\resources\\app\\bin\\postback\nPATHEXT: .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.PY;.PYW\nPROCESSOR_ARCHITECTURE: AMD64\nPROCESSOR_IDENTIFIER: AMD64 Family 25 Model 116 Stepping 1, AuthenticAMD\nPROCESSOR_LEVEL: 25\nPROCESSOR_REVISION: 7401\nPROGRAMDATA: C:\\ProgramData\nPROGRAMFILES: C:\\Program Files\nPROGRAMFILES(X86): C:\\Program Files (x86)\nPROGRAMW6432: C:\\Program Files\nPSMODULEPATH: C:\\Program Files\\WindowsPowerShell\\Modules;C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\nPUBLIC: C:\\Users\\Public\nPYDEVD_DISABLE_FILE_VALIDATION: 1\nPYTHONIOENCODING: utf-8\nPY_PYTHON: C:\\ProgramData\\miniconda3\\\nQUARTO_BIN_PATH: C:\\PROGRA~1\\Quarto\\bin\nQUARTO_DENO: C:\\PROGRA~1\\Quarto\\bin\\tools\\x86_64\\deno\nQUARTO_DOCUMENT_PATH: D:\\Documentos\\JOBS\\DNPE\\CursoPython\\posts\\Getting Started\nQUARTO_FIG_DPI: 192\nQUARTO_FIG_FORMAT: png\nQUARTO_FIG_HEIGHT: 5\nQUARTO_FIG_WIDTH: 7\nQUARTO_PROFILE: \nQUARTO_PROJECT_ROOT: D:\\Documentos\\JOBS\\DNPE\\CursoPython\nQUARTO_PYTHON: C:\\ProgramData\\miniconda3\\\nQUARTO_RENDER_TOKEN: f20dd7d5-943c-414a-9790-0d782f256425\nQUARTO_SHARE_PATH: C:\\PROGRA~1\\Quarto\\share\nRETICULATE_PYTHON: C:\\ProgramData\\miniconda3\\\nRMARKDOWN_MATHJAX_PATH: C:/Program Files/RStudio/resources/app/resources/mathjax-27\nRSTUDIO: 1\nRSTUDIO_CHILD_PROCESS_PANE: job\nRSTUDIO_CLI_HYPERLINKS: true\nRSTUDIO_CONSOLE_COLOR: 256\nRSTUDIO_CONSOLE_WIDTH: 193\nRSTUDIO_DESKTOP_EXE: C:\\Program Files\\RStudio\\rstudio.exe\nRSTUDIO_MSYS_SSH: C:/Program Files/RStudio/resources/app/bin/msys-ssh-1000-18\nRSTUDIO_PANDOC: C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools\nRSTUDIO_PROGRAM_MODE: desktop\nRSTUDIO_SESSION_PID: 9388\nRSTUDIO_SESSION_PORT: 37453\nRSTUDIO_USER_IDENTITY: Jason\nRSTUDIO_WINUTILS: C:/Program Files/RStudio/resources/app/bin/winutils\nRS_LOCAL_PEER: \\\\.\\pipe\\37453-rsession\nRS_LOG_LEVEL: WARN\nRS_RPOSTBACK_PATH: C:/Program Files/RStudio/resources/app/bin/rpostback.exe\nRS_SHARED_SECRET: 3a833e1a-f1b9-434a-8e77-092fec2a585e\nRTOOLS44_HOME: C:\\rtools44\nR_ARCH: /x64\nR_CLI_HAS_HYPERLINK_IDE_HELP: true\nR_CLI_HAS_HYPERLINK_IDE_RUN: true\nR_CLI_HAS_HYPERLINK_IDE_VIGNETTE: true\nR_COMPILED_BY: gcc 13.2.0\nR_DOC_DIR: C:/PROGRA~1/R/R-44~1.0PA/doc\nR_HOME: C:/PROGRA~1/R/R-44~1.0PA\nR_INCLUDE_DIR: C:/PROGRA~1/R/R-44~1.0PA/include\nR_LIBS_SITE: C:/PROGRA~1/R/R-44~1.0PA/site-library\nR_LIBS_USER: C:\\Users\\Jason\\AppData\\Local/R/win-library/4.4\nR_PLATFORM: \nR_RTOOLS44_PATH: C:\\rtools44/x86_64-w64-mingw32.static.posix/bin;C:\\rtools44/usr/bin\nR_RUNTIME: ucrt\nR_SHARE_DIR: C:/PROGRA~1/R/R-44~1.0PA/share\nR_USER: C:/Users/Jason/OneDrive/Documents\nSESSIONNAME: Console\nSSH_ASKPASS: rpostback-askpass\nSYSTEMDRIVE: C:\nSYSTEMROOT: C:\\Windows\nTEMP: C:\\Users\\Jason\\AppData\\Local\\Temp\nTERM: xterm-color\nTMP: C:\\Users\\Jason\\AppData\\Local\\Temp\nUSERDOMAIN: JEISONALARCON\nUSERDOMAIN_ROAMINGPROFILE: JEISONALARCON\nUSERNAME: Jason\nUSERPROFILE: C:\\Users\\Jason\nWINDIR: C:\\Windows\nPYDEVD_USE_FRAME_EVAL: NO\nCLICOLOR: 1\nFORCE_COLOR: 1\nPAGER: cat\nGIT_PAGER: cat"
  },
  {
    "objectID": "posts/Data Manipulation P1/index.html",
    "href": "posts/Data Manipulation P1/index.html",
    "title": "Data Manipulation P1",
    "section": "",
    "text": "NumPy es una biblioteca fundamental para la computaci√≥n cient√≠fica en Python. Proporciona soporte para arreglos y matrices multidimensionales, junto con una colecci√≥n de funciones matem√°ticas para operar con estos arreglos.\n# pip install numpy\nimport numpy as np"
  },
  {
    "objectID": "posts/Data Manipulation P1/index.html#creaci√≥n-de-arrays",
    "href": "posts/Data Manipulation P1/index.html#creaci√≥n-de-arrays",
    "title": "Data Manipulation P1",
    "section": "Creaci√≥n de Arrays",
    "text": "Creaci√≥n de Arrays\nB√°sicamente, hay cuatro tipos num√©ricos en el c√≥digo NumPy, y cada uno puede tener algunos tama√±os diferentes.\n\n\n\nName\n# of Bits\nPython Type\nNumPy Type\n\n\n\n\nInteger\n64\nint\nnp.int_\n\n\nBooleans\n8\nbool\nnp.bool_\n\n\nFloat\n64\nfloat\nnp.float_\n\n\nComplex\n128\ncomplex\nnp.complex_\n\n\n\n\n# Unidimensionales\na = np.array([1, 2, 3, 4, 5], dtype = 'float64'); print(a); print(a.dtype)\n\n[1. 2. 3. 4. 5.]\nfloat64\n\n\n\n# Bidimensionales\nb = np.array([[1, 2, 3], [4, np.NaN, 6]]); print(b)\nprint(f'''\n  b.ndim : { b.ndim }\n  b.shape: { b.shape }\n  b.size : { b.size }\n''')\n\n[[ 1.  2.  3.]\n [ 4. nan  6.]]\n\n  b.ndim : 2\n  b.shape: (2, 3)\n  b.size : 6\n\n\n\n\nnp.array([\"lunes\", \"martes\", \"miercoles\"], dtype = str).itemsize\n\ndata = np.array([\n  (\"joe\", 32, 6),\n  (\"mary\", 15, 20),\n  (\"felipe\", 80, 100),\n  (\"beyonce\", 38, 9001),\n], dtype=[(\"name\", str, 10), (\"age\", int), (\"power\", int)])\n\ndata[data[\"power\"] &gt; 9000][\"name\"]\nnp.sort(data[data[\"age\"] &gt; 20], order = \"power\")[\"name\"]\n\narray(['joe', 'felipe', 'beyonce'], dtype='&lt;U10')"
  },
  {
    "objectID": "posts/Data Manipulation P1/index.html#arrays-con-valores-iniciales-espec√≠ficos",
    "href": "posts/Data Manipulation P1/index.html#arrays-con-valores-iniciales-espec√≠ficos",
    "title": "Data Manipulation P1",
    "section": "Arrays con Valores Iniciales Espec√≠ficos",
    "text": "Arrays con Valores Iniciales Espec√≠ficos\n\n# Array de ceros\nc = np.zeros((3, 4)); print(c)\n\n[[0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]]\n\n\n\n# Array de unos\nd = np.ones((2, 3)); print(d)\n\n[[1. 1. 1.]\n [1. 1. 1.]]\n\n\n\n# Matriz identidad\ne = np.eye(4); print(e)\n\n[[1. 0. 0. 0.]\n [0. 1. 0. 0.]\n [0. 0. 1. 0.]\n [0. 0. 0. 1.]]\n\n\n\n# Array de un valor constante\nf = np.full((3, 3), 7); print(f)\n\n[[7 7 7]\n [7 7 7]\n [7 7 7]]\n\n\n\n# Array con valores aleatorios\ng = np.random.random((2, 2)); print(g)\n\n[[0.25067324 0.02850246]\n [0.09238464 0.33715183]]\n\n\n\n# Array de un rango de valores\nh = np.arange(10, 20, 2); print(h)\nprint(np.arange(32).reshape(4, 1, 8))\n\n[10 12 14 16 18]\n[[[ 0  1  2  3  4  5  6  7]]\n\n [[ 8  9 10 11 12 13 14 15]]\n\n [[16 17 18 19 20 21 22 23]]\n\n [[24 25 26 27 28 29 30 31]]]\n\n\n\n# Array con un n√∫mero espec√≠fico de valores igualmente espaciados\ni = np.linspace(0, 1, 5); print(i)\n\n[0.   0.25 0.5  0.75 1.  ]"
  },
  {
    "objectID": "posts/Data Manipulation P1/index.html#manipulaci√≥n-de-arrays",
    "href": "posts/Data Manipulation P1/index.html#manipulaci√≥n-de-arrays",
    "title": "Data Manipulation P1",
    "section": "Manipulaci√≥n de Arrays",
    "text": "Manipulaci√≥n de Arrays\n\na = np.array([1, 2, 3, 4, 5])\nprint(a[0])    # Primer elemento\nprint(a[1:3])  # Subarray del √≠ndice 1 al 2\nprint(a[-1])   # √öltimo elemento\n\n1\n[2 3]\n5\n\n\n\na = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nprint(a[1, 2])      # Elemento en la fila 1, columna 2\nprint(a[:, 1])      # Todas las filas, segunda columna\nprint(a[1:3, 1:3])  # Subarray desde la fila 1 a 2 y columna 1 a 2\n\n6\n[2 5 8]\n[[5 6]\n [8 9]]\n\n\n\na = np.array([1, 2, 3, 4, 5])\na[0] = 10\nprint(a)\n\n[10  2  3  4  5]\n\n\n\na = np.array([1.1, 2.2])\na = np.append(a, [3.9, 4.6])\nprint(a)\n\n[1.1 2.2 3.9 4.6]\n\n\n\na = np.insert(a, 1, values = [1.8, 2.0]); print(a)\n\n[1.1 1.8 2.  2.2 3.9 4.6]\n\n\n\na = np.delete(a, [1, 2]); print(a)\n\n[1.1 2.2 3.9 4.6]\n\n\n\na = np.array([[1, 2, 3], [4, 5, 6]])\n\nprint(a.ravel())          # Flatten the array\nprint(a.reshape((3, 2)))  # Reshape, but don‚Äôt change data\n\n[1 2 3 4 5 6]\n[[1 2]\n [3 4]\n [5 6]]\n\n\n\na = np.array([1, 2, 3])\nb = np.array([4, 5, 6])\nc = np.concatenate((a, b), axis = None)\nprint(c)\n\n# Dividir un array en m√∫ltiples subarrays\nd = np.split(c, 3)\nprint(d)\n\n[1 2 3 4 5 6]\n[array([1, 2]), array([3, 4]), array([5, 6])]\n\n\n\n# M√°scaras Booleanas\na = np.array([1, 2, 3, 4, 5])\nmask = a &gt; 3\nprint(a[mask])\n\n[4 5]\n\n\n\na = np.array([5, 1, 2, 4, 3])\nprint(np.sort(a))\n\n[1 2 3 4 5]\n\n\n\na = np.array([1, 2, 2, 3, 3, 3])\nprint(np.unique(a))\nprint(np.bincount(a))\n\n[1 2 3]\n[0 1 2 3]"
  },
  {
    "objectID": "posts/Data Manipulation P1/index.html#operaciones-matem√°ticas",
    "href": "posts/Data Manipulation P1/index.html#operaciones-matem√°ticas",
    "title": "Data Manipulation P1",
    "section": "Operaciones Matem√°ticas",
    "text": "Operaciones Matem√°ticas\n\n# Elemento x Elemento\na = np.array([1, 2, 3])\nb = np.array([4, 5, 6])\nprint(5 * a)\nprint(1 + a)\nprint(2 % a)\nprint(a + b)\nprint(a * b)\nprint(a / b)\nprint(np.sqrt(a))\n\n[ 5 10 15]\n[2 3 4]\n[0 0 2]\n[5 7 9]\n[ 4 10 18]\n[0.25 0.4  0.5 ]\n[1.         1.41421356 1.73205081]\n\n\n\nb = np.append(b, [7]); print(a + b)\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[24], line 1\n----&gt; 1 b = np.append(b, [7]); print(a + b)\n\nValueError: operands could not be broadcast together with shapes (3,) (4,) \n\n\n\n\n# Funciones Agregadas\na = np.array([1, 2, 3, 4, 5])\nprint(f'''\n  np.sum(a) : { np.sum(a) }\n  np.mean(a): { np.mean(a) }\n  np.std(a) : { np.std(a) }\n  np.min(a) : { np.min(a) }\n  np.max(a) : { np.max(a) }\n''')\n# 2-D Arrays\nb = np.array([[1,2], [3,4], [5,6]])\nprint(b.sum(axis = None))\nprint(b.sum(axis = 0))\nprint(b.sum(axis = 1))\n\n\n  np.sum(a) : 15\n  np.mean(a): 3.0\n  np.std(a) : 1.4142135623730951\n  np.min(a) : 1\n  np.max(a) : 5\n\n21\n[ 9 12]\n[ 3  7 11]\n\n\n\n# Funciones con Matrices\na = np.array([[1, 2], [3, 4]])\nb = np.array([[5, 6], [7, 8]])\nprint(np.dot(a, b))\nprint(a.T) # Equivalente a -&gt; .transpose()\n\n[[19 22]\n [43 50]]\n[[1 3]\n [2 4]]\n\n\n\nimport matplotlib.pyplot as plt\nn_steps = 1000\nsteps = np.random.choice([-1, 1], n_steps)\nwalk = np.cumsum(steps)\n\nplt.plot(walk)\nplt.show()\n\n\n\n\n\n\n\n\n\n\nOtras\n\na = np.array([1, np.nan, np.inf, -np.inf, 5])\nprint(np.isnan(a))\nprint(np.isfinite(a))\nprint(np.isinf(a))\n\n[False  True False False False]\n[ True False False False  True]\n[False False  True  True False]\n\n\n\na = np.array([1, np.nan, np.inf, -np.inf, 5])\nprint(np.nan_to_num(a)) # Reemplaza NaN con ceros y +/- inf con grandes n√∫meros finitos.\n\n[ 1.00000000e+000  0.00000000e+000  1.79769313e+308 -1.79769313e+308\n  5.00000000e+000]\n\n\n\n\nnp.where()\nEs una funci√≥n muy vers√°til y poderosa en NumPy que se utiliza para realizar operaciones basadas en condiciones l√≥gicas. Su uso es esencial cuando se necesita aplicar l√≥gica condicional a arreglos, y se vuelve a√∫n m√°s √∫til cuando se combina con Pandas para manipular DataFrames.\n\na = np.array([1, -.1, 0, 1.2, -3.1])\nresult = np.where(a &gt; 0, 1, 0)\nprint(result)\n\n# Obtener los √≠ndices donde se cumple:\nindices = np.where(a &gt; 0)\nprint(indices)\n\n[1 0 0 1 0]\n(array([0, 3], dtype=int64),)\n\n\n\nimport pandas as pd\n# DataFrame de ejemplo\ndata = {\n    'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eva'],\n    'Age' : [24, 17, 30, 50, 15],\n    'Amount': [88, 92, 79, 95, 70]\n}\ndf = pd.DataFrame(data)\n\ndf['Adult'] = np.where(df['Age'] &gt;= 18, True, False)\ndf['Category'] = np.where(\n    df['Age'] &lt; 18, 'Minor',\n    np.where(df['Age'] &lt; 30, 'Young Adult', 'Adult')\n)\ndf['NewAmount'] = np.where(df['Adult'] == False, df['Amount']*0.5, df['Amount'])\n\nprint(df)\n\n      Name  Age  Amount  Adult     Category  NewAmount\n0    Alice   24      88   True  Young Adult       88.0\n1      Bob   17      92  False        Minor       46.0\n2  Charlie   30      79   True        Adult       79.0\n3    David   50      95   True        Adult       95.0\n4      Eva   15      70  False        Minor       35.0\n\n\nBeneficios:\n\nEficiencia: Es muy r√°pido porque realiza operaciones vectorizadas, aprovechando la eficiencia de NumPy.\nFlexibilidad: Permite aplicar l√≥gica condicional compleja en una sola l√≠nea de c√≥digo.\nCompatibilidad: Se integra perfectamente con Pandas, facilitando la manipulaci√≥n de DataFrames."
  },
  {
    "objectID": "posts/Data Manipulation P1/index.html#ox",
    "href": "posts/Data Manipulation P1/index.html#ox",
    "title": "Data Manipulation P1",
    "section": "Ox",
    "text": "Ox\n\na = np.array([1, np.nan, np.inf, -np.inf, 5])\nprint(np.isnan(a))\nprint(np.isfinite(a))\nprint(np.isinf(a))\n\n[False  True False False False]\n[ True False False False  True]\n[False False  True  True False]\n\n\n\na = np.array([1, np.nan, np.inf, -np.inf, 5])\nprint(np.nan_to_num(a)) # Reemplaza NaN con ceros y +/- inf con grandes n√∫meros finitos.\n\n[ 1.00000000e+000  0.00000000e+000  1.79769313e+308 -1.79769313e+308\n  5.00000000e+000]\n\n\n\nnp.where()\nEs una funci√≥n muy vers√°til y poderosa en NumPy que se utiliza para realizar operaciones basadas en condiciones l√≥gicas. Su uso es esencial cuando se necesita aplicar l√≥gica condicional a arreglos, y se vuelve a√∫n m√°s √∫til cuando se combina con Pandas para manipular DataFrames.\n\na = np.array([1, -.1, 0, 1.2, -3.1])\nresult = np.where(a &gt; 0, 1, 0)\nprint(result)\n\n# Obtener los √≠ndices donde se cumple:\nindices = np.where(a &gt; 0)\nprint(indices)\n\n[1 0 0 1 0]\n(array([0, 3], dtype=int64),)\n\n\n\nimport pandas as pd\n# DataFrame de ejemplo\ndata = {\n    'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eva'],\n    'Age' : [24, 17, 30, 50, 15],\n    'Amount': [88, 92, 79, 95, 70]\n}\ndf = pd.DataFrame(data)\n\ndf['Adult'] = np.where(df['Age'] &gt;= 18, True, False)\ndf['Category'] = np.where(\n    df['Age'] &lt; 18, 'Minor',\n    np.where(df['Age'] &lt; 30, 'Young Adult', 'Adult')\n)\ndf['Amount'] = np.where(df['Adult'] == False, df['Amount']*0.4, df['Amount'])\n\nprint(df)\n\n      Name  Age  Amount  Adult     Category\n0    Alice   24    88.0   True  Young Adult\n1      Bob   17    36.8  False        Minor\n2  Charlie   30    79.0   True        Adult\n3    David   50    95.0   True        Adult\n4      Eva   15    28.0  False        Minor\n\n\nBeneficios:\n\nEficiencia: np.where() es muy r√°pido porque realiza operaciones vectorizadas, aprovechando la eficiencia de NumPy.\nFlexibilidad: Permite aplicar l√≥gica condicional compleja en una sola l√≠nea de c√≥digo.\nCompatibilidad: Se integra perfectamente con Pandas, facilitando la manipulaci√≥n de DataFrames."
  },
  {
    "objectID": "posts/Getting Started/index.html#python-vs.-r",
    "href": "posts/Getting Started/index.html#python-vs.-r",
    "title": "Getting Started",
    "section": "",
    "text": "cadena = \"Hola, Mundo!\"\n# Convertir a min√∫sculas\nprint(cadena.lower())                     # tolower(cadena)\n\n# Reemplazar caracteres\nprint(cadena.replace(\"Mundo\", \"Python\"))  # sub(\"Mundo\", \"R\", cadena)\n\n# Dividir cadenas\nprint(cadena.split(\", \"))                 # strsplit(cadena, \", \")\n\n# Comprensiones de Listas\nprint([x ** 2 for x in range(10)])        # sapply(0:9, function(x) x^2)\n\n\n\n\ndef exterior(x):\n    def interior(y):\n        return x + y\n    return interior\n\nprint(exterior(5)) \n\n#| eval: false\nexterior &lt;- function(x) {\n    interior &lt;- function(y) {\n        x + y\n    }\n    interior\n}\n\nexterior(5)\n\n\n\n\nsexo = [\"M\", \"F\", \"F\", \"M\", \"M\"]\nniveles = {\"M\": \"Male\", \"F\": \"Female\"}\nprint([niveles[s] for s in sexo])\n\n#| eval: false\nsexo &lt;- factor(c(\"M\", \"F\", \"F\", \"M\", \"M\"))\nlevels(sexo) &lt;- c(\"Female\", \"Male\")\nprint(sexo)\n\n\n\n\nclass Coche:\n    def __init__(self, marca, modelo):\n        self.marca = marca\n        self.modelo = modelo\n    \n    def descripcion(self):\n        return f\"Coche: {self.marca} {self.modelo}\"\n\nmi_coche = Coche(\"Toyota\", \"Corolla\")\nprint(mi_coche.descripcion())  # Coche: Toyota Corolla\n\n#| eval: false\nsetClass(\"Coche\",\n         slots = list(marca = \"character\", modelo = \"character\"))\n\nsetMethod(\"initialize\", \"Coche\",\n          function(.Object, marca, modelo) {\n            .Object@marca &lt;- marca\n            .Object@modelo &lt;- modelo\n            .Object\n          })\n\nsetMethod(\"descripcion\", \"Coche\",\n          function(object) {\n            paste(\"Coche:\", object@marca, object@modelo)\n          })\n\nmi_coche &lt;- new(\"Coche\", marca = \"Toyota\", modelo = \"Corolla\")\ndescripcion(mi_coche)  # \"Coche: Toyota Corolla\"\nPython Enhancement Proposal (PEP): https://peps.python.org/pep-0008/\nhttps://docs.python.org/es/3/library/trace.html python -m trace ‚Äìcount -C . somefile.py Esto ejecutar√° somefile.py y generar√° listados anotados de todos los m√≥dulos de Python importados durante la ejecuci√≥n en el directorio actual.\nhttps://jjallaire.github.io/pydata-quarto-dashboards/#/learning-more\n\n# import numpy as np\n# import matplotlib.pyplot as plt\n# import pandas as pd\n# import seaborn as sns\n# import statsmodels as sm\n#\n# pd.options.display.max_columns = 20\n# pd.options.display.max_rows = 20\n# pd.options.display.max_colwidth = 80\n# np.set_printoptions(precision = 4, suppress = True)"
  }
]