[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Python Course",
    "section": "",
    "text": "Machine Learning\n\n\n\n\n\n\nScikit-Learn\n\n\nTensorFlow\n\n\nKeras\n\n\nPyTorch\n\n\nXGBoost\n\n\ntheano\n\n\n\n\n\n\n\n\n\nAug 15, 2024\n\n\nJeison Alarc√≥n\n\n\n\n\n\n\n\n\n\n\n\n\nDatabase Operation\n\n\n\n\n\n\nDask\n\n\nPySpark\n\n\nHadoop\n\n\nKafka\n\n\nKoalas\n\n\n\n\n\n\n\n\n\nAug 1, 2024\n\n\nJeison Alarc√≥n\n\n\n\n\n\n\n\n\n\n\n\n\nDashboarding\n\n\n\n\n\n\nStreamlit\n\n\nDash\n\n\n\n\n\n\n\n\n\nJul 15, 2024\n\n\nJeison Alarc√≥n\n\n\n\n\n\n\n\n\n\n\n\n\nData Visualization\n\n\n\n\n\n\nPlotly\n\n\nSeaborn\n\n\nFolium\n\n\nMatplotlib\n\n\nBokeh\n\n\nAltair\n\n\n\n\n\n\n\n\n\nJul 1, 2024\n\n\nJeison Alarc√≥n\n\n\n\n\n\n\n\n\n\n\n\n\nStatistical Analysis P2\n\n\n\n\n\n\nSciPy\n\n\nStatsmodels\n\n\nPyStan\n\n\nPyMC3\n\n\nLifelines\n\n\nPingouin\n\n\n\n\n\n\n\n\n\nJun 30, 2024\n\n\nJeison Alarc√≥n\n\n\n\n\n\n\n\n\n\n\n\n\nStatistical Analysis P1\n\n\n\n\n\n\nSciPy\n\n\nStatsmodels\n\n\nPyStan\n\n\nPyMC3\n\n\nLifelines\n\n\nPingouin\n\n\n\n\n\n\n\n\n\nJun 29, 2024\n\n\nJeison Alarc√≥n\n\n\n\n\n\n\n\n\n\n\n\n\nData Manipulation P2\n\n\n\n\n\n\nNumpy\n\n\nPandas\n\n\nPolars\n\n\nModin\n\n\nVaex\n\n\nDatatable\n\n\nCuPy\n\n\n\n\n\n\n\n\n\nJun 16, 2024\n\n\nJeison Alarc√≥n\n\n\n\n\n\n\n\n\n\n\n\n\nData Manipulation P1\n\n\n\n\n\n\nNumpy\n\n\nPandas\n\n\nPolars\n\n\nModin\n\n\nVaex\n\n\nDatatable\n\n\nCuPy\n\n\n\n\n\n\n\n\n\nJun 15, 2024\n\n\nJeison Alarc√≥n\n\n\n\n\n\n\n\n\n\n\n\n\nGetting Started\n\n\n\n\n\n\nPython Interpreter\n\n\nBasics\n\n\nIPython\n\n\n\n\n\n\n\n\n\nJun 1, 2024\n\n\nJeison Alarc√≥n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Getting Started/index.html",
    "href": "posts/Getting Started/index.html",
    "title": "Getting Started",
    "section": "",
    "text": "Este curso es una introducci√≥n al trabajo con datos en Python, ofreciendo una visi√≥n general de las principales caracter√≠sticas de las estructuras de datos y librer√≠as incorporadas para la manipulaci√≥n de datos.\nEl enfoque principal del curso es el an√°lisis de datos basados en tablas y la preparaci√≥n de datos para conjuntos peque√±os que puedan manejarse en un ordenador personal. Para utilizar estas herramientas, a veces es necesario organizar los datos desordenados en una forma tabular. Python es ideal para esto, y cuanto m√°s familiarizado est√© con el lenguaje y sus tipos de datos, m√°s f√°cil ser√° preparar los conjuntos de datos para su an√°lisis.\n\n\n\n\n\nUsaremos la IDE de Rstudio (claramente no nos limitaremos a ella, usaremos Jupyter Notebook, VSC, Google Colab, etc). Pero m√°s adelante trabajaremos con ambos lenguajes (Python y R) simult√°neamente por lo cual nos servir√° realizar esta configuraci√≥n.\n\nPrimero necesita conocer con exactitud la ruta del ejecutable python.exe üí• que desea usar (sea con Python, conda, venv, etc). Para ello abra la consola de su int√©rprete (si usa un environment en particular no olvide ingresar a √©l üì•) y ejecute los comandos mostrados. Guarde dicha direcci√≥n en el portapapeles üìé.\n\n\npython\nimport sys\nprint(sys.executable)\n\n\n\nAhora que conoce la direcci√≥n correcta de su int√©rprete de Python üìá, dir√≠jase a la ruta mostrada en Rstudio. üëÄ En ocasiones no le saldr√° para ser seleccionado, por eso es mejor tener la ruta, p√©guela en la casilla y espere unos segundos ‚åö que lo reconozca antes de salir y darle guardar o aplicar (si realiza lo anterior de forma muy r√°pida no le quedar√°). Le pedir√° que reinicie sesi√≥n y ya deber√° quedar si vuelve a ingresar.\n\n\n\nPor √∫ltimo instalaremos una librer√≠a que nos proporcionar√° un conjunto completo de herramientas para la interoperabilidad entre Python y R üõ†Ô∏è.\n\n\ninstall.packages(\"reticulate\")\n\n\n\n\nComo usaremos dentro de los .qmd el par√°metro jupyter: python3, es necesario tener instalada dicha librer√≠a en su int√©rprete üíª, para lo cual ejecute (dentro de su kernel a usar y environment elegido):\n\nconda install jupyter\n# conda install numpy pandas scikit-learn matplotlib seaborn jupyter\n\nCompruebe que efectivamente haya sido descargado con:\n\nconda list\n\n\n\n\nS√≠ ejecuta el siguiente comando en el terminal ‚å®Ô∏è, deber√° obtener algo como lo siguiente:\nquarto check jupyter\n\nComo puede observar tenemos un problema ‚ö†Ô∏è y es que no qued√≥ el kernel que elegimos desde un inicio. Y el error mostrado se debe a que obviamente hay m√≥dulos que no hemos instalado en dicho int√©rprete que Quarto selecciona por defecto. Si desea obtener m√°s informaci√≥n de dicho error consulte: Quarto Uses Wrong Python Version.\nPara ‚Äúcorregir‚Äù lo anterior debemos apoyarnos de la documentaci√≥n oficial, la cual indica que se debe crear un archivo _environment (s√≠ as√≠ tal cual sin extensi√≥n alguna) y establecer los valores para QUARTO_PYTHON=\"C:\\ProgramData\\miniconda3\\\" ‚úîÔ∏è. As√≠ conseguimos que Quarto pueda establecer y fijar dicha configuraci√≥n local para nuestro .qmd.\n\nQUARTO_PYTHON se establece en: C:\\ProgramData\\miniconda3\\\nPY_PYTHON se establece en: C:\\ProgramData\\miniconda3\\\nRETICULATE_PYTHON se establece en: C:\\ProgramData\\miniconda3\\\n\nEl siguiente blog üìî explica demasiado bien lo que acabamos de hacer a mayor detalle, para renderizar un documento Quarto con un entorno espec√≠fico en RStudio/Posit.\nüü¢ Finalmente, cree y ejecute un nuevo .qmd, puede utilizar la plantilla ejemplo, y agregue el siguiente chunk para que verifique por su propia cuenta que, a pesar de que Quarto a nivel global est√° usando otro interprete, al definir el _environment queda con el que usted especifica.\n\nimport sys\nprint(sys.executable)\nprint(sys.prefix)\nprint (sys.version)\n\nC:\\ProgramData\\miniconda3\\pythonw.exe\nC:\\ProgramData\\miniconda3\n3.12.2 | packaged by Anaconda, Inc. | (main, Feb 27 2024, 17:28:07) [MSC v.1916 64 bit (AMD64)]\n\n\n\n\n\n\n\nüîñ Cualquier comando est√°ndar de shell puede ser utilizado directamente en IPython anteponiendo el car√°cter !. Por ejemplo,\n\n# : ....................... Shell Commands en IPython ........................ :\n!ls\n\nBooks\nLICENSE\nProfile.jpg\nPython Course.Rproj\n_environment\n_freeze\n_publish.yml\n_quarto.yml\n_site\nabout.qmd\nfiles\nindex.qmd\nposts\nstyles.css\n\n\n\ndirectory = !pwd\nprint(directory)\n\n['/d/Documentos/JOBS/DNPE/CursoPython']\n\n\n\nmessage = \"Imprimiendo un texto desde shell\"\n!echo {message}\n\nImprimiendo un texto desde shell\n\n\n\n\n\n\n\nüìê Identaci√≥n (no llaves {} ): Python utiliza espacios en blanco (tabuladores o espacios) para estructurar el c√≥digo en lugar de utilizar llaves como en muchos otros lenguajes como R y C++.\nüî£ No se necesita terminar con ;: El punto y coma puede usarse para separar m√∫ltiples sentencias en una sola l√≠nea. a = 1; b = 2; c = 3\nüè∑Ô∏è Las cadenas admiten tanto comillas simples ' como comillas dobles \": Se prefieren las comillas dobles, y para cadenas de varias l√≠neas con saltos de l√≠nea, puede utilizar comillas triples \"\"\".\nüÜé Vinculaci√≥n (binding): En otros lenguajes, la asignaci√≥n har√° que se copien los datos. En Python, hace que se refieran ahora al mismo objeto,\n\n\na = [1, 2, 3]\nb = a\na.append(4)\nb\n\n[1, 2, 3, 4]\n\n\n\n# Cuando se pasan objetos como argumentos a una funci√≥n, se crean nuevas variables\n# locales que hacen referencia a los objetos originales sin necesidad de copiarlos\ndef myAppend(lista, elemento):\n  lista.append(elemento)\ndata = [1, 2, 3]\nmyAppend(data, 4)\ndata\n\n[1, 2, 3, 4]\n\n\n\nüí™ Un lenguaje tipado: Cada objeto tiene un tipo (o clase) espec√≠fico, con la ventaja de que las variables no tienen un tipo inherente asociado a ellas.\n\n\na = 5      ; print(type(a))\na = \"cinco\"; print(type(a))\n\n&lt;class 'int'&gt;\n&lt;class 'str'&gt;\n\n\n\n\"5\" + 5\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[8], line 1\n----&gt; 1 \"5\" + 5\n\nTypeError: can only concatenate str (not \"int\") to str\n\n\n\n\na = 4.5\nb = 2\nprint(a / b)\nprint(isinstance(a, (int, float)))\n\n2.25\nTrue\n\n\n\n\n\n# Acceso a la Documentaci√≥n:\nhelp(len)\n\nHelp on built-in function len in module builtins:\n\nlen(obj, /)\n    Return the number of items in a container.\n\n\n\n\nletra = \"a\"\n# letra.&lt;Press Tab&gt;\ngetattr(letra, \"split\")\n\n&lt;function str.split(sep=None, maxsplit=-1)&gt;\n\n\n\n# Gui√≥n bajo '_' para salidas anteriores\n1+1\n2+2\nprint(_)\n\n&lt;built-in method split of str object at 0x00007FFFE31F1CE0&gt;\n\n\n\n# Acceder a las entradas anteriores (historial)\n%history -n 1-3\n\n   1:\nimport sys\nprint(sys.executable)\nprint(sys.prefix)\nprint (sys.version)\n   2:\n# : ....................... Shell Commands en IPython ........................ :\n!ls\n   3:\ndirectory = !pwd\nprint(directory)\n\n\n\n# : .......................... Timing Code Snippets .......................... :\n%timeit sum(range(100))   # IPython Magic Commands\n\n356 ns ¬± 3.41 ns per loop (mean ¬± std. dev. of 7 runs, 1,000,000 loops each)\n\n\n\n%%timeit                  # Cuando es m√°s complejo, baja el n√∫mero de repeticiones\ntotal = 0\nfor i in range(1000):\n  for j in range(1000):\n    total += i * (-1) ** j\n\n89.5 ms ¬± 1.51 ms per loop (mean ¬± std. dev. of 7 runs, 10 loops each)\n\n\n\n\n\n```{python}\n# Modulo.py\nPI = 3.14159\ndef cuadrado(x):\n return x ** 2\n```\n\nimport Modulo\nprint(Modulo.cuadrado(5))\npi = Modulo.PI\n# ......................................\nfrom Modulo import PI, cuadrado\ncuadrado(PI)\n# ......................................\nimport Modulo as m\nfrom Modulo import PI as kte, cuadrado as elevado\n\nr1 = m.cuadrado(kte); print(r1)\nr2 = elevado(6)     ; print(r2)\n\n\n\n\n\n\na = [1, 2, 3]\nb = a\nc = list(a) # Crea una copia\n\nprint(a is b)\nprint(a is not c)\n\nTrue\nTrue\n\n\n\na.append(4)\na == c\n\nFalse\n\n\n\n# Intercambiar los nombres de las variables:\na, b = 1, 2\n# tmp = a\n# a = b\n# b = tmp\nb, a = a, b\nprint(f'a = {a}, b = {b}')\n\na = 2, b = 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTipo\nDescripci√≥n\n\n\n\n\nNone\nEl valor ‚Äúnulo‚Äù de Python (solo existe una instancia del objeto None)\n\n\nstr\nTipo de cadena; contiene cadenas Unicode\n\n\nbytes\nDatos binarios en bruto\n\n\nfloat\nN√∫mero de punto flotante de doble precisi√≥n (nota que no hay un tipo double separado)\n\n\nbool\nUn valor booleano True o False\n\n\nint\nEntero de precisi√≥n arbitraria\n\n\n\n\n\n\nprint(int(False)); print(int(True))\nprint(True + False)\nprint(not not not not True)\nprint(bool(2024.75)) # Todo valor !=0 se convierte en True\nprint(bool(\".\"))     # Todo valor !=\"\" se convierte en True\n\n0\n1\n1\nTrue\nTrue\nTrue\n\n\n\n\n\nAbc.\n\na = \"Hola mundo \\\\&gt;\"\nb = \"\"\"\nEsta cadena es m√°s larga que\nabarca varias l√≠neas\n\"\"\"\nc = r\"D:\\Documentos\\Carpeta\"\n\nprint(a); print(b); print(c)\nb.count(\"\\n\")\n\nHola mundo \\&gt;\n\nEsta cadena es m√°s larga que\nabarca varias l√≠neas\n\nD:\\Documentos\\Carpeta\n\n\n3\n\n\n\n# Los strings en Python son inmutables: no se puede modificar una cadena\nprint(a[5])\na[5] = \"M\"\n\nm\n\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[21], line 3\n      1 # Los strings en Python son inmutables: no se puede modificar una cadena\n      2 print(a[5])\n----&gt; 3 a[5] = \"M\"\n\nTypeError: 'str' object does not support item assignment\n\n\n\n\na.replace(\"m\", \"M\")\n\n'Hola Mundo \\\\&gt;'\n\n\n\na       # Tras esta operaci√≥n, la variable no se modifica\n\n'Hola mundo \\\\&gt;'\n\n\n\nlist(a) # Las cadenas son una secuencia de caracteres Unicode\n\n['H', 'o', 'l', 'a', ' ', 'm', 'u', 'n', 'd', 'o', ' ', '\\\\', '&gt;']\n\n\n\n\nExisten varios m√©todos para formatear cadenas de texto, entre los cuales encontramos:\n\nOperador de Formato %\n\n\nNombre = \"Pepito\"\nEdad = 33 \nPi   = 3.141592\nprint(\"Hola, mi nombre es %s y tengo %d a√±os. Y s√© que pi vale: %.2f.\" % (Nombre, Edad, Pi))\n\nHola, mi nombre es Pepito y tengo 33 a√±os. Y s√© que pi vale: 3.14.\n\n\n\nM√©todo .format()\n\n\nprint(\"Hola, mi nombre es {} y tengo {} a√±os. Y s√© que pi vale: {:.2f}.\".format(Nombre, Edad, Pi))\nprint(\"Nombre: {name}, Edad: {age}\".format(name = \"Luis\", age = 33))\nprint(\"El {0} se encuentra en el {1} y el {1} se encuentra en el {0}.\".format(\"sol\", \"cielo\"))\n\nHola, mi nombre es Pepito y tengo 33 a√±os. Y s√© que pi vale: 3.14.\nNombre: Luis, Edad: 33\nEl sol se encuentra en el cielo y el cielo se encuentra en el sol.\n\n\n\n# 0:.3f El 1re valor ser√° un flotantes con 3 decimales\n# 1:s   El 2do valor ser√° un string\n# 2:d   El 3re valor ser√° un entero\ntemplate = \"{0:.3f} {1:s} equivalen a US${2:d}\"\ntemplate.format(3.960, \"pesos Colombianos\", 1) # Intente modificar el tipo de alguno de estos\n\n'3.960 pesos Colombianos equivalen a US$1'\n\n\n\nf-strings\n\n\nTasa   = 3.960\nMoneda = \"Colombianos\"\nf\"{Tasa:.4f} pesos {Moneda} equivalen a US${Tasa/Tasa}\"\n\n'3.9600 pesos Colombianos equivalen a US$1.0'\n\n\n\n# C√°lculos Dentro:\na = 5; b = 10\nprint(f\"La suma de {a} y {b} es {a + b}. Adem√°s a*b = {a*b}\")\n# Alinear Texto:\nprint(f\"{'izquierda':&lt;10} {'centrado':^10} {'derecha':&gt;10}\")\n# Mostrar N√∫meros en Diferentes Bases:\nNumero = 255\nprint(f\"Decimal: {Numero}, Binario: {Numero:b}, Hexadecimal: {Numero:x}, Octal: {Numero:o}\")\n# Incluir Expresiones y M√©todos:\nTxt = \"Amo Python\"\nprint(f\"El texto en may√∫sculas es {Txt.upper()}.\")\n# Combinaci√≥n con Diccionarios:\nPais = {\"nombre\": \"Colombia\", \"NoPoblacion\": 50}\nprint(f\"Pa√≠s: {Pais['nombre']}, Habitantes: {Pais['NoPoblacion']}\")\n# Incluir Llaves Literales:\nprint(f\"Este es un valor literal en llaves: {{Numero}}, y este es el valor de la variable: {Numero}.\")\n\nLa suma de 5 y 10 es 15. Adem√°s a*b = 50\nizquierda   centrado     derecha\nDecimal: 255, Binario: 11111111, Hexadecimal: ff, Octal: 377\nEl texto en may√∫sculas es AMO PYTHON.\nPa√≠s: Colombia, Habitantes: 50\nEste es un valor literal en llaves: {Numero}, y este es el valor de la variable: 255.\n\n\n\nM√©todo string.Template\n\n\nfrom string import Template\ntemplate = Template(\"Hola, mi nombre es $name y tengo $age a√±os.\")\nmensaje  = template.substitute(name = \"Pepito\", age = 33)\nprint(mensaje)\n\nHola, mi nombre es Pepito y tengo 33 a√±os.\n\n\n\n\n\n\n\n\n\n\n\nM√©todo\nSintaxis\nVentajas\nDesventajas\n\n\n\n\nOperador %\nHola, %s % ‚Äúmundo‚Äù\nSimple y familiar para quienes conocen C\nMenos flexible y m√°s propenso a errores\n\n\nM√©todo .format()\nHola, {}.format(‚Äúmundo‚Äù)\nMuy flexible, soporta nombres y posiciones\nSintaxis m√°s verbosa\n\n\nf-strings\nf\"Hola, {variable}\"\nMuy legible, permite expresiones dentro de {}\nDisponible solo en Python 3.6+\n\n\nstring.Template\nTemplate(\"Hola, $nombre\")\nSimple y seguro, f√°cil de leer\nMenos potente para formateo complejo\n\n\n\n\n\n\n\nAbc.\n\n\n\nAbc.\n\n\n\nAbc.\n\nfrom datetime import datetime, date, time\ndt = datetime(2024, 1, 31, 20, 30, 21)\n\ndt.day\ndt.date()\ndt.time()\ndt.strftime(\"%Y-%m-%d %H:%M\")\n\n'2024-01-31 20:30'\n\n\n\ndt_hour = dt.replace(minute = 0, second = 0)\ndt_hour\n\ndatetime.datetime(2024, 1, 31, 20, 0)\n\n\n\ndelta = datetime.now() - dt\ndelta\n\ndatetime.timedelta(days=159, seconds=84738, microseconds=777729)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nUna tupla es una secuencia ordenada de objetos de longitud fija e inmutable (una vez asignada no puede modificarse). La forma m√°s sencilla de crear una tupla es con una secuencia de valores separados por comas entre par√©ntesis.\n\n\n\ntup1 = (1, 2, 2)      # Pueden contener elementos repetidos\ntup2 = 4, 5, 6        # Los par√©ntesis pueden omitirse\nprint(tup1); print(tup2)\n\n(1, 2, 2)\n(4, 5, 6)\n\n\n\n# Se puede convertir cualquier secuencia o iterador\nprint( tuple([7, 8, 9]) )\nprint( tuple(\"Texto\") )\n\n(7, 8, 9)\n('T', 'e', 'x', 't', 'o')\n\n\n\ntupCompleja = (2, 4, 8), (3, 5)\nprint(tupCompleja)\ntupCompleja[0]\n\n((2, 4, 8), (3, 5))\n\n\n(2, 4, 8)\n\n\n\ntupMixta = tuple(['txt', [1, 2], True])\ntupMixta[1].append(3) # Si un objeto dentro de una tupla es mutable, se puede modificar\nprint(tupMixta)\ntupMixta[2] = False\n\n('txt', [1, 2, 3], True)\n\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[37], line 4\n      2 tupMixta[1].append(3) # Si un objeto dentro de una tupla es mutable, se puede modificar\n      3 print(tupMixta)\n----&gt; 4 tupMixta[2] = False\n\nTypeError: 'tuple' object does not support item assignment\n\n\n\n\nprint( tup1*2 + (20, 24) + ('year',) )\n\n(1, 2, 2, 1, 2, 2, 20, 24, 'year')\n\n\n\n# Desempaquetado (unpacking)\nuno, dos, tres = tup1\nprint(uno)\n(a, b, c), (d, e) = tupCompleja\nprint(a)\n\n1\n2\n\n\n\nseq = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nfor a, b, c in seq:\n    print(f'a = {a}, b = {b}, c = {c}')\n\na = 1, b = 2, c = 3\na = 4, b = 5, c = 6\na = 7, b = 8, c = 9\n\n\n\nfirst, second, *rest = (1, 2, 3, 4, 5)\nprint(f\"{first} || {second} || {rest}\")\n# El gui√≥n bajo (_) para descartar las variables no deseadas\nfirst, second, *_ = (1, 2, 3, 4, 5)\n\n1 || 2 || [3, 4, 5]\n\n\n\n# Si desea definir una tupla con un solo elemento  debe incluir una coma al final:\nmy_t = (3,)\nprint(my_t)\n# M√©todos\n(1, 0, 1, 1, 0).count(0)\n\n(3,)\n\n\n2\n\n\n\n\n\nUna lista es una colecci√≥n de elementos en un orden determinado. Puedes poner lo que quieras en una lista, y los elementos que la componen no tienen por qu√© estar relacionados de ninguna manera en particular. En Python, los corchetes [ ] indican una lista, y los elementos individuales de la lista est√°n separados por comas.\n\nLas posiciones de √≠ndice empiezan en 0, no en 1.\n\n\n\n\n\n\n\nNote\n\n\n\nLas listas son de longitud variable y su contenido puede modificarse (son mutables).\n\n\n\nmotorcycles = [0, \"honda\", \"yamaha\", \"suzuki\", None]\nprint(motorcycles)\nlist(tup1)\n\n[0, 'honda', 'yamaha', 'suzuki', None]\n\n\n[1, 2, 2]\n\n\n\n# A√±adir y eliminar elementos\nmotorcycles.append(\"ducati\")\nmotorcycles.insert(1, \"1\")\ndel motorcycles[-2]         # Removing an Item Using the del Statement\nmotorcycles.pop(0)          # Popping Items from Any Position\nprint(motorcycles)\n\n['1', 'honda', 'yamaha', 'suzuki', 'ducati']\n\n\n\n\n\n\n\n\nCaution\n\n\n\nLa inserci√≥n (insert) es m√°s costosa computacionalmente que la adici√≥n (append), ya que las referencias a los elementos subsiguientes deben desplazarse internamente para dejar espacio al nuevo elemento.\n\n\n\nmotorcycles.append(\"2\"); print(motorcycles)\nmotorcycles.remove(\"2\"); print(motorcycles) # Removing an Item by Value\n\n['1', 'honda', 'yamaha', 'suzuki', 'ducati', '2']\n['1', 'honda', 'yamaha', 'suzuki', 'ducati']\n\n\n\n# Sorting a List\nmotorcycles.sort(); print(motorcycles)\nmotorcycles.sort(reverse = True); print(motorcycles)\nprint(sorted(motorcycles)); print(motorcycles)\n\n['1', 'ducati', 'honda', 'suzuki', 'yamaha']\n['yamaha', 'suzuki', 'honda', 'ducati', '1']\n['1', 'ducati', 'honda', 'suzuki', 'yamaha']\n['yamaha', 'suzuki', 'honda', 'ducati', '1']\n\n\n\nprint(motorcycles.reverse())\nlen(motorcycles)\n\nNone\n\n\n5\n\n\n\n# Python returns another index error\nlistA = []\nprint(listA[-1])\n\n\n---------------------------------------------------------------------------\nIndexError                                Traceback (most recent call last)\nCell In[48], line 3\n      1 # Python returns another index error\n      2 listA = []\n----&gt; 3 print(listA[-1])\n\nIndexError: list index out of range\n\n\n\n\nsquares = []\nfor value in range(1, 11):\n    squares.append(value ** 2)\nprint(squares)\n# List Comprehensions\nsquares = [value**2 for value in range(1, 11)]\nprint(squares)\n\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\n\n\n# Slicing a List\nprint(motorcycles[0:3])\nprint(motorcycles[2:])\nprint(motorcycles[-2:])\n\n['1', 'ducati', 'honda']\n['honda', 'suzuki', 'yamaha']\n['suzuki', 'yamaha']\n\n\n\n# Copying a List\nonces = [\"pizza\", \"arepa\", \"empanada\"]\ntusOnces = onces[:]\nonces.append(\"bu√±uelo\")\ntusOnces.append(\"pan\")\nprint(onces); print(tusOnces)\n\n['pizza', 'arepa', 'empanada', 'bu√±uelo']\n['pizza', 'arepa', 'empanada', 'pan']\n\n\n\n# Mutable\nmi_lista = [1, 2, 3]\nprint(id(mi_lista))  # Ejemplo de ID: 139974841304960\nmi_lista.append(4)\nprint(id(mi_lista))  # Mismo ID: 139974841304960\n\n# Inmutable\nmi_tupla = (1, 2, 3)\nprint(id(mi_tupla))  # Ejemplo de ID: 139974841306352\nmi_tupla = (1, 2, 3, 4)\nprint(id(mi_tupla))  # Nuevo ID: 139974841306400\n\n2421895512832\n2421895512832\n2421895552896\n2421895626816\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nUn diccionario (conocido en otros lengujaes como maps o associative arrays) almacena una colecci√≥n de pares clave-valor, donde clave y valor son objetos Python. Cada clave est√° asociada a un valor, de modo que un valor puede ser convenientemente recuperado, insertado, modificado o eliminado dada una clave en particular. Tenga presente que las claves √∫nicas (no permiten duplicados en las claves).\n\n\n\nfisico = {'color': 'blanco', 'altura': 1.79}\nfisico[\"ojos\"] = \"azules\"\nfisico[\"peso\"] = 87\nprint(fisico)\n\n{'color': 'blanco', 'altura': 1.79, 'ojos': 'azules', 'peso': 87}\n\n\n\n# Diccionario con tuplas como claves\npuntos = {\n    (0, 0): \"Origen\",\n    (1, 2): \"Punto A\",\n    (3, 4): \"Punto B\"\n}\nprint(puntos[(1, 2)])\n\nPunto A\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThis is an example of an tip callout\n\n\n\n\n\n\n\n\n\n\nw = 5; x = 4; y = 3; z = 2\nif x &lt; 0:\n    print(\"x es negativo\")\nelif x == 0:\n    print(\"x es cero\")\nelif w &gt; x &gt; y &gt; z:\n    print(\"Los valores est√°n en orden\")\nelse:\n    print(\"Otro caso diferente\")\n\nLos valores est√°n en orden\n\n\n\n\n\n\nnumeros = [1, 2, None, 4, None, 5] # sum(numeros)\ntotal = 0\nfor value in numeros:\n    if value is None:\n        continue\n    if value == 4:\n        break       # La sentencia 'break' se usa para salir del bucle\n    total += value\ntotal\n\n3\n\n\n\n# 'break' s√≥lo termina el for m√°s interno, cualquier for externo continuar√°\nfor i in range(4):\n    for j in range(4):\n        if j &gt; i:\n            break\n        print((i, j))\n\n(0, 0)\n(1, 0)\n(1, 1)\n(2, 0)\n(2, 1)\n(2, 2)\n(3, 0)\n(3, 1)\n(3, 2)\n(3, 3)\n\n\n\n\n\nEsta estructura permite ejecutar repetidamente un bloque de c√≥digo mientras una condici√≥n especificada se eval√∫a como verdadera. Este ciclo es √∫til cuando no se sabe de antemano cu√°ntas veces se necesitar√° repetir el bloque de c√≥digo, a diferencia del ciclo for, que itera sobre una secuencia de elementos de longitud conocida.\n\nwhile True:\n    entrada = input(\"Escribe 'salir' para terminar: \")\n    if entrada.lower() == \"salir\":\n        break\n\n\n\n\nEs la sentencia no-op (o no hacer nada) de Python. Puede usarse en bloques en los que no se va a realizar ninguna acci√≥n. S√≥lo es necesaria porque Python utiliza espacios en blanco para delimitar los bloques.\nCuando la ejecuci√≥n del programa alcanza una sentencia continue, la ejecuci√≥n del programa salta inmediatamente al inicio del bucle y reeval√∫a la condici√≥n del bucle.\n\nwhile True:\n    print('¬øQui√©n eres t√∫?')\n    name = input()\n    if name != 'Juan':\n        continue\n    print('Hola Juan, cu√°l es tu contrase√±a (es un equipo)')\n    password = input()\n    if password == 'nacional':\n        break\nprint('Acceso Concedido.')\n\n\n\nPass (for, if): No realiza ninguna acci√≥n y se utiliza como marcador de lugar (placeholder para futura implementaci√≥n).\nContinue (for, while): Salta a la siguiente iteraci√≥n del bucle, omitiendo el resto del c√≥digo en la iteraci√≥n actual.\nBreak (if): Termina el bucle inmediatamente, saliendo de la estructura de control de flujo.\n\n\n\n\n\n\nprint(f\"{   range(10)   }\")\nprint(f\"{   range(1, 10)   }\")\nprint(f\"{   list(range(0, 20, 2))   }\")\nprint(f\"{   list(range(5, -1, -1))   }\")\n\nrange(0, 10)\nrange(1, 10)\n[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\n[5, 4, 3, 2, 1, 0]\n\n\n\n\n\n\n\n\n\nLas funciones en Python son bloques de c√≥digo reutilizables que permiten estructurar y organizar mejor los programas. Se definen usando la palabra clave def y pueden aceptar argumentos y devolver valores.\n\n# Py a√±ade return None al final de cualquier definici√≥n de funci√≥n sin sentencia return:\ndef Saludo(nombre):\n  print(\"Hola \" + nombre)\n\nspam = Saludo(\"Carlos\")\nNone == spam\n\nHola Carlos\n\n\nTrue\n\n\nEn un programa de Python, hay exactamente un √∫nico √°mbito global. Este √°mbito global es el contexto en el que las variables globales se definen y existen a lo largo de la ejecuci√≥n del programa.\n\nEn cuanto a los √°mbitos locales, el n√∫mero de estos puede variar. Cada vez que se define y se llama a una funci√≥n, se crea un nuevo √°mbito local. Por lo tanto, el n√∫mero de √°mbitos locales depende del n√∫mero de funciones (incluidas las funciones anidadas) y m√©todos que se llaman durante la ejecuci√≥n del programa.\n\n\n# Las variables locales no pueden utilizarse en el √°mbito global:\ndef getPI():\n  PI = 3.1415\ngetPI()\nprint(PI)\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[60], line 5\n      3   PI = 3.1415\n      4 getPI()\n----&gt; 5 print(PI)\n\nNameError: name 'PI' is not defined\n\n\n\n\n# Los √°mbitos locales no pueden utilizar variables de otros √°mbitos locales:\ndef a():\n  phone = 444\n  b()\n  print(phone)\ndef b():\n  phone = 555\na()\n\n444\n\n\n\n# Las variables globales pueden leerse desde un √°mbito local:\ndef a():\n  print(cte)\ncte = 1234\na()\nprint(cte)\n\n1234\n1234\n\n\n\n# Si necesitas modificar una variable global desde dentro de una funci√≥n:\ndef a():\n    global cte\n    cte = 'Ahora soy una Variable Global'\n\ncte = 'Global'\na()\nprint(cte)\n\nAhora soy una Variable Global\n\n\n\n# Funciones con Valores por Defecto:\ndef saludar(nombre = \"Paola\"):\n    print(f\"¬°Hola, {nombre}!\")\n\nsaludar()\nsaludar(\"Pedro\")\n\n¬°Hola, Paola!\n¬°Hola, Pedro!\n\n\n\n# Funciones con Varios Valores de Retorno:\ndef operaciones(a, b):\n    suma  = a + b\n    resta = a - b\n    return suma, resta\n\nsuma, resta = operaciones(10, 2)\nprint(f\"Suma: {suma}\\t| Resta: {resta}\")\n\nSuma: 12    | Resta: 8\n\n\n\n# Argumentos y Par√°metros Arbitrarios:\ndef sumar(*args):\n    return sum(args)\n\nprint(sumar(1, 2, 3))\nprint(sumar(4, 5))\n\n6\n9\n\n\n\n# Evitar que un programa se bloquee cuando recibe un error:\ndef a(b):\n    try:\n        return 1/b\n    except ZeroDivisionError:\n        print('Error: b debe ser diferente de 0.')\nprint(a(2))\nprint(a(0))\n\n0.5\nError: b debe ser diferente de 0.\nNone\n\n\n\n\nEl par√°metro args se usa en las funciones para pasar un n√∫mero variable de argumentos posicionales. Dentro de la funci√≥n, args es una tupla que contiene todos los argumentos posicionales proporcionados.\nCaracter√≠sticas: - Permite pasar una cantidad variable de argumentos a una funci√≥n. - Los argumentos se agrupan en una tupla dentro de la funci√≥n.\n\ndef imprimir_argumentos(*args):\n    for i, arg in enumerate(args):\n        print(f\"Argumento {i}: {arg}\")\n\nimprimir_argumentos('a', 'b', 'c')\n\nArgumento 0: a\nArgumento 1: b\nArgumento 2: c\n\n\n\n\n\nEl par√°metro kwargs se usa para pasar un n√∫mero variable de argumentos con nombre (palabra clave). Dentro de la funci√≥n, kwargs es un diccionario que contiene todos los argumentos con nombre proporcionados.\nCaracter√≠sticas: - Permite pasar una cantidad variable de argumentos con nombre a una funci√≥n. - Los argumentos se agrupan en un diccionario dentro de la funci√≥n.\n\ndef mostrar_info(**kwargs):\n    for key, value in kwargs.items():\n        print(f\"{key}: {value}\")\n\nmostrar_info(nombre=\"Alice\", edad=30, ciudad=\"Nueva York\")\n\nnombre: Alice\nedad: 30\nciudad: Nueva York\n\n\n\n# Ejemplo combinado:\ndef combinar(*args, **kwargs):\n    print(\"Argumentos posicionales:\", args)\n    print(\"Argumentos con nombre:\", kwargs)\n\ncombinar(1, 2, 3, a=\"Uno\", b=\"Dos\", c=\"Tres\")\n\nArgumentos posicionales: (1, 2, 3)\nArgumentos con nombre: {'a': 'Uno', 'b': 'Dos', 'c': 'Tres'}\n\n\n\n\n\nSon funciones an√≥nimas y de una sola l√≠nea que pueden ser definidas usando la palabra clave lambda argumentos: expresi√≥n. Son especialmente √∫tiles cuando se necesita una funci√≥n peque√±a y desechable que se puede definir en una expresi√≥n.\n\ncuadrado = lambda x: x ** 2\nprint(cuadrado(5))\n\nmultiplicar = lambda x, y: x * y\nprint(multiplicar(4, 6))\n\n25\n24\n\n\nUso con Funciones Integradas\nLas funciones lambda son especialmente √∫tiles cuando se combinan con ciertas funciones integradas de Python.\n\nmap(): Aplica una funci√≥n a cada √≠tem de un iterable (como una lista) y devuelve un nuevo iterable con los resultados.\n\n\nnumeros = list(range(11))\ncuadrados = map(lambda x: x**2, numeros)\nprint(list(cuadrados))\n\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\n\n\nfilter(): Filtra un iterable, permitiendo s√≥lo los √≠tems que coincidan con una condici√≥n.\n\n\npares = filter(lambda x: x%2 == 0, numeros)\nprint(list(pares))\n\n[0, 2, 4, 6, 8, 10]\n\n\n\nprint(list(filter(lambda x: (x % 2 == 0) and (x &gt; 7), numeros)))\n\n[8, 10]\n\n\n\nreduce(): Aplica una funci√≥n a los √≠tems de un iterable, acumulando el resultado.\n\n\nfrom functools import reduce\n\nsuma_total = reduce(lambda x,y: x + y, numeros)\nprint(suma_total)\n\n55\n\n\n\nsorted(): Las funciones lambda pueden ser usadas para personalizar el ordenamiento de listas.\n\n\ncoordenadas = [(1, 2), (3, 4), (5, 1), (7, 3)]\nordenado = sorted(coordenadas, key = lambda x: x[1])\nprint(ordenado)\n\n[(5, 1), (1, 2), (7, 3), (3, 4)]\n\n\n\nNotas = [\n    {'Nombre': 'Ana', 'Definitiva': 8},\n    {'Nombre': 'Juan', 'Definitiva': 6},\n    {'Nombre': 'Maria', 'Definitiva': 9}\n]\nprint(sorted(Notas, key = lambda x: x['Definitiva']))\n\n[{'Nombre': 'Juan', 'Definitiva': 6}, {'Nombre': 'Ana', 'Definitiva': 8}, {'Nombre': 'Maria', 'Definitiva': 9}]\n\n\nLimitaciones\n\nUna sola expresi√≥n: Las lambdas est√°n limitadas a una √∫nica expresi√≥n. No pueden contener declaraciones ni m√∫ltiples l√≠neas de c√≥digo.\nLegibilidad: Aunque √∫tiles para funciones cortas y simples, las lambdas pueden hacer el c√≥digo m√°s dif√≠cil de leer si se usan en exceso o de manera compleja.\n\n\n\n\nLos decoradores en Python son una herramienta poderosa que permite modificar el comportamiento de una funci√≥n o m√©todo. Los decoradores permiten envolver una funci√≥n en otra funci√≥n, lo que facilita a√±adir funcionalidades adicionales de una manera muy elegante y reutilizable.\n\ndef decorador(func):\n    def envoltura():\n        print(\"Antes de la funci√≥n\")\n        func()\n        print(\"Despu√©s de la funci√≥n\")\n    return envoltura\n@decorador\ndef f():\n    print(\"Funci√≥n original\")\nf()\n\nAntes de la funci√≥n\nFunci√≥n original\nDespu√©s de la funci√≥n\n\n\n\n# Registro de Llamadas a Funciones:\ndef registrar(func):\n    def envoltura(*args, **kwargs):\n        print(f\"Llamando a {func.__name__} con {args} y {kwargs}\")\n        resultado = func(*args, **kwargs)\n        print(f\"{func.__name__} retorn√≥ {resultado}\")\n        return resultado\n    return envoltura\n\n@registrar\ndef suma(a, b):\n    return a + b\n\nsuma(3, 5)\n\nLlamando a suma con (3, 5) y {}\nsuma retorn√≥ 8\n\n\n8\n\n\n\n# Contador de Llamadas a una Funci√≥n:\ndef contador_de_llamadas(func):\n    def wrapper(*args, **kwargs):\n        wrapper.llamadas += 1\n        print(f\"Llamada n√∫mero: {wrapper.llamadas}\")\n        return func(*args, **kwargs)\n    wrapper.llamadas = 0\n    return wrapper\n\n@contador_de_llamadas\ndef mi_funcion():\n    print(\"Ejecutando la funci√≥n\")\n\nmi_funcion()\nmi_funcion()\n\nLlamada n√∫mero: 1\nEjecutando la funci√≥n\nLlamada n√∫mero: 2\nEjecutando la funci√≥n\n\n\n\n# Medici√≥n de Tiempo de Ejecuci√≥n:\nimport time\ndef medir_tiempo(func):\n    def envoltura(*args, **kwargs):\n        inicio = time.time()\n        resultado = func(*args, **kwargs)\n        fin = time.time()\n        print(f\"{func.__name__} tom√≥ {fin - inicio} segundos\")\n        return resultado\n    return envoltura\n\n@medir_tiempo\ndef contar_hasta(numero):\n    for i in range(numero):\n        pass\n    return numero\n\ncontar_hasta(1000000)\n\ncontar_hasta tom√≥ 0.018073320388793945 segundos\n\n\n1000000\n\n\n\n# Memorizaci√≥n de Resultados:\ndef memoize(func):\n    cache = {}\n    def envoltura(*args):\n        if args in cache:\n            return cache[args]\n        resultado = func(*args)\n        cache[args] = resultado\n        return resultado\n    return envoltura\n\n@memoize\ndef fibonacci(n):\n    if n &lt;= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)\n\nprint(fibonacci(30))\n\n832040\n\n\n\n# Decoradores con Par√°metros:\ndef repetir(veces):\n    def decorador(func):\n        def envoltura(*args, **kwargs):\n            for _ in range(veces):\n                func(*args, **kwargs)\n        return envoltura\n    return decorador\n\n@repetir(3)\ndef saludar():\n    print(\"¬°Hola!\")\n\nsaludar()\n\n¬°Hola!\n¬°Hola!\n¬°Hola!\n\n\n¬øQu√© es name?\nEn Python, name es una variable especial que se define autom√°ticamente. Su valor depende de c√≥mo se ejecuta el archivo:\n\nSi el archivo se ejecuta directamente, name es igual a ‚Äúmain‚Äù.\nSi el archivo se importa como un m√≥dulo en otro archivo, name toma el nombre del archivo (sin la extensi√≥n .py).\n\n¬øPor qu√© usar if name == ‚Äúmain‚Äù:?\nEl uso de esta construcci√≥n permite definir una secci√≥n de c√≥digo que solo se ejecutar√° cuando el archivo se ejecute directamente, y no cuando se importe como m√≥dulo. Esto es √∫til para escribir scripts que pueden funcionar tanto como programas independientes como m√≥dulos reutilizables.\n\n# mi_script.py\ndef saludo():\n    print(\"¬°Hola, Mundo!\")\n\nif __name__ == \"__main__\":\n    saludo()\n# Si ejecutas mi_script.py directamente, la salida ser√° ¬°Hola, Mundo!.\n# Si importas mi_script.py en otro archivo, no se ejecutar√° autom√°ticamente saludo().\n\n¬°Hola, Mundo!\n\n\nOtros comandos √∫tiles en Python\nsys.argv\nEl m√≥dulo sys proporciona acceso a algunos objetos utilizados o mantenidos por el int√©rprete de Python y a funciones que interaccionan fuertemente con el int√©rprete. sys.argv es una lista en la que cada elemento es una cadena de caracteres. Contiene los argumentos pasados al script.\n\nimport sys\n\ndef main():\n    print(\"Nombre del script:\", sys.argv[0])\n    for i, arg in enumerate(sys.argv[1:], start=1):\n        print(f\"Argumento {i}: {arg}\")\n\nif __name__ == \"__main__\":\n    main()\n\nNombre del script: C:\\Users\\Jason\\AppData\\Roaming\\Python\\Python312\\site-packages\\ipykernel_launcher.py\nArgumento 1: -f\nArgumento 2: C:\\Users\\Jason\\AppData\\Local\\Temp\\tmpusuisxcy.json\nArgumento 3: --HistoryManager.hist_file=:memory:\n\n\nos.environ\nEl m√≥dulo os permite interactuar con el sistema operativo. os.environ es un diccionario que contiene las variables de entorno del sistema.\n\nimport os\n\ndef mostrar_variables_entorno():\n    for clave, valor in os.environ.items():\n        print(f\"{clave}: {valor}\")\n\nif __name__ == \"__main__\":\n    mostrar_variables_entorno()\n\nALLUSERSPROFILE: C:\\ProgramData\nAPPDATA: C:\\Users\\Jason\\AppData\\Roaming\nCLICOLOR_FORCE: 1\nCOMMONPROGRAMFILES: C:\\Program Files\\Common Files\nCOMMONPROGRAMFILES(X86): C:\\Program Files (x86)\\Common Files\nCOMMONPROGRAMW6432: C:\\Program Files\\Common Files\nCOMPUTERNAME: JEISONALARCON\nCOMSPEC: C:\\Windows\\system32\\cmd.exe\nCURL_CA_BUNDLE: C:/PROGRA~1/R/R-44~1.0PA/etc/curl-ca-bundle.crt\nDENO_DOM_PLUGIN: C:\\PROGRA~1\\Quarto\\bin\\tools\\x86_64\\deno_dom\\plugin.dll\nDENO_NO_UPDATE_CHECK: 1\nDENO_TLS_CA_STORE: system,mozilla\nDISPLAY: :0\nDRIVERDATA: C:\\Windows\\System32\\Drivers\\DriverData\nEFC_4920: 1\nFPS_BROWSER_APP_PROFILE_STRING: Internet Explorer\nFPS_BROWSER_USER_PROFILE_STRING: Default\nGFORTRAN_STDERR_UNIT: -1\nGFORTRAN_STDOUT_UNIT: -1\nGIT_ASKPASS: rpostback-askpass\nHOME: C:\\Users\\Jason\\OneDrive\\Documents\nHOMEDRIVE: C:\nHOMEPATH: \\Users\\Jason\nIPY_INTERRUPT_EVENT: 1148\nJPY_INTERRUPT_EVENT: 1148\nJPY_PARENT_PID: 1144\nLOCALAPPDATA: C:\\Users\\Jason\\AppData\\Local\nLOGONSERVER: \\\\JEISONALARCON\nMPLBACKEND: module://matplotlib_inline.backend_inline\nMPLENGINE: tkAgg\nMSYS2_ENV_CONV_EXCL: R_ARCH\nNO_COLOR: TRUE\nNUMBER_OF_PROCESSORS: 16\nONEDRIVE: C:\\Users\\Jason\\OneDrive\nORIGINAL_XDG_CURRENT_DESKTOP: undefined\nOS: Windows_NT\nPATH: C:\\rtools44\\x86_64-w64-mingw32.static.posix\\bin;C:\\rtools44\\usr\\bin;C:\\Program Files\\R\\R-4.4.0patched\\bin\\x64;C:\\Program Files\\Quarto\\bin;C:\\Program Files\\Python312\\Scripts\\;C:\\Program Files\\Python312\\;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Windows\\System32\\OpenSSH\\;C:\\Program Files\\Git\\cmd;C:\\Users\\Jason\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\Jason\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;C:\\Program Files\\Quarto\\bin;C:\\Program Files\\RStudio\\resources\\app\\bin\\postback\nPATHEXT: .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.PY;.PYW\nPROCESSOR_ARCHITECTURE: AMD64\nPROCESSOR_IDENTIFIER: AMD64 Family 25 Model 116 Stepping 1, AuthenticAMD\nPROCESSOR_LEVEL: 25\nPROCESSOR_REVISION: 7401\nPROGRAMDATA: C:\\ProgramData\nPROGRAMFILES: C:\\Program Files\nPROGRAMFILES(X86): C:\\Program Files (x86)\nPROGRAMW6432: C:\\Program Files\nPSMODULEPATH: C:\\Program Files\\WindowsPowerShell\\Modules;C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\nPUBLIC: C:\\Users\\Public\nPYDEVD_DISABLE_FILE_VALIDATION: 1\nPYTHONIOENCODING: utf-8\nPY_PYTHON: C:\\ProgramData\\miniconda3\\\nQUARTO_BIN_PATH: C:\\PROGRA~1\\Quarto\\bin\nQUARTO_DENO: C:\\PROGRA~1\\Quarto\\bin\\tools\\x86_64\\deno\nQUARTO_DOCUMENT_PATH: D:\\Documentos\\JOBS\\DNPE\\CursoPython\\posts\\Getting Started\nQUARTO_FIG_DPI: 192\nQUARTO_FIG_FORMAT: png\nQUARTO_FIG_HEIGHT: 5\nQUARTO_FIG_WIDTH: 7\nQUARTO_PROFILE: \nQUARTO_PROJECT_ROOT: D:\\Documentos\\JOBS\\DNPE\\CursoPython\nQUARTO_PYTHON: C:\\ProgramData\\miniconda3\\\nQUARTO_RENDER_TOKEN: d58cdf6e-3711-4e07-8eb4-aff6d785f59d\nQUARTO_SHARE_PATH: C:\\PROGRA~1\\Quarto\\share\nRETICULATE_PYTHON: C:\\ProgramData\\miniconda3\\\nRMARKDOWN_MATHJAX_PATH: C:/Program Files/RStudio/resources/app/resources/mathjax-27\nRSTUDIO: 1\nRSTUDIO_CHILD_PROCESS_PANE: job\nRSTUDIO_CLI_HYPERLINKS: true\nRSTUDIO_CONSOLE_COLOR: 256\nRSTUDIO_CONSOLE_WIDTH: 214\nRSTUDIO_DESKTOP_EXE: C:\\Program Files\\RStudio\\rstudio.exe\nRSTUDIO_MSYS_SSH: C:/Program Files/RStudio/resources/app/bin/msys-ssh-1000-18\nRSTUDIO_PANDOC: C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools\nRSTUDIO_PROGRAM_MODE: desktop\nRSTUDIO_SESSION_PID: 2744\nRSTUDIO_SESSION_PORT: 30235\nRSTUDIO_USER_IDENTITY: Jason\nRSTUDIO_WINUTILS: C:/Program Files/RStudio/resources/app/bin/winutils\nRS_LOCAL_PEER: \\\\.\\pipe\\30235-rsession\nRS_LOG_LEVEL: WARN\nRS_RPOSTBACK_PATH: C:/Program Files/RStudio/resources/app/bin/rpostback.exe\nRS_SHARED_SECRET: 13053e90-8957-4e76-8449-36975e2e2274\nRTOOLS44_HOME: C:\\rtools44\nR_ARCH: /x64\nR_CLI_HAS_HYPERLINK_IDE_HELP: true\nR_CLI_HAS_HYPERLINK_IDE_RUN: true\nR_CLI_HAS_HYPERLINK_IDE_VIGNETTE: true\nR_COMPILED_BY: gcc 13.2.0\nR_DOC_DIR: C:/PROGRA~1/R/R-44~1.0PA/doc\nR_HOME: C:/PROGRA~1/R/R-44~1.0PA\nR_INCLUDE_DIR: C:/PROGRA~1/R/R-44~1.0PA/include\nR_LIBS_SITE: C:/PROGRA~1/R/R-44~1.0PA/site-library\nR_LIBS_USER: C:\\Users\\Jason\\AppData\\Local/R/win-library/4.4\nR_PLATFORM: \nR_RTOOLS44_PATH: C:\\rtools44/x86_64-w64-mingw32.static.posix/bin;C:\\rtools44/usr/bin\nR_RUNTIME: ucrt\nR_SHARE_DIR: C:/PROGRA~1/R/R-44~1.0PA/share\nR_USER: C:/Users/Jason/OneDrive/Documents\nSESSIONNAME: Console\nSSH_ASKPASS: rpostback-askpass\nSYSTEMDRIVE: C:\nSYSTEMROOT: C:\\Windows\nTEMP: C:\\Users\\Jason\\AppData\\Local\\Temp\nTERM: xterm-color\nTMP: C:\\Users\\Jason\\AppData\\Local\\Temp\nUSERDOMAIN: JEISONALARCON\nUSERDOMAIN_ROAMINGPROFILE: JEISONALARCON\nUSERNAME: Jason\nUSERPROFILE: C:\\Users\\Jason\nWINDIR: C:\\Windows\nPYDEVD_USE_FRAME_EVAL: NO\nCLICOLOR: 1\nFORCE_COLOR: 1\nPAGER: cat\nGIT_PAGER: cat\n\n\nPython Enhancement Proposal (PEP): https://peps.python.org/pep-0008/\nhttps://docs.python.org/es/3/library/trace.html python -m trace ‚Äìcount -C . somefile.py Esto ejecutar√° somefile.py y generar√° listados anotados de todos los m√≥dulos de Python importados durante la ejecuci√≥n en el directorio actual1."
  },
  {
    "objectID": "posts/Getting Started/index.html#configuraci√≥n-inicial",
    "href": "posts/Getting Started/index.html#configuraci√≥n-inicial",
    "title": "Getting Started",
    "section": "",
    "text": "Usaremos la IDE de Rstudio (claramente no nos limitaremos a ella, usaremos Jupyter Notebook, VSC, Google Colab, etc). Pero m√°s adelante trabajaremos con ambos lenguajes (Python y R) simult√°neamente por lo cual nos servir√° realizar esta configuraci√≥n.\n\nPrimero necesita conocer con exactitud la ruta del ejecutable python.exe üí• que desea usar (sea con Python, conda, venv, etc). Para ello abra la consola de su int√©rprete (si usa un environment en particular no olvide ingresar a √©l üì•) y ejecute los comandos mostrados. Guarde dicha direcci√≥n en el portapapeles üìé.\n\n\npython\nimport sys\nprint(sys.executable)\n\n\n\nAhora que conoce la direcci√≥n correcta de su int√©rprete de Python üìá, dir√≠jase a la ruta mostrada en Rstudio. üëÄ En ocasiones no le saldr√° para ser seleccionado, por eso es mejor tener la ruta, p√©guela en la casilla y espere unos segundos ‚åö que lo reconozca antes de salir y darle guardar o aplicar (si realiza lo anterior de forma muy r√°pida no le quedar√°). Le pedir√° que reinicie sesi√≥n y ya deber√° quedar si vuelve a ingresar.\n\n\n\nPor √∫ltimo instalaremos una librer√≠a que nos proporcionar√° un conjunto completo de herramientas para la interoperabilidad entre Python y R üõ†Ô∏è.\n\n\ninstall.packages(\"reticulate\")\n\n\n\n\nComo usaremos dentro de los .qmd el par√°metro jupyter: python3, es necesario tener instalada dicha librer√≠a en su int√©rprete üíª, para lo cual ejecute (dentro de su kernel a usar y environment elegido):\n\nconda install jupyter\n# conda install numpy pandas scikit-learn matplotlib seaborn jupyter\n\nCompruebe que efectivamente haya sido descargado con:\n\nconda list\n\n\n\n\nS√≠ ejecuta el siguiente comando en el terminal ‚å®Ô∏è, deber√° obtener algo como lo siguiente:\nquarto check jupyter\n\nComo puede observar tenemos un problema ‚ö†Ô∏è y es que no qued√≥ el kernel que elegimos desde un inicio. Y el error mostrado se debe a que obviamente hay m√≥dulos que no hemos instalado en dicho int√©rprete que Quarto selecciona por defecto. Si desea obtener m√°s informaci√≥n de dicho error consulte: Quarto Uses Wrong Python Version.\nPara ‚Äúcorregir‚Äù lo anterior debemos apoyarnos de la documentaci√≥n oficial, la cual indica que se debe crear un archivo _environment (s√≠ as√≠ tal cual sin extensi√≥n alguna) y establecer los valores para QUARTO_PYTHON=\"C:\\ProgramData\\miniconda3\\\" ‚úîÔ∏è. As√≠ conseguimos que Quarto pueda establecer y fijar dicha configuraci√≥n local para nuestro .qmd.\n\nQUARTO_PYTHON se establece en: C:\\ProgramData\\miniconda3\\\nPY_PYTHON se establece en: C:\\ProgramData\\miniconda3\\\nRETICULATE_PYTHON se establece en: C:\\ProgramData\\miniconda3\\\n\nEl siguiente blog üìî explica demasiado bien lo que acabamos de hacer a mayor detalle, para renderizar un documento Quarto con un entorno espec√≠fico en RStudio/Posit.\nüü¢ Finalmente, cree y ejecute un nuevo .qmd, puede utilizar la plantilla ejemplo, y agregue el siguiente chunk para que verifique por su propia cuenta que, a pesar de que Quarto a nivel global est√° usando otro interprete, al definir el _environment queda con el que usted especifica.\n\nimport sys\nprint(sys.executable)\nprint(sys.prefix)\nprint (sys.version)\n\nC:\\ProgramData\\miniconda3\\pythonw.exe\nC:\\ProgramData\\miniconda3\n3.12.2 | packaged by Anaconda, Inc. | (main, Feb 27 2024, 17:28:07) [MSC v.1916 64 bit (AMD64)]"
  },
  {
    "objectID": "posts/Getting Started/index.html#ipython",
    "href": "posts/Getting Started/index.html#ipython",
    "title": "Getting Started",
    "section": "",
    "text": "üîñ Cualquier comando est√°ndar de shell puede ser utilizado directamente en IPython anteponiendo el car√°cter !. Por ejemplo,\n\n# : ....................... Shell Commands en IPython ........................ :\n!ls\n\nBooks\nLICENSE\nProfile.jpg\nPython Course.Rproj\n_environment\n_freeze\n_publish.yml\n_quarto.yml\n_site\nabout.qmd\nfiles\nindex.qmd\nposts\nstyles.css\n\n\n\ndirectory = !pwd\nprint(directory)\n\n['/d/Documentos/JOBS/DNPE/CursoPython']\n\n\n\nmessage = \"Imprimiendo un texto desde shell\"\n!echo {message}\n\nImprimiendo un texto desde shell"
  },
  {
    "objectID": "posts/Getting Started/index.html#conceptos-b√°sicos",
    "href": "posts/Getting Started/index.html#conceptos-b√°sicos",
    "title": "Getting Started",
    "section": "",
    "text": "üìê Identaci√≥n (no llaves {} ): Python utiliza espacios en blanco (tabuladores o espacios) para estructurar el c√≥digo en lugar de utilizar llaves como en muchos otros lenguajes como R y C++.\nüî£ No se necesita terminar con ;: El punto y coma puede usarse para separar m√∫ltiples sentencias en una sola l√≠nea. a = 1; b = 2; c = 3\nüè∑Ô∏è Las cadenas admiten tanto comillas simples ' como comillas dobles \": Se prefieren las comillas dobles, y para cadenas de varias l√≠neas con saltos de l√≠nea, puede utilizar comillas triples \"\"\".\nüÜé Vinculaci√≥n (binding): En otros lenguajes, la asignaci√≥n har√° que se copien los datos. En Python, hace que se refieran ahora al mismo objeto,\n\n\na = [1, 2, 3]\nb = a\na.append(4)\nb\n\n[1, 2, 3, 4]\n\n\n\n# Cuando se pasan objetos como argumentos a una funci√≥n, se crean nuevas variables\n# locales que hacen referencia a los objetos originales sin necesidad de copiarlos\ndef myAppend(lista, elemento):\n  lista.append(elemento)\ndata = [1, 2, 3]\nmyAppend(data, 4)\ndata\n\n[1, 2, 3, 4]\n\n\n\nüí™ Un lenguaje tipado: Cada objeto tiene un tipo (o clase) espec√≠fico, con la ventaja de que las variables no tienen un tipo inherente asociado a ellas.\n\n\na = 5      ; print(type(a))\na = \"cinco\"; print(type(a))\n\n&lt;class 'int'&gt;\n&lt;class 'str'&gt;\n\n\n\n\"5\" + 5\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[8], line 1\n----&gt; 1 \"5\" + 5\n\nTypeError: can only concatenate str (not \"int\") to str\n\n\n\n\na = 4.5\nb = 2\nprint(a / b)\nprint(isinstance(a, (int, float)))\n\n2.25\nTrue\n\n\n\n\n\n# Acceso a la Documentaci√≥n:\nhelp(len)\n\nHelp on built-in function len in module builtins:\n\nlen(obj, /)\n    Return the number of items in a container.\n\n\n\n\nletra = \"a\"\n# letra.&lt;Press Tab&gt;\ngetattr(letra, \"split\")\n\n&lt;function str.split(sep=None, maxsplit=-1)&gt;\n\n\n\n# Gui√≥n bajo '_' para salidas anteriores\n1+1\n2+2\nprint(_)\n\n&lt;built-in method split of str object at 0x00007FFFE31F1CE0&gt;\n\n\n\n# Acceder a las entradas anteriores (historial)\n%history -n 1-3\n\n   1:\nimport sys\nprint(sys.executable)\nprint(sys.prefix)\nprint (sys.version)\n   2:\n# : ....................... Shell Commands en IPython ........................ :\n!ls\n   3:\ndirectory = !pwd\nprint(directory)\n\n\n\n# : .......................... Timing Code Snippets .......................... :\n%timeit sum(range(100))   # IPython Magic Commands\n\n356 ns ¬± 3.41 ns per loop (mean ¬± std. dev. of 7 runs, 1,000,000 loops each)\n\n\n\n%%timeit                  # Cuando es m√°s complejo, baja el n√∫mero de repeticiones\ntotal = 0\nfor i in range(1000):\n  for j in range(1000):\n    total += i * (-1) ** j\n\n89.5 ms ¬± 1.51 ms per loop (mean ¬± std. dev. of 7 runs, 10 loops each)\n\n\n\n\n\n```{python}\n# Modulo.py\nPI = 3.14159\ndef cuadrado(x):\n return x ** 2\n```\n\nimport Modulo\nprint(Modulo.cuadrado(5))\npi = Modulo.PI\n# ......................................\nfrom Modulo import PI, cuadrado\ncuadrado(PI)\n# ......................................\nimport Modulo as m\nfrom Modulo import PI as kte, cuadrado as elevado\n\nr1 = m.cuadrado(kte); print(r1)\nr2 = elevado(6)     ; print(r2)\n\n\n\n\n\n\na = [1, 2, 3]\nb = a\nc = list(a) # Crea una copia\n\nprint(a is b)\nprint(a is not c)\n\nTrue\nTrue\n\n\n\na.append(4)\na == c\n\nFalse\n\n\n\n# Intercambiar los nombres de las variables:\na, b = 1, 2\n# tmp = a\n# a = b\n# b = tmp\nb, a = a, b\nprint(f'a = {a}, b = {b}')\n\na = 2, b = 1"
  },
  {
    "objectID": "posts/Getting Started/index.html#‚Ñπ-tipos-est√°ndar",
    "href": "posts/Getting Started/index.html#‚Ñπ-tipos-est√°ndar",
    "title": "Getting Started",
    "section": "",
    "text": "Tipo\nDescripci√≥n\n\n\n\n\nNone\nEl valor ‚Äúnulo‚Äù de Python (solo existe una instancia del objeto None)\n\n\nstr\nTipo de cadena; contiene cadenas Unicode\n\n\nbytes\nDatos binarios en bruto\n\n\nfloat\nN√∫mero de punto flotante de doble precisi√≥n (nota que no hay un tipo double separado)\n\n\nbool\nUn valor booleano True o False\n\n\nint\nEntero de precisi√≥n arbitraria\n\n\n\n\n\n\nprint(int(False)); print(int(True))\nprint(True + False)\nprint(not not not not True)\nprint(bool(2024.75)) # Todo valor !=0 se convierte en True\nprint(bool(\".\"))     # Todo valor !=\"\" se convierte en True\n\n0\n1\n1\nTrue\nTrue\nTrue\n\n\n\n\n\nAbc.\n\na = \"Hola mundo \\\\&gt;\"\nb = \"\"\"\nEsta cadena es m√°s larga que\nabarca varias l√≠neas\n\"\"\"\nc = r\"D:\\Documentos\\Carpeta\"\n\nprint(a); print(b); print(c)\nb.count(\"\\n\")\n\nHola mundo \\&gt;\n\nEsta cadena es m√°s larga que\nabarca varias l√≠neas\n\nD:\\Documentos\\Carpeta\n\n\n3\n\n\n\n# Los strings en Python son inmutables: no se puede modificar una cadena\nprint(a[5])\na[5] = \"M\"\n\nm\n\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[21], line 3\n      1 # Los strings en Python son inmutables: no se puede modificar una cadena\n      2 print(a[5])\n----&gt; 3 a[5] = \"M\"\n\nTypeError: 'str' object does not support item assignment\n\n\n\n\na.replace(\"m\", \"M\")\n\n'Hola Mundo \\\\&gt;'\n\n\n\na       # Tras esta operaci√≥n, la variable no se modifica\n\n'Hola mundo \\\\&gt;'\n\n\n\nlist(a) # Las cadenas son una secuencia de caracteres Unicode\n\n['H', 'o', 'l', 'a', ' ', 'm', 'u', 'n', 'd', 'o', ' ', '\\\\', '&gt;']\n\n\n\n\nExisten varios m√©todos para formatear cadenas de texto, entre los cuales encontramos:\n\nOperador de Formato %\n\n\nNombre = \"Pepito\"\nEdad = 33 \nPi   = 3.141592\nprint(\"Hola, mi nombre es %s y tengo %d a√±os. Y s√© que pi vale: %.2f.\" % (Nombre, Edad, Pi))\n\nHola, mi nombre es Pepito y tengo 33 a√±os. Y s√© que pi vale: 3.14.\n\n\n\nM√©todo .format()\n\n\nprint(\"Hola, mi nombre es {} y tengo {} a√±os. Y s√© que pi vale: {:.2f}.\".format(Nombre, Edad, Pi))\nprint(\"Nombre: {name}, Edad: {age}\".format(name = \"Luis\", age = 33))\nprint(\"El {0} se encuentra en el {1} y el {1} se encuentra en el {0}.\".format(\"sol\", \"cielo\"))\n\nHola, mi nombre es Pepito y tengo 33 a√±os. Y s√© que pi vale: 3.14.\nNombre: Luis, Edad: 33\nEl sol se encuentra en el cielo y el cielo se encuentra en el sol.\n\n\n\n# 0:.3f El 1re valor ser√° un flotantes con 3 decimales\n# 1:s   El 2do valor ser√° un string\n# 2:d   El 3re valor ser√° un entero\ntemplate = \"{0:.3f} {1:s} equivalen a US${2:d}\"\ntemplate.format(3.960, \"pesos Colombianos\", 1) # Intente modificar el tipo de alguno de estos\n\n'3.960 pesos Colombianos equivalen a US$1'\n\n\n\nf-strings\n\n\nTasa   = 3.960\nMoneda = \"Colombianos\"\nf\"{Tasa:.4f} pesos {Moneda} equivalen a US${Tasa/Tasa}\"\n\n'3.9600 pesos Colombianos equivalen a US$1.0'\n\n\n\n# C√°lculos Dentro:\na = 5; b = 10\nprint(f\"La suma de {a} y {b} es {a + b}. Adem√°s a*b = {a*b}\")\n# Alinear Texto:\nprint(f\"{'izquierda':&lt;10} {'centrado':^10} {'derecha':&gt;10}\")\n# Mostrar N√∫meros en Diferentes Bases:\nNumero = 255\nprint(f\"Decimal: {Numero}, Binario: {Numero:b}, Hexadecimal: {Numero:x}, Octal: {Numero:o}\")\n# Incluir Expresiones y M√©todos:\nTxt = \"Amo Python\"\nprint(f\"El texto en may√∫sculas es {Txt.upper()}.\")\n# Combinaci√≥n con Diccionarios:\nPais = {\"nombre\": \"Colombia\", \"NoPoblacion\": 50}\nprint(f\"Pa√≠s: {Pais['nombre']}, Habitantes: {Pais['NoPoblacion']}\")\n# Incluir Llaves Literales:\nprint(f\"Este es un valor literal en llaves: {{Numero}}, y este es el valor de la variable: {Numero}.\")\n\nLa suma de 5 y 10 es 15. Adem√°s a*b = 50\nizquierda   centrado     derecha\nDecimal: 255, Binario: 11111111, Hexadecimal: ff, Octal: 377\nEl texto en may√∫sculas es AMO PYTHON.\nPa√≠s: Colombia, Habitantes: 50\nEste es un valor literal en llaves: {Numero}, y este es el valor de la variable: 255.\n\n\n\nM√©todo string.Template\n\n\nfrom string import Template\ntemplate = Template(\"Hola, mi nombre es $name y tengo $age a√±os.\")\nmensaje  = template.substitute(name = \"Pepito\", age = 33)\nprint(mensaje)\n\nHola, mi nombre es Pepito y tengo 33 a√±os.\n\n\n\n\n\n\n\n\n\n\n\nM√©todo\nSintaxis\nVentajas\nDesventajas\n\n\n\n\nOperador %\nHola, %s % ‚Äúmundo‚Äù\nSimple y familiar para quienes conocen C\nMenos flexible y m√°s propenso a errores\n\n\nM√©todo .format()\nHola, {}.format(‚Äúmundo‚Äù)\nMuy flexible, soporta nombres y posiciones\nSintaxis m√°s verbosa\n\n\nf-strings\nf\"Hola, {variable}\"\nMuy legible, permite expresiones dentro de {}\nDisponible solo en Python 3.6+\n\n\nstring.Template\nTemplate(\"Hola, $nombre\")\nSimple y seguro, f√°cil de leer\nMenos potente para formateo complejo\n\n\n\n\n\n\n\nAbc.\n\n\n\nAbc.\n\n\n\nAbc.\n\nfrom datetime import datetime, date, time\ndt = datetime(2024, 1, 31, 20, 30, 21)\n\ndt.day\ndt.date()\ndt.time()\ndt.strftime(\"%Y-%m-%d %H:%M\")\n\n'2024-01-31 20:30'\n\n\n\ndt_hour = dt.replace(minute = 0, second = 0)\ndt_hour\n\ndatetime.datetime(2024, 1, 31, 20, 0)\n\n\n\ndelta = datetime.now() - dt\ndelta\n\ndatetime.timedelta(days=159, seconds=84738, microseconds=777729)"
  },
  {
    "objectID": "posts/Getting Started/index.html#objetos-mutables-e-inmutables",
    "href": "posts/Getting Started/index.html#objetos-mutables-e-inmutables",
    "title": "Getting Started",
    "section": "",
    "text": "Note\n\n\n\nUna tupla es una secuencia ordenada de objetos de longitud fija e inmutable (una vez asignada no puede modificarse). La forma m√°s sencilla de crear una tupla es con una secuencia de valores separados por comas entre par√©ntesis.\n\n\n\ntup1 = (1, 2, 2)      # Pueden contener elementos repetidos\ntup2 = 4, 5, 6        # Los par√©ntesis pueden omitirse\nprint(tup1); print(tup2)\n\n(1, 2, 2)\n(4, 5, 6)\n\n\n\n# Se puede convertir cualquier secuencia o iterador\nprint( tuple([7, 8, 9]) )\nprint( tuple(\"Texto\") )\n\n(7, 8, 9)\n('T', 'e', 'x', 't', 'o')\n\n\n\ntupCompleja = (2, 4, 8), (3, 5)\nprint(tupCompleja)\ntupCompleja[0]\n\n((2, 4, 8), (3, 5))\n\n\n(2, 4, 8)\n\n\n\ntupMixta = tuple(['txt', [1, 2], True])\ntupMixta[1].append(3) # Si un objeto dentro de una tupla es mutable, se puede modificar\nprint(tupMixta)\ntupMixta[2] = False\n\n('txt', [1, 2, 3], True)\n\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[37], line 4\n      2 tupMixta[1].append(3) # Si un objeto dentro de una tupla es mutable, se puede modificar\n      3 print(tupMixta)\n----&gt; 4 tupMixta[2] = False\n\nTypeError: 'tuple' object does not support item assignment\n\n\n\n\nprint( tup1*2 + (20, 24) + ('year',) )\n\n(1, 2, 2, 1, 2, 2, 20, 24, 'year')\n\n\n\n# Desempaquetado (unpacking)\nuno, dos, tres = tup1\nprint(uno)\n(a, b, c), (d, e) = tupCompleja\nprint(a)\n\n1\n2\n\n\n\nseq = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nfor a, b, c in seq:\n    print(f'a = {a}, b = {b}, c = {c}')\n\na = 1, b = 2, c = 3\na = 4, b = 5, c = 6\na = 7, b = 8, c = 9\n\n\n\nfirst, second, *rest = (1, 2, 3, 4, 5)\nprint(f\"{first} || {second} || {rest}\")\n# El gui√≥n bajo (_) para descartar las variables no deseadas\nfirst, second, *_ = (1, 2, 3, 4, 5)\n\n1 || 2 || [3, 4, 5]\n\n\n\n# Si desea definir una tupla con un solo elemento  debe incluir una coma al final:\nmy_t = (3,)\nprint(my_t)\n# M√©todos\n(1, 0, 1, 1, 0).count(0)\n\n(3,)\n\n\n2\n\n\n\n\n\nUna lista es una colecci√≥n de elementos en un orden determinado. Puedes poner lo que quieras en una lista, y los elementos que la componen no tienen por qu√© estar relacionados de ninguna manera en particular. En Python, los corchetes [ ] indican una lista, y los elementos individuales de la lista est√°n separados por comas.\n\nLas posiciones de √≠ndice empiezan en 0, no en 1.\n\n\n\n\n\n\n\nNote\n\n\n\nLas listas son de longitud variable y su contenido puede modificarse (son mutables).\n\n\n\nmotorcycles = [0, \"honda\", \"yamaha\", \"suzuki\", None]\nprint(motorcycles)\nlist(tup1)\n\n[0, 'honda', 'yamaha', 'suzuki', None]\n\n\n[1, 2, 2]\n\n\n\n# A√±adir y eliminar elementos\nmotorcycles.append(\"ducati\")\nmotorcycles.insert(1, \"1\")\ndel motorcycles[-2]         # Removing an Item Using the del Statement\nmotorcycles.pop(0)          # Popping Items from Any Position\nprint(motorcycles)\n\n['1', 'honda', 'yamaha', 'suzuki', 'ducati']\n\n\n\n\n\n\n\n\nCaution\n\n\n\nLa inserci√≥n (insert) es m√°s costosa computacionalmente que la adici√≥n (append), ya que las referencias a los elementos subsiguientes deben desplazarse internamente para dejar espacio al nuevo elemento.\n\n\n\nmotorcycles.append(\"2\"); print(motorcycles)\nmotorcycles.remove(\"2\"); print(motorcycles) # Removing an Item by Value\n\n['1', 'honda', 'yamaha', 'suzuki', 'ducati', '2']\n['1', 'honda', 'yamaha', 'suzuki', 'ducati']\n\n\n\n# Sorting a List\nmotorcycles.sort(); print(motorcycles)\nmotorcycles.sort(reverse = True); print(motorcycles)\nprint(sorted(motorcycles)); print(motorcycles)\n\n['1', 'ducati', 'honda', 'suzuki', 'yamaha']\n['yamaha', 'suzuki', 'honda', 'ducati', '1']\n['1', 'ducati', 'honda', 'suzuki', 'yamaha']\n['yamaha', 'suzuki', 'honda', 'ducati', '1']\n\n\n\nprint(motorcycles.reverse())\nlen(motorcycles)\n\nNone\n\n\n5\n\n\n\n# Python returns another index error\nlistA = []\nprint(listA[-1])\n\n\n---------------------------------------------------------------------------\nIndexError                                Traceback (most recent call last)\nCell In[48], line 3\n      1 # Python returns another index error\n      2 listA = []\n----&gt; 3 print(listA[-1])\n\nIndexError: list index out of range\n\n\n\n\nsquares = []\nfor value in range(1, 11):\n    squares.append(value ** 2)\nprint(squares)\n# List Comprehensions\nsquares = [value**2 for value in range(1, 11)]\nprint(squares)\n\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\n\n\n# Slicing a List\nprint(motorcycles[0:3])\nprint(motorcycles[2:])\nprint(motorcycles[-2:])\n\n['1', 'ducati', 'honda']\n['honda', 'suzuki', 'yamaha']\n['suzuki', 'yamaha']\n\n\n\n# Copying a List\nonces = [\"pizza\", \"arepa\", \"empanada\"]\ntusOnces = onces[:]\nonces.append(\"bu√±uelo\")\ntusOnces.append(\"pan\")\nprint(onces); print(tusOnces)\n\n['pizza', 'arepa', 'empanada', 'bu√±uelo']\n['pizza', 'arepa', 'empanada', 'pan']\n\n\n\n# Mutable\nmi_lista = [1, 2, 3]\nprint(id(mi_lista))  # Ejemplo de ID: 139974841304960\nmi_lista.append(4)\nprint(id(mi_lista))  # Mismo ID: 139974841304960\n\n# Inmutable\nmi_tupla = (1, 2, 3)\nprint(id(mi_tupla))  # Ejemplo de ID: 139974841306352\nmi_tupla = (1, 2, 3, 4)\nprint(id(mi_tupla))  # Nuevo ID: 139974841306400\n\n2421895512832\n2421895512832\n2421895552896\n2421895626816\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nUn diccionario (conocido en otros lengujaes como maps o associative arrays) almacena una colecci√≥n de pares clave-valor, donde clave y valor son objetos Python. Cada clave est√° asociada a un valor, de modo que un valor puede ser convenientemente recuperado, insertado, modificado o eliminado dada una clave en particular. Tenga presente que las claves √∫nicas (no permiten duplicados en las claves).\n\n\n\nfisico = {'color': 'blanco', 'altura': 1.79}\nfisico[\"ojos\"] = \"azules\"\nfisico[\"peso\"] = 87\nprint(fisico)\n\n{'color': 'blanco', 'altura': 1.79, 'ojos': 'azules', 'peso': 87}\n\n\n\n# Diccionario con tuplas como claves\npuntos = {\n    (0, 0): \"Origen\",\n    (1, 2): \"Punto A\",\n    (3, 4): \"Punto B\"\n}\nprint(puntos[(1, 2)])\n\nPunto A\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThis is an example of an tip callout"
  },
  {
    "objectID": "posts/Getting Started/index.html#flujo-de-control",
    "href": "posts/Getting Started/index.html#flujo-de-control",
    "title": "Getting Started",
    "section": "",
    "text": "w = 5; x = 4; y = 3; z = 2\nif x &lt; 0:\n    print(\"x es negativo\")\nelif x == 0:\n    print(\"x es cero\")\nelif w &gt; x &gt; y &gt; z:\n    print(\"Los valores est√°n en orden\")\nelse:\n    print(\"Otro caso diferente\")\n\nLos valores est√°n en orden\n\n\n\n\n\n\nnumeros = [1, 2, None, 4, None, 5] # sum(numeros)\ntotal = 0\nfor value in numeros:\n    if value is None:\n        continue\n    if value == 4:\n        break       # La sentencia 'break' se usa para salir del bucle\n    total += value\ntotal\n\n3\n\n\n\n# 'break' s√≥lo termina el for m√°s interno, cualquier for externo continuar√°\nfor i in range(4):\n    for j in range(4):\n        if j &gt; i:\n            break\n        print((i, j))\n\n(0, 0)\n(1, 0)\n(1, 1)\n(2, 0)\n(2, 1)\n(2, 2)\n(3, 0)\n(3, 1)\n(3, 2)\n(3, 3)\n\n\n\n\n\nEsta estructura permite ejecutar repetidamente un bloque de c√≥digo mientras una condici√≥n especificada se eval√∫a como verdadera. Este ciclo es √∫til cuando no se sabe de antemano cu√°ntas veces se necesitar√° repetir el bloque de c√≥digo, a diferencia del ciclo for, que itera sobre una secuencia de elementos de longitud conocida.\n\nwhile True:\n    entrada = input(\"Escribe 'salir' para terminar: \")\n    if entrada.lower() == \"salir\":\n        break\n\n\n\n\nEs la sentencia no-op (o no hacer nada) de Python. Puede usarse en bloques en los que no se va a realizar ninguna acci√≥n. S√≥lo es necesaria porque Python utiliza espacios en blanco para delimitar los bloques.\nCuando la ejecuci√≥n del programa alcanza una sentencia continue, la ejecuci√≥n del programa salta inmediatamente al inicio del bucle y reeval√∫a la condici√≥n del bucle.\n\nwhile True:\n    print('¬øQui√©n eres t√∫?')\n    name = input()\n    if name != 'Juan':\n        continue\n    print('Hola Juan, cu√°l es tu contrase√±a (es un equipo)')\n    password = input()\n    if password == 'nacional':\n        break\nprint('Acceso Concedido.')\n\n\n\nPass (for, if): No realiza ninguna acci√≥n y se utiliza como marcador de lugar (placeholder para futura implementaci√≥n).\nContinue (for, while): Salta a la siguiente iteraci√≥n del bucle, omitiendo el resto del c√≥digo en la iteraci√≥n actual.\nBreak (if): Termina el bucle inmediatamente, saliendo de la estructura de control de flujo.\n\n\n\n\n\n\nprint(f\"{   range(10)   }\")\nprint(f\"{   range(1, 10)   }\")\nprint(f\"{   list(range(0, 20, 2))   }\")\nprint(f\"{   list(range(5, -1, -1))   }\")\n\nrange(0, 10)\nrange(1, 10)\n[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\n[5, 4, 3, 2, 1, 0]"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Este curso est√° dise√±ado para guiarte desde los conceptos b√°sicos hasta las habilidades intermedias en uno de los lenguajes de programaci√≥n m√°s poderosos/populares y vers√°tiles de la actualidad. Este curso est√° orientado tanto a principiantes absolutos en la programaci√≥n como a aquellos con experiencia en otros lenguajes que deseen expandir sus conocimientos y competencias en Python."
  },
  {
    "objectID": "about.html#objetivos-del-curso",
    "href": "about.html#objetivos-del-curso",
    "title": "About",
    "section": "Objetivos del Curso",
    "text": "Objetivos del Curso\nEl objetivo principal de este curso es proporcionar una comprensi√≥n s√≥lida de los fundamentos de Python y su aplicaci√≥n pr√°ctica. Al finalizar este curso, los estudiantes ser√°n capaces de:\n\nComprender la Sintaxis y Sem√°ntica de Python: Familiarizarse con la estructura b√°sica del lenguaje, incluyendo variables, tipos de datos, operadores y estructuras de control.\nEscribir y Ejecutar Programas Simples: Crear scripts que resuelvan problemas cotidianos y automaticen tareas comunes.\nManipular Datos: Trabajar con listas, diccionarios y otros tipos de datos compuestos para gestionar y procesar informaci√≥n de manera eficiente.\nDesarrollar Habilidades de Resoluci√≥n de Problemas: Aplicar t√©cnicas de pensamiento algor√≠tmico para dise√±ar soluciones efectivas y optimizadas.\nIntroducci√≥n a la Programaci√≥n Orientada a Objetos (POO): Entender los conceptos b√°sicos de POO y c√≥mo se implementan en Python.\nUtilizar M√≥dulos y Paquetes: Explorar y emplear bibliotecas est√°ndar y de terceros para ampliar las capacidades de tus programas."
  },
  {
    "objectID": "about.html#estructura-del-curso",
    "href": "about.html#estructura-del-curso",
    "title": "About",
    "section": "Estructura del Curso",
    "text": "Estructura del Curso\nEl curso est√° dividido en varios m√≥dulos, cada uno centrado en un aspecto fundamental de Python:\n\nIntroducci√≥n y Configuraci√≥n del Entorno:\n\nInstalaci√≥n de Python y configuraciones iniciales.\nIntroducci√≥n a los entornos de desarrollo integrados (IDE) y editores de texto.\n\nSintaxis B√°sica y Estructuras de Control:\n\nVariables, tipos de datos y operaciones b√°sicas.\nCondicionales, bucles y comprensi√≥n de listas.\n\nFunciones y M√≥dulos:\n\nDefinici√≥n y uso de funciones.\nModularizaci√≥n del c√≥digo con scripts y m√≥dulos.\n\nEstructuras de Datos Avanzadas:\n\nListas, tuplas, conjuntos y diccionarios.\nM√©todos avanzados y manipulaci√≥n de datos.\n\nProgramaci√≥n Orientada a Objetos (POO):\n\nClases y objetos.\nHerencia, encapsulamiento y polimorfismo.\n\nManejo de Errores y Excepciones:\n\nIdentificaci√≥n y gesti√≥n de errores (try, except, y finally).\nUso de excepciones para control de flujo robusto.\n\nInteracci√≥n con Archivos y Datos:\n\nLectura y escritura de archivos.\nIntroducci√≥n al manejo de datos con bibliotecas como Pandas.\n\nIntroducci√≥n a Librer√≠as Populares:\n\nUso de librer√≠as esenciales como NumPy, Pandas, Matplotlib, y m√°s.\nAplicaciones pr√°cticas en ciencia de datos y visualizaci√≥n."
  },
  {
    "objectID": "about.html#requisitos-previos",
    "href": "about.html#requisitos-previos",
    "title": "About",
    "section": "Requisitos Previos",
    "text": "Requisitos Previos\nNo se requieren conocimientos previos de programaci√≥n. Sin embargo, se recomienda tener una disposici√≥n positiva hacia el aprendizaje y la resoluci√≥n de problemas."
  },
  {
    "objectID": "posts/Getting Started/index.html#funciones",
    "href": "posts/Getting Started/index.html#funciones",
    "title": "Getting Started",
    "section": "",
    "text": "Las funciones en Python son bloques de c√≥digo reutilizables que permiten estructurar y organizar mejor los programas. Se definen usando la palabra clave def y pueden aceptar argumentos y devolver valores.\n\n# Py a√±ade return None al final de cualquier definici√≥n de funci√≥n sin sentencia return:\ndef Saludo(nombre):\n  print(\"Hola \" + nombre)\n\nspam = Saludo(\"Carlos\")\nNone == spam\n\nHola Carlos\n\n\nTrue\n\n\nEn un programa de Python, hay exactamente un √∫nico √°mbito global. Este √°mbito global es el contexto en el que las variables globales se definen y existen a lo largo de la ejecuci√≥n del programa.\n\nEn cuanto a los √°mbitos locales, el n√∫mero de estos puede variar. Cada vez que se define y se llama a una funci√≥n, se crea un nuevo √°mbito local. Por lo tanto, el n√∫mero de √°mbitos locales depende del n√∫mero de funciones (incluidas las funciones anidadas) y m√©todos que se llaman durante la ejecuci√≥n del programa.\n\n\n# Las variables locales no pueden utilizarse en el √°mbito global:\ndef getPI():\n  PI = 3.1415\ngetPI()\nprint(PI)\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[60], line 5\n      3   PI = 3.1415\n      4 getPI()\n----&gt; 5 print(PI)\n\nNameError: name 'PI' is not defined\n\n\n\n\n# Los √°mbitos locales no pueden utilizar variables de otros √°mbitos locales:\ndef a():\n  phone = 444\n  b()\n  print(phone)\ndef b():\n  phone = 555\na()\n\n444\n\n\n\n# Las variables globales pueden leerse desde un √°mbito local:\ndef a():\n  print(cte)\ncte = 1234\na()\nprint(cte)\n\n1234\n1234\n\n\n\n# Si necesitas modificar una variable global desde dentro de una funci√≥n:\ndef a():\n    global cte\n    cte = 'Ahora soy una Variable Global'\n\ncte = 'Global'\na()\nprint(cte)\n\nAhora soy una Variable Global\n\n\n\n# Funciones con Valores por Defecto:\ndef saludar(nombre = \"Paola\"):\n    print(f\"¬°Hola, {nombre}!\")\n\nsaludar()\nsaludar(\"Pedro\")\n\n¬°Hola, Paola!\n¬°Hola, Pedro!\n\n\n\n# Funciones con Varios Valores de Retorno:\ndef operaciones(a, b):\n    suma  = a + b\n    resta = a - b\n    return suma, resta\n\nsuma, resta = operaciones(10, 2)\nprint(f\"Suma: {suma}\\t| Resta: {resta}\")\n\nSuma: 12    | Resta: 8\n\n\n\n# Argumentos y Par√°metros Arbitrarios:\ndef sumar(*args):\n    return sum(args)\n\nprint(sumar(1, 2, 3))\nprint(sumar(4, 5))\n\n6\n9\n\n\n\n# Evitar que un programa se bloquee cuando recibe un error:\ndef a(b):\n    try:\n        return 1/b\n    except ZeroDivisionError:\n        print('Error: b debe ser diferente de 0.')\nprint(a(2))\nprint(a(0))\n\n0.5\nError: b debe ser diferente de 0.\nNone\n\n\n\n\nEl par√°metro args se usa en las funciones para pasar un n√∫mero variable de argumentos posicionales. Dentro de la funci√≥n, args es una tupla que contiene todos los argumentos posicionales proporcionados.\nCaracter√≠sticas: - Permite pasar una cantidad variable de argumentos a una funci√≥n. - Los argumentos se agrupan en una tupla dentro de la funci√≥n.\n\ndef imprimir_argumentos(*args):\n    for i, arg in enumerate(args):\n        print(f\"Argumento {i}: {arg}\")\n\nimprimir_argumentos('a', 'b', 'c')\n\nArgumento 0: a\nArgumento 1: b\nArgumento 2: c\n\n\n\n\n\nEl par√°metro kwargs se usa para pasar un n√∫mero variable de argumentos con nombre (palabra clave). Dentro de la funci√≥n, kwargs es un diccionario que contiene todos los argumentos con nombre proporcionados.\nCaracter√≠sticas: - Permite pasar una cantidad variable de argumentos con nombre a una funci√≥n. - Los argumentos se agrupan en un diccionario dentro de la funci√≥n.\n\ndef mostrar_info(**kwargs):\n    for key, value in kwargs.items():\n        print(f\"{key}: {value}\")\n\nmostrar_info(nombre=\"Alice\", edad=30, ciudad=\"Nueva York\")\n\nnombre: Alice\nedad: 30\nciudad: Nueva York\n\n\n\n# Ejemplo combinado:\ndef combinar(*args, **kwargs):\n    print(\"Argumentos posicionales:\", args)\n    print(\"Argumentos con nombre:\", kwargs)\n\ncombinar(1, 2, 3, a=\"Uno\", b=\"Dos\", c=\"Tres\")\n\nArgumentos posicionales: (1, 2, 3)\nArgumentos con nombre: {'a': 'Uno', 'b': 'Dos', 'c': 'Tres'}\n\n\n\n\n\nSon funciones an√≥nimas y de una sola l√≠nea que pueden ser definidas usando la palabra clave lambda argumentos: expresi√≥n. Son especialmente √∫tiles cuando se necesita una funci√≥n peque√±a y desechable que se puede definir en una expresi√≥n.\n\ncuadrado = lambda x: x ** 2\nprint(cuadrado(5))\n\nmultiplicar = lambda x, y: x * y\nprint(multiplicar(4, 6))\n\n25\n24\n\n\nUso con Funciones Integradas\nLas funciones lambda son especialmente √∫tiles cuando se combinan con ciertas funciones integradas de Python.\n\nmap(): Aplica una funci√≥n a cada √≠tem de un iterable (como una lista) y devuelve un nuevo iterable con los resultados.\n\n\nnumeros = list(range(11))\ncuadrados = map(lambda x: x**2, numeros)\nprint(list(cuadrados))\n\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\n\n\nfilter(): Filtra un iterable, permitiendo s√≥lo los √≠tems que coincidan con una condici√≥n.\n\n\npares = filter(lambda x: x%2 == 0, numeros)\nprint(list(pares))\n\n[0, 2, 4, 6, 8, 10]\n\n\n\nprint(list(filter(lambda x: (x % 2 == 0) and (x &gt; 7), numeros)))\n\n[8, 10]\n\n\n\nreduce(): Aplica una funci√≥n a los √≠tems de un iterable, acumulando el resultado.\n\n\nfrom functools import reduce\n\nsuma_total = reduce(lambda x,y: x + y, numeros)\nprint(suma_total)\n\n55\n\n\n\nsorted(): Las funciones lambda pueden ser usadas para personalizar el ordenamiento de listas.\n\n\ncoordenadas = [(1, 2), (3, 4), (5, 1), (7, 3)]\nordenado = sorted(coordenadas, key = lambda x: x[1])\nprint(ordenado)\n\n[(5, 1), (1, 2), (7, 3), (3, 4)]\n\n\n\nNotas = [\n    {'Nombre': 'Ana', 'Definitiva': 8},\n    {'Nombre': 'Juan', 'Definitiva': 6},\n    {'Nombre': 'Maria', 'Definitiva': 9}\n]\nprint(sorted(Notas, key = lambda x: x['Definitiva']))\n\n[{'Nombre': 'Juan', 'Definitiva': 6}, {'Nombre': 'Ana', 'Definitiva': 8}, {'Nombre': 'Maria', 'Definitiva': 9}]\n\n\nLimitaciones\n\nUna sola expresi√≥n: Las lambdas est√°n limitadas a una √∫nica expresi√≥n. No pueden contener declaraciones ni m√∫ltiples l√≠neas de c√≥digo.\nLegibilidad: Aunque √∫tiles para funciones cortas y simples, las lambdas pueden hacer el c√≥digo m√°s dif√≠cil de leer si se usan en exceso o de manera compleja.\n\n\n\n\nLos decoradores en Python son una herramienta poderosa que permite modificar el comportamiento de una funci√≥n o m√©todo. Los decoradores permiten envolver una funci√≥n en otra funci√≥n, lo que facilita a√±adir funcionalidades adicionales de una manera muy elegante y reutilizable.\n\ndef decorador(func):\n    def envoltura():\n        print(\"Antes de la funci√≥n\")\n        func()\n        print(\"Despu√©s de la funci√≥n\")\n    return envoltura\n@decorador\ndef f():\n    print(\"Funci√≥n original\")\nf()\n\nAntes de la funci√≥n\nFunci√≥n original\nDespu√©s de la funci√≥n\n\n\n\n# Registro de Llamadas a Funciones:\ndef registrar(func):\n    def envoltura(*args, **kwargs):\n        print(f\"Llamando a {func.__name__} con {args} y {kwargs}\")\n        resultado = func(*args, **kwargs)\n        print(f\"{func.__name__} retorn√≥ {resultado}\")\n        return resultado\n    return envoltura\n\n@registrar\ndef suma(a, b):\n    return a + b\n\nsuma(3, 5)\n\nLlamando a suma con (3, 5) y {}\nsuma retorn√≥ 8\n\n\n8\n\n\n\n# Contador de Llamadas a una Funci√≥n:\ndef contador_de_llamadas(func):\n    def wrapper(*args, **kwargs):\n        wrapper.llamadas += 1\n        print(f\"Llamada n√∫mero: {wrapper.llamadas}\")\n        return func(*args, **kwargs)\n    wrapper.llamadas = 0\n    return wrapper\n\n@contador_de_llamadas\ndef mi_funcion():\n    print(\"Ejecutando la funci√≥n\")\n\nmi_funcion()\nmi_funcion()\n\nLlamada n√∫mero: 1\nEjecutando la funci√≥n\nLlamada n√∫mero: 2\nEjecutando la funci√≥n\n\n\n\n# Medici√≥n de Tiempo de Ejecuci√≥n:\nimport time\ndef medir_tiempo(func):\n    def envoltura(*args, **kwargs):\n        inicio = time.time()\n        resultado = func(*args, **kwargs)\n        fin = time.time()\n        print(f\"{func.__name__} tom√≥ {fin - inicio} segundos\")\n        return resultado\n    return envoltura\n\n@medir_tiempo\ndef contar_hasta(numero):\n    for i in range(numero):\n        pass\n    return numero\n\ncontar_hasta(1000000)\n\ncontar_hasta tom√≥ 0.018073320388793945 segundos\n\n\n1000000\n\n\n\n# Memorizaci√≥n de Resultados:\ndef memoize(func):\n    cache = {}\n    def envoltura(*args):\n        if args in cache:\n            return cache[args]\n        resultado = func(*args)\n        cache[args] = resultado\n        return resultado\n    return envoltura\n\n@memoize\ndef fibonacci(n):\n    if n &lt;= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)\n\nprint(fibonacci(30))\n\n832040\n\n\n\n# Decoradores con Par√°metros:\ndef repetir(veces):\n    def decorador(func):\n        def envoltura(*args, **kwargs):\n            for _ in range(veces):\n                func(*args, **kwargs)\n        return envoltura\n    return decorador\n\n@repetir(3)\ndef saludar():\n    print(\"¬°Hola!\")\n\nsaludar()\n\n¬°Hola!\n¬°Hola!\n¬°Hola!\n\n\n¬øQu√© es name?\nEn Python, name es una variable especial que se define autom√°ticamente. Su valor depende de c√≥mo se ejecuta el archivo:\n\nSi el archivo se ejecuta directamente, name es igual a ‚Äúmain‚Äù.\nSi el archivo se importa como un m√≥dulo en otro archivo, name toma el nombre del archivo (sin la extensi√≥n .py).\n\n¬øPor qu√© usar if name == ‚Äúmain‚Äù:?\nEl uso de esta construcci√≥n permite definir una secci√≥n de c√≥digo que solo se ejecutar√° cuando el archivo se ejecute directamente, y no cuando se importe como m√≥dulo. Esto es √∫til para escribir scripts que pueden funcionar tanto como programas independientes como m√≥dulos reutilizables.\n\n# mi_script.py\ndef saludo():\n    print(\"¬°Hola, Mundo!\")\n\nif __name__ == \"__main__\":\n    saludo()\n# Si ejecutas mi_script.py directamente, la salida ser√° ¬°Hola, Mundo!.\n# Si importas mi_script.py en otro archivo, no se ejecutar√° autom√°ticamente saludo().\n\n¬°Hola, Mundo!\n\n\nOtros comandos √∫tiles en Python\nsys.argv\nEl m√≥dulo sys proporciona acceso a algunos objetos utilizados o mantenidos por el int√©rprete de Python y a funciones que interaccionan fuertemente con el int√©rprete. sys.argv es una lista en la que cada elemento es una cadena de caracteres. Contiene los argumentos pasados al script.\n\nimport sys\n\ndef main():\n    print(\"Nombre del script:\", sys.argv[0])\n    for i, arg in enumerate(sys.argv[1:], start=1):\n        print(f\"Argumento {i}: {arg}\")\n\nif __name__ == \"__main__\":\n    main()\n\nNombre del script: C:\\Users\\Jason\\AppData\\Roaming\\Python\\Python312\\site-packages\\ipykernel_launcher.py\nArgumento 1: -f\nArgumento 2: C:\\Users\\Jason\\AppData\\Local\\Temp\\tmpusuisxcy.json\nArgumento 3: --HistoryManager.hist_file=:memory:\n\n\nos.environ\nEl m√≥dulo os permite interactuar con el sistema operativo. os.environ es un diccionario que contiene las variables de entorno del sistema.\n\nimport os\n\ndef mostrar_variables_entorno():\n    for clave, valor in os.environ.items():\n        print(f\"{clave}: {valor}\")\n\nif __name__ == \"__main__\":\n    mostrar_variables_entorno()\n\nALLUSERSPROFILE: C:\\ProgramData\nAPPDATA: C:\\Users\\Jason\\AppData\\Roaming\nCLICOLOR_FORCE: 1\nCOMMONPROGRAMFILES: C:\\Program Files\\Common Files\nCOMMONPROGRAMFILES(X86): C:\\Program Files (x86)\\Common Files\nCOMMONPROGRAMW6432: C:\\Program Files\\Common Files\nCOMPUTERNAME: JEISONALARCON\nCOMSPEC: C:\\Windows\\system32\\cmd.exe\nCURL_CA_BUNDLE: C:/PROGRA~1/R/R-44~1.0PA/etc/curl-ca-bundle.crt\nDENO_DOM_PLUGIN: C:\\PROGRA~1\\Quarto\\bin\\tools\\x86_64\\deno_dom\\plugin.dll\nDENO_NO_UPDATE_CHECK: 1\nDENO_TLS_CA_STORE: system,mozilla\nDISPLAY: :0\nDRIVERDATA: C:\\Windows\\System32\\Drivers\\DriverData\nEFC_4920: 1\nFPS_BROWSER_APP_PROFILE_STRING: Internet Explorer\nFPS_BROWSER_USER_PROFILE_STRING: Default\nGFORTRAN_STDERR_UNIT: -1\nGFORTRAN_STDOUT_UNIT: -1\nGIT_ASKPASS: rpostback-askpass\nHOME: C:\\Users\\Jason\\OneDrive\\Documents\nHOMEDRIVE: C:\nHOMEPATH: \\Users\\Jason\nIPY_INTERRUPT_EVENT: 1148\nJPY_INTERRUPT_EVENT: 1148\nJPY_PARENT_PID: 1144\nLOCALAPPDATA: C:\\Users\\Jason\\AppData\\Local\nLOGONSERVER: \\\\JEISONALARCON\nMPLBACKEND: module://matplotlib_inline.backend_inline\nMPLENGINE: tkAgg\nMSYS2_ENV_CONV_EXCL: R_ARCH\nNO_COLOR: TRUE\nNUMBER_OF_PROCESSORS: 16\nONEDRIVE: C:\\Users\\Jason\\OneDrive\nORIGINAL_XDG_CURRENT_DESKTOP: undefined\nOS: Windows_NT\nPATH: C:\\rtools44\\x86_64-w64-mingw32.static.posix\\bin;C:\\rtools44\\usr\\bin;C:\\Program Files\\R\\R-4.4.0patched\\bin\\x64;C:\\Program Files\\Quarto\\bin;C:\\Program Files\\Python312\\Scripts\\;C:\\Program Files\\Python312\\;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Windows\\System32\\OpenSSH\\;C:\\Program Files\\Git\\cmd;C:\\Users\\Jason\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\Jason\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;C:\\Program Files\\Quarto\\bin;C:\\Program Files\\RStudio\\resources\\app\\bin\\postback\nPATHEXT: .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.PY;.PYW\nPROCESSOR_ARCHITECTURE: AMD64\nPROCESSOR_IDENTIFIER: AMD64 Family 25 Model 116 Stepping 1, AuthenticAMD\nPROCESSOR_LEVEL: 25\nPROCESSOR_REVISION: 7401\nPROGRAMDATA: C:\\ProgramData\nPROGRAMFILES: C:\\Program Files\nPROGRAMFILES(X86): C:\\Program Files (x86)\nPROGRAMW6432: C:\\Program Files\nPSMODULEPATH: C:\\Program Files\\WindowsPowerShell\\Modules;C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\nPUBLIC: C:\\Users\\Public\nPYDEVD_DISABLE_FILE_VALIDATION: 1\nPYTHONIOENCODING: utf-8\nPY_PYTHON: C:\\ProgramData\\miniconda3\\\nQUARTO_BIN_PATH: C:\\PROGRA~1\\Quarto\\bin\nQUARTO_DENO: C:\\PROGRA~1\\Quarto\\bin\\tools\\x86_64\\deno\nQUARTO_DOCUMENT_PATH: D:\\Documentos\\JOBS\\DNPE\\CursoPython\\posts\\Getting Started\nQUARTO_FIG_DPI: 192\nQUARTO_FIG_FORMAT: png\nQUARTO_FIG_HEIGHT: 5\nQUARTO_FIG_WIDTH: 7\nQUARTO_PROFILE: \nQUARTO_PROJECT_ROOT: D:\\Documentos\\JOBS\\DNPE\\CursoPython\nQUARTO_PYTHON: C:\\ProgramData\\miniconda3\\\nQUARTO_RENDER_TOKEN: d58cdf6e-3711-4e07-8eb4-aff6d785f59d\nQUARTO_SHARE_PATH: C:\\PROGRA~1\\Quarto\\share\nRETICULATE_PYTHON: C:\\ProgramData\\miniconda3\\\nRMARKDOWN_MATHJAX_PATH: C:/Program Files/RStudio/resources/app/resources/mathjax-27\nRSTUDIO: 1\nRSTUDIO_CHILD_PROCESS_PANE: job\nRSTUDIO_CLI_HYPERLINKS: true\nRSTUDIO_CONSOLE_COLOR: 256\nRSTUDIO_CONSOLE_WIDTH: 214\nRSTUDIO_DESKTOP_EXE: C:\\Program Files\\RStudio\\rstudio.exe\nRSTUDIO_MSYS_SSH: C:/Program Files/RStudio/resources/app/bin/msys-ssh-1000-18\nRSTUDIO_PANDOC: C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools\nRSTUDIO_PROGRAM_MODE: desktop\nRSTUDIO_SESSION_PID: 2744\nRSTUDIO_SESSION_PORT: 30235\nRSTUDIO_USER_IDENTITY: Jason\nRSTUDIO_WINUTILS: C:/Program Files/RStudio/resources/app/bin/winutils\nRS_LOCAL_PEER: \\\\.\\pipe\\30235-rsession\nRS_LOG_LEVEL: WARN\nRS_RPOSTBACK_PATH: C:/Program Files/RStudio/resources/app/bin/rpostback.exe\nRS_SHARED_SECRET: 13053e90-8957-4e76-8449-36975e2e2274\nRTOOLS44_HOME: C:\\rtools44\nR_ARCH: /x64\nR_CLI_HAS_HYPERLINK_IDE_HELP: true\nR_CLI_HAS_HYPERLINK_IDE_RUN: true\nR_CLI_HAS_HYPERLINK_IDE_VIGNETTE: true\nR_COMPILED_BY: gcc 13.2.0\nR_DOC_DIR: C:/PROGRA~1/R/R-44~1.0PA/doc\nR_HOME: C:/PROGRA~1/R/R-44~1.0PA\nR_INCLUDE_DIR: C:/PROGRA~1/R/R-44~1.0PA/include\nR_LIBS_SITE: C:/PROGRA~1/R/R-44~1.0PA/site-library\nR_LIBS_USER: C:\\Users\\Jason\\AppData\\Local/R/win-library/4.4\nR_PLATFORM: \nR_RTOOLS44_PATH: C:\\rtools44/x86_64-w64-mingw32.static.posix/bin;C:\\rtools44/usr/bin\nR_RUNTIME: ucrt\nR_SHARE_DIR: C:/PROGRA~1/R/R-44~1.0PA/share\nR_USER: C:/Users/Jason/OneDrive/Documents\nSESSIONNAME: Console\nSSH_ASKPASS: rpostback-askpass\nSYSTEMDRIVE: C:\nSYSTEMROOT: C:\\Windows\nTEMP: C:\\Users\\Jason\\AppData\\Local\\Temp\nTERM: xterm-color\nTMP: C:\\Users\\Jason\\AppData\\Local\\Temp\nUSERDOMAIN: JEISONALARCON\nUSERDOMAIN_ROAMINGPROFILE: JEISONALARCON\nUSERNAME: Jason\nUSERPROFILE: C:\\Users\\Jason\nWINDIR: C:\\Windows\nPYDEVD_USE_FRAME_EVAL: NO\nCLICOLOR: 1\nFORCE_COLOR: 1\nPAGER: cat\nGIT_PAGER: cat\n\n\nPython Enhancement Proposal (PEP): https://peps.python.org/pep-0008/\nhttps://docs.python.org/es/3/library/trace.html python -m trace ‚Äìcount -C . somefile.py Esto ejecutar√° somefile.py y generar√° listados anotados de todos los m√≥dulos de Python importados durante la ejecuci√≥n en el directorio actual1."
  }
]