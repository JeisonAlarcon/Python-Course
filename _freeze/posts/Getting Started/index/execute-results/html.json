{
  "hash": "245625fdb18d0b88b14955875910835b",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle:   \"Getting Started\"\ndate:    \"2024-06-01\"\nimage:   \"Featured Image.jpg\"\njupyter: python3\nfrom:    markdown+emoji\ncategories: [Python Interpreter, Basics, IPython]\n---\n\n\n# :nerd_face: **CONTEXTO, CONFIGURACIÓN E INTERACCIÓN** :snake:\n\nEste curso es una introducción al trabajo con datos en [Python](https://www.python.org/), ofreciendo una visión general de las principales características de las estructuras de datos y librerías incorporadas para la manipulación de datos.\n\nEl enfoque principal del curso es el análisis de datos basados en tablas y la preparación de datos para conjuntos pequeños que puedan manejarse en un ordenador personal. Para utilizar estas herramientas, a veces es necesario organizar los datos desordenados en una forma tabular. Python es ideal para esto, y cuanto más familiarizado esté con el lenguaje y sus tipos de datos, más fácil será preparar los conjuntos de datos para su análisis.\n\n------------------------------------------------------------------------\n\n## :gear: *Configuración Inicial*\n\n### Rstudio\n\nUsaremos la **IDE** de [Rstudio](https://quarto.org/docs/tools/rstudio.html) (*claramente no nos limitaremos a ella, usaremos [Jupyter Notebook](https://jupyter.org/), [VSC](https://quarto.org/docs/tools/vscode.html), [Google Colab](https://colab.research.google.com/), etc*). Pero más adelante trabajaremos con ambos lenguajes (`Python` y `R`) simultáneamente por lo cual nos servirá realizar esta configuración.\n\n1.  Primero necesita conocer con exactitud la ruta del ejecutable `python.exe` :collision: que desea usar (*sea con Python, conda, venv, etc*). Para ello abra la consola de su intérprete (*si usa un environment en particular no olvide ingresar a él* :inbox_tray:) y ejecute los comandos mostrados. Guarde dicha dirección en el portapapeles :paperclip:.\n\n::: {#be4530a5 .cell execution_count=1}\n``` {.python .cell-code}\npython\nimport sys\nprint(sys.executable)\n```\n:::\n\n\n![](../../files/images/SysExecutable.png)\n\n2.  Ahora que conoce la dirección correcta de su intérprete de Python :card_index:, diríjase a la ruta mostrada en `Rstudio`. :eyes: En ocasiones no le saldrá para ser seleccionado, por eso es mejor tener la ruta, péguela en la casilla y espere unos segundos :watch: que lo reconozca antes de salir y darle guardar o aplicar (*si realiza lo anterior de forma muy rápida no le quedará*). Le pedirá que reinicie sesión y ya deberá quedar si vuelve a ingresar.\n\n![](../../files/images/PyInterpreter.png)\n\n3.  Por último instalaremos una librería que nos proporcionará un conjunto completo de herramientas para la interoperabilidad entre `Python` y `R` :hammer_and_wrench:.\n\n::: {#14b30db1 .cell execution_count=2}\n``` {.python .cell-code}\ninstall.packages(\"reticulate\")\n```\n:::\n\n\n### Conda\n\nComo usaremos dentro de los `.qmd` el parámetro `jupyter: python3`, es necesario tener instalada dicha librería en su intérprete :computer:, para lo cual ejecute (*dentro de su kernel a usar y environment elegido*):\n\n::: {#931195f2 .cell execution_count=3}\n``` {.python .cell-code}\nconda install jupyter\n# conda install numpy pandas scikit-learn matplotlib seaborn jupyter\n```\n:::\n\n\nCompruebe que efectivamente haya sido descargado con:\n\n::: {#c1c489cf .cell execution_count=4}\n``` {.python .cell-code}\nconda list\n```\n:::\n\n\n### Quarto\n\nSí ejecuta el siguiente comando en el terminal :keyboard:, deberá obtener algo como lo siguiente:\n\n\n```{shell}\nquarto check jupyter\n```\n\n\n![](../../files/images/CheckJupyter.png)\n\nComo puede observar tenemos un problema :warning: y es que **no quedó** el kernel que elegimos desde un inicio. Y el error mostrado se debe a que obviamente hay módulos que no hemos instalado en dicho intérprete que `Quarto` selecciona por defecto. Si desea obtener más información de dicho error consulte: [Quarto Uses Wrong Python Version](https://github.com/quarto-dev/quarto-cli/discussions/3977).\n\nPara *\"corregir\"* lo anterior debemos apoyarnos de la [documentación oficial](https://quarto.org/docs/projects/environment.html), la cual indica que se debe crear un archivo `_environment` (*sí así tal cual sin extensión alguna*) y establecer los valores para `QUARTO_PYTHON=\"C:\\ProgramData\\miniconda3\\\"` :heavy_check_mark:. Así conseguimos que `Quarto` pueda establecer y fijar dicha configuración local para nuestro `.qmd`.\n\n-   `QUARTO_PYTHON` se establece en: {{< env QUARTO_PYTHON >}}\n-   `PY_PYTHON` se establece en: {{< env PY_PYTHON >}}\n-   `RETICULATE_PYTHON` se establece en: {{< env RETICULATE_PYTHON >}}\n\nEl siguiente [blog](https://eraheem.com/blog/2023/11/20/quarto-jupyter-conda-env-rstudio-config/) :notebook_with_decorative_cover: explica demasiado bien lo que acabamos de hacer a mayor detalle, para renderizar un documento `Quarto` con un entorno específico en `RStudio/Posit`.\n\n:green_circle: Finalmente, cree y ejecute un nuevo `.qmd`, puede utilizar la [plantilla ejemplo](https://quarto.org/docs/computations/python.html#code-blocks), y agregue el siguiente chunk para que verifique por su propia cuenta que, a pesar de que Quarto a nivel global está usando otro interprete, al definir el `_environment` queda con el que usted especifica.\n\n::: {#ee313e70 .cell execution_count=5}\n``` {.python .cell-code}\nimport sys\nprint(sys.executable)\nprint(sys.prefix)\nprint (sys.version)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nC:\\ProgramData\\miniconda3\\pythonw.exe\nC:\\ProgramData\\miniconda3\n3.12.2 | packaged by Anaconda, Inc. | (main, Feb 27 2024, 17:28:07) [MSC v.1916 64 bit (AMD64)]\n```\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n## :robot: [*IPython*](https://ipython.readthedocs.io/en/stable)\n\n:bookmark: Cualquier comando estándar de shell puede ser utilizado directamente en `IPython` anteponiendo el carácter `!`. Por ejemplo,\n\n::: {#858ddc7f .cell execution_count=6}\n``` {.python .cell-code}\n# : ....................... Shell Commands en IPython ........................ :\n!ls\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBooks\nLICENSE\nProfile.jpg\nPython Course.Rproj\n_environment\n_freeze\n_publish.yml\n_quarto.yml\n_site\nabout.qmd\nfiles\nindex.qmd\nposts\nstyles.css\n```\n:::\n:::\n\n\n::: {#a257f777 .cell execution_count=7}\n``` {.python .cell-code}\ndirectory = !pwd\nprint(directory)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['/d/Documentos/JOBS/DNPE/CursoPython']\n```\n:::\n:::\n\n\n::: {#79d356fb .cell execution_count=8}\n``` {.python .cell-code}\nmessage = \"Imprimiendo un texto desde shell\"\n!echo {message}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nImprimiendo un texto desde shell\n```\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n## :sparkles: *Conceptos Básicos*\n\n-   :triangular_ruler: **Identación (*no llaves* {} )**: Python utiliza espacios en blanco (*tabuladores o espacios*) para estructurar el código en lugar de utilizar llaves como en muchos otros lenguajes como `R` y `C++`.\n-   :symbols: **No se necesita terminar con `;`**: El punto y coma puede usarse para separar múltiples sentencias en una sola línea. `a = 1; b = 2; c = 3`\n-   :label: Las cadenas admiten tanto comillas simples `'` como comillas dobles `\"`: Se prefieren las comillas dobles, y para cadenas de varias líneas con saltos de línea, puede utilizar comillas triples `\"\"\"`.\n-   :ab: **Vinculación (*binding*)**: En otros lenguajes, la asignación hará que se copien los datos. En Python, hace que se refieran ahora al mismo objeto,\n\n::: {#95069914 .cell execution_count=9}\n``` {.python .cell-code}\na = [1, 2, 3]\nb = a\na.append(4)\nb\n```\n\n::: {.cell-output .cell-output-display execution_count=166}\n```\n[1, 2, 3, 4]\n```\n:::\n:::\n\n\n::: {#4c464a98 .cell execution_count=10}\n``` {.python .cell-code}\n# Cuando se pasan objetos como argumentos a una función, se crean nuevas variables\n# locales que hacen referencia a los objetos originales sin necesidad de copiarlos\ndef myAppend(lista, elemento):\n  lista.append(elemento)\ndata = [1, 2, 3]\nmyAppend(data, 4)\ndata\n```\n\n::: {.cell-output .cell-output-display execution_count=167}\n```\n[1, 2, 3, 4]\n```\n:::\n:::\n\n\n-   :muscle: **Un lenguaje tipado**: Cada objeto tiene un tipo (*o clase*) específico, con la ventaja de que las variables no tienen un tipo inherente asociado a ellas.\n\n::: {#81e622eb .cell execution_count=11}\n``` {.python .cell-code}\na = 5      ; print(type(a))\na = \"cinco\"; print(type(a))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'int'>\n<class 'str'>\n```\n:::\n:::\n\n\n::: {#6225a732 .cell execution_count=12}\n``` {.python .cell-code}\n\"5\" + 5\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg ansi-bold\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg ansi-bold\">TypeError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg ansi-bold\">In[169], line 1</span>\n<span class=\"ansi-green-fg ansi-bold\">----&gt; 1</span> <span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">5</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">+</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">5</span>\n\n<span class=\"ansi-red-fg ansi-bold\">TypeError</span>: can only concatenate str (not \"int\") to str</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#e72187d5 .cell execution_count=13}\n``` {.python .cell-code}\na = 4.5\nb = 2\nprint(a / b)\nprint(isinstance(a, (int, float)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2.25\nTrue\n```\n:::\n:::\n\n\n### Help & Time\n\n::: {#a0eb998f .cell execution_count=14}\n``` {.python .cell-code}\n# Acceso a la Documentación:\nhelp(len)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHelp on built-in function len in module builtins:\n\nlen(obj, /)\n    Return the number of items in a container.\n\n```\n:::\n:::\n\n\n::: {#26916b77 .cell execution_count=15}\n``` {.python .cell-code}\nletra = \"a\"\n# letra.<Press Tab>\ngetattr(letra, \"split\")\n```\n\n::: {.cell-output .cell-output-display execution_count=172}\n```\n<function str.split(sep=None, maxsplit=-1)>\n```\n:::\n:::\n\n\n::: {#39fe1b65 .cell execution_count=16}\n``` {.python .cell-code}\n# Guión bajo '_' para salidas anteriores\n1+1\n2+2\nprint(_)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<built-in method split of str object at 0x00007FFB2B841CE0>\n```\n:::\n:::\n\n\n::: {#ee250105 .cell execution_count=17}\n``` {.python .cell-code}\n# Acceder a las entradas anteriores (historial)\n%history -n 1-3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   1:\nimport sys\nprint(sys.executable)\nprint(sys.prefix)\nprint (sys.version)\n   2:\n# : ....................... Shell Commands en IPython ........................ :\n!ls\n   3:\ndirectory = !pwd\nprint(directory)\n```\n:::\n:::\n\n\n::: {#63c0d5d3 .cell execution_count=18}\n``` {.python .cell-code}\n# : .......................... Timing Code Snippets .......................... :\n%timeit sum(range(100))   # IPython Magic Commands\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n362 ns ± 1.56 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n```\n:::\n:::\n\n\n::: {#a53e7551 .cell execution_count=19}\n``` {.python .cell-code}\n%%timeit                  # Cuando es más complejo, baja el número de repeticiones\ntotal = 0\nfor i in range(1000):\n  for j in range(1000):\n    total += i * (-1) ** j\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n84.9 ms ± 897 μs per loop (mean ± std. dev. of 7 runs, 10 loops each)\n```\n:::\n:::\n\n\n### Imports\n\n```{{python}}\n# Modulo.py\nPI = 3.14159\ndef cuadrado(x):\n return x ** 2\n```\n\n::: {#85efc2a1 .cell execution_count=20}\n``` {.python .cell-code}\nimport Modulo\nprint(Modulo.cuadrado(5))\npi = Modulo.PI\n# ......................................\nfrom Modulo import PI, cuadrado\ncuadrado(PI)\n# ......................................\nimport Modulo as m\nfrom Modulo import PI as kte, cuadrado as elevado\n\nr1 = m.cuadrado(kte); print(r1)\nr2 = elevado(6)     ; print(r2)\n```\n:::\n\n\n### Operadores Binarios y de Comparación\n\n![](../../files/images/BinaryOperators.png)\n\n::: {#e4944176 .cell execution_count=21}\n``` {.python .cell-code}\na = [1, 2, 3]\nb = a\nc = list(a) # Crea una copia\n\nprint(a is b)\nprint(a is not c)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue\nTrue\n```\n:::\n:::\n\n\n::: {#8308071d .cell execution_count=22}\n``` {.python .cell-code}\na.append(4)\na == c\n```\n\n::: {.cell-output .cell-output-display execution_count=178}\n```\nFalse\n```\n:::\n:::\n\n\n::: {#cd083a4e .cell execution_count=23}\n``` {.python .cell-code}\n# Intercambiar los nombres de las variables:\na, b = 1, 2\n# tmp = a\n# a = b\n# b = tmp\nb, a = a, b\nprint(f'a = {a}, b = {b}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\na = 2, b = 1\n```\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n## :information_source: *Tipos Estándar*\n\n| Tipo    | Descripción                                                                               |\n|-------------|-----------------------------------------------------------|\n| `None`  | El valor \"nulo\" de Python (*solo existe una instancia del objeto `None`*)                 |\n| `str`   | Tipo de cadena; contiene cadenas Unicode                                                  |\n| `bytes` | Datos binarios en bruto                                                                   |\n| `float` | Número de punto flotante de doble precisión (*nota que no hay un tipo `double` separado*) |\n| `bool`  | Un valor booleano `True` o `False`                                                        |\n| `int`   | Entero de precisión arbitraria                                                            |\n\n### Booleans\n\n::: {#eec87e81 .cell execution_count=24}\n``` {.python .cell-code}\nprint(int(False)); print(int(True))\nprint(True + False)\nprint(bool(2024.75)) # Todo valor !=0 se convierte en True\nprint(bool(\".\"))     # Todo valor !=\"\" se convierte en True\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\n1\n1\nTrue\nTrue\n```\n:::\n:::\n\n\n### [Strings](https://docs.python.org/3/library/string.html)\n\nAbc.\n\n::: {#84db1eb5 .cell execution_count=25}\n``` {.python .cell-code}\na = \"Hola mundo \\\\>\"\nb = \"\"\"\nEsta cadena es más larga que\nabarca varias líneas\n\"\"\"\nc = r\"D:\\Documentos\\Carpeta\"\n\nprint(a); print(b); print(c)\nb.count(\"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHola mundo \\>\n\nEsta cadena es más larga que\nabarca varias líneas\n\nD:\\Documentos\\Carpeta\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=181}\n```\n3\n```\n:::\n:::\n\n\n::: {#aa73e49c .cell execution_count=26}\n``` {.python .cell-code}\n# Los strings en Python son inmutables: no se puede modificar una cadena\nprint(a[5])\na[5] = \"M\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nm\n```\n:::\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg ansi-bold\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg ansi-bold\">TypeError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg ansi-bold\">In[182], line 3</span>\n<span class=\"ansi-green-fg\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Los strings en Python son inmutables: no se puede modificar una cadena</span>\n<span class=\"ansi-green-fg\">      2</span> <span style=\"color:rgb(0,135,0)\">print</span>(a[<span style=\"color:rgb(98,98,98)\">5</span>])\n<span class=\"ansi-green-fg ansi-bold\">----&gt; 3</span> <span class=\"ansi-yellow-bg\">a</span><span class=\"ansi-yellow-bg\">[</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">5</span><span class=\"ansi-yellow-bg\">]</span> <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">M</span><span style=\"color:rgb(175,0,0)\">\"</span>\n\n<span class=\"ansi-red-fg ansi-bold\">TypeError</span>: 'str' object does not support item assignment</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#f9d40313 .cell execution_count=27}\n``` {.python .cell-code}\na.replace(\"m\", \"M\")\n```\n\n::: {.cell-output .cell-output-display execution_count=183}\n```\n'Hola Mundo \\\\>'\n```\n:::\n:::\n\n\n::: {#389f645b .cell execution_count=28}\n``` {.python .cell-code}\na       # Tras esta operación, la variable no se modifica\n```\n\n::: {.cell-output .cell-output-display execution_count=184}\n```\n'Hola mundo \\\\>'\n```\n:::\n:::\n\n\n::: {#cac82855 .cell execution_count=29}\n``` {.python .cell-code}\nlist(a) # Las cadenas son una secuencia de caracteres Unicode\n```\n\n::: {.cell-output .cell-output-display execution_count=185}\n```\n['H', 'o', 'l', 'a', ' ', 'm', 'u', 'n', 'd', 'o', ' ', '\\\\', '>']\n```\n:::\n:::\n\n\n#### **Formatted string**\n\nExisten varios métodos para formatear cadenas de texto, entre los cuales encontramos:\n\n1. ***Operador de Formato `%`***\n\n::: {#5a0c9917 .cell execution_count=30}\n``` {.python .cell-code}\nNombre = \"Pepito\"\nEdad = 33 \nPi   = 3.141592\nprint(\"Hola, mi nombre es %s y tengo %d años. Y sé que pi vale: %.2f.\" % (Nombre, Edad, Pi))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHola, mi nombre es Pepito y tengo 33 años. Y sé que pi vale: 3.14.\n```\n:::\n:::\n\n\n2. ***Método `.format()`***\n\n::: {#ab7b0545 .cell execution_count=31}\n``` {.python .cell-code}\nprint(\"Hola, mi nombre es {} y tengo {} años. Y sé que pi vale: {:.2f}.\".format(Nombre, Edad, Pi))\nprint(\"Nombre: {name}, Edad: {age}\".format(name = \"Luis\", age = 33))\nprint(\"El {0} se encuentra en el {1} y el {1} se encuentra en el {0}.\".format(\"sol\", \"cielo\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHola, mi nombre es Pepito y tengo 33 años. Y sé que pi vale: 3.14.\nNombre: Luis, Edad: 33\nEl sol se encuentra en el cielo y el cielo se encuentra en el sol.\n```\n:::\n:::\n\n\n::: {#69ded164 .cell execution_count=32}\n``` {.python .cell-code}\n# 0:.3f El 1re valor será un flotantes con 3 decimales\n# 1:s   El 2do valor será un string\n# 2:d   El 3re valor será un entero\ntemplate = \"{0:.3f} {1:s} equivalen a US${2:d}\"\ntemplate.format(3.960, \"pesos Colombianos\", 1) # Intente modificar el tipo de alguno de estos\n```\n\n::: {.cell-output .cell-output-display execution_count=188}\n```\n'3.960 pesos Colombianos equivalen a US$1'\n```\n:::\n:::\n\n\n3. ***f-strings***\n\n::: {#f413c89f .cell execution_count=33}\n``` {.python .cell-code}\nTasa   = 3.960\nMoneda = \"Colombianos\"\nf\"{Tasa:.4f} pesos {Moneda} equivalen a US${Tasa/Tasa}\"\n```\n\n::: {.cell-output .cell-output-display execution_count=189}\n```\n'3.9600 pesos Colombianos equivalen a US$1.0'\n```\n:::\n:::\n\n\n::: {#ec3736a9 .cell execution_count=34}\n``` {.python .cell-code}\n# Cálculos Dentro:\na = 5; b = 10\nprint(f\"La suma de {a} y {b} es {a + b}. Además a*b = {a*b}\")\n# Alinear Texto:\nprint(f\"{'izquierda':<10} {'centrado':^10} {'derecha':>10}\")\n# Mostrar Números en Diferentes Bases:\nNumero = 255\nprint(f\"Decimal: {Numero}, Binario: {Numero:b}, Hexadecimal: {Numero:x}, Octal: {Numero:o}\")\n# Incluir Expresiones y Métodos:\nTxt = \"Amo Python\"\nprint(f\"El texto en mayúsculas es {Txt.upper()}.\")\n# Combinación con Diccionarios:\nPais = {\"nombre\": \"Colombia\", \"NoPoblacion\": 50}\nprint(f\"País: {Pais['nombre']}, Habitantes: {Pais['NoPoblacion']}\")\n# Incluir Llaves Literales:\nprint(f\"Este es un valor literal en llaves: {{Numero}}, y este es el valor de la variable: {Numero}.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLa suma de 5 y 10 es 15. Además a*b = 50\nizquierda   centrado     derecha\nDecimal: 255, Binario: 11111111, Hexadecimal: ff, Octal: 377\nEl texto en mayúsculas es AMO PYTHON.\nPaís: Colombia, Habitantes: 50\nEste es un valor literal en llaves: {Numero}, y este es el valor de la variable: 255.\n```\n:::\n:::\n\n\n4. ***Método `string.Template`***\n\n::: {#34977001 .cell execution_count=35}\n``` {.python .cell-code}\nfrom string import Template\ntemplate = Template(\"Hola, mi nombre es $name y tengo $age años.\")\nmensaje  = template.substitute(name = \"Pepito\", age = 33)\nprint(mensaje)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHola, mi nombre es Pepito y tengo 33 años.\n```\n:::\n:::\n\n\n| Método               | Sintaxis                       | Ventajas                                           | Desventajas                                   |\n|----------------------|--------------------------------|----------------------------------------------------|-----------------------------------------------|\n| Operador `%`         | `Hola, %s` % \"mundo\"           | Simple y familiar para quienes conocen C           | Menos flexible y más propenso a errores       |\n| Método `.format()`   | `Hola, {}`.format(\"mundo\")     | Muy flexible, soporta nombres y posiciones         | Sintaxis más verbosa                          |\n| f-strings            | `f\"Hola, {variable}\"`          | Muy legible, permite expresiones dentro de `{}`    | Disponible solo en Python 3.6+                |\n| `string.Template`    | `Template(\"Hola, $nombre\")`    | Simple y seguro, fácil de leer                     | Menos potente para formateo complejo          |\n\n### Type casting\n\nAbc.\n\n### None\n\nAbc.\n\n### Dates and times\n\nAbc.\n\n::: {#8a9ab82d .cell execution_count=36}\n``` {.python .cell-code}\nfrom datetime import datetime, date, time\ndt = datetime(2024, 1, 31, 20, 30, 21)\n\ndt.day\ndt.date()\ndt.time()\ndt.strftime(\"%Y-%m-%d %H:%M\")\n```\n\n::: {.cell-output .cell-output-display execution_count=192}\n```\n'2024-01-31 20:30'\n```\n:::\n:::\n\n\n::: {#8c3fdae7 .cell execution_count=37}\n``` {.python .cell-code}\ndt_hour = dt.replace(minute = 0, second = 0)\ndt_hour\n```\n\n::: {.cell-output .cell-output-display execution_count=193}\n```\ndatetime.datetime(2024, 1, 31, 20, 0)\n```\n:::\n:::\n\n\n::: {#0a5834cf .cell execution_count=38}\n``` {.python .cell-code}\ndelta = datetime.now() - dt\ndelta\n```\n\n::: {.cell-output .cell-output-display execution_count=194}\n```\ndatetime.timedelta(days=141, seconds=5334, microseconds=636194)\n```\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n## :triangular_flag_on_post: *Objetos Mutables e Inmutables*\n\n### Tuplas\n\n::: callout-note\nUna tupla es una secuencia de objetos de longitud fija e **inmutable** (*una vez asignada no puede modificarse*). La forma más sencilla de crear una tupla es con una secuencia de valores separados por comas entre paréntesis\n:::\n\n\n\n\n\n### Listas\n\n::: callout-note\nLas listas son de longitud variable y su contenido puede modificarse (son **mutables**).\n:::\n\n\n\n\n\n::: callout-caution\nLa inserción (`insert`) es más costosa computacionalmente que la adición (`append`), ya que las referencias a los elementos subsiguientes deben desplazarse internamente para dejar espacio al nuevo elemento.\n:::\n\n\n\n### Diccionarios\n\n::: callout-note\nUn diccionario (*conocido en otros lengujaes como `maps` o `associative arrays`*) almacena una colección de pares `clave-valor`, donde `clave` y `valor` son objetos Python. Cada clave está asociada a un valor, de modo que un valor puede ser convenientemente recuperado, insertado, modificado o eliminado dada una clave en particular.\n:::\n\n### Conjuntos\n\n::: callout-warning\nThis is an example of an tip callout\n:::\n\n------------------------------------------------------------------------\n\n## :loop: *Flujo de Control*\n\n### `if`, `elif`, and `else`\n\n\n\n### `for`\n\n\n\n\n\n### `while`\n\n### `pass`\n\nEs la sentencia `no-op` (o `no hacer nada`) de Python. Puede usarse en bloques en los que no se va a realizar ninguna acción. Sólo es necesaria porque Python utiliza espacios en blanco para delimitar los bloques.\n\n\n\n### `range`\n\n\n\n<!-- https://jjallaire.github.io/pydata-quarto-dashboards/#/learning-more -->\n\n<!-- import numpy as np import matplotlib.pyplot as plt import pandas as pd import seaborn as sns import statsmodels as sm pd.options.display.max_columns = 20 pd.options.display.max_rows = 20 pd.options.display.max_colwidth = 80 np.set_printoptions(precision=4, suppress=True) -->\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}