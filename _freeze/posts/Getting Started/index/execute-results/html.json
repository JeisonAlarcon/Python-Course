{
  "hash": "6333f575fa5cea7568498c89cd1fd8d3",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle:   \"Getting Started\"\ndate:    \"2024-06-01\"\nimage:   \"Featured Image.jpg\"\njupyter: python3\nfrom:    markdown+emoji\ncategories: [Python Interpreter, Basics, IPython]\n---\n\n\n# :nerd_face: **CONTEXTO, CONFIGURACIÓN E INTERACCIÓN** :snake:\n\nEste curso es una introducción al trabajo con datos en [Python](https://www.python.org/), ofreciendo una visión general de las principales características de las estructuras de datos y librerías incorporadas para la manipulación de datos.\n\nEl enfoque principal del curso es el análisis de datos basados en tablas y la preparación de datos para conjuntos pequeños que puedan manejarse en un ordenador personal. Para utilizar estas herramientas, a veces es necesario organizar los datos desordenados en una forma tabular. Python es ideal para esto, y cuanto más familiarizado esté con el lenguaje y sus tipos de datos, más fácil será preparar los conjuntos de datos para su análisis.\n\n------------------------------------------------------------------------\n\n## :gear: *Configuración Inicial*\n\n### Rstudio\n\nUsaremos la **IDE** de [Rstudio](https://quarto.org/docs/tools/rstudio.html) (*claramente no nos limitaremos a ella, usaremos [Jupyter Notebook](https://jupyter.org/), [VSC](https://quarto.org/docs/tools/vscode.html), [Google Colab](https://colab.research.google.com/), etc*). Pero más adelante trabajaremos con ambos lenguajes (`Python` y `R`) simultáneamente por lo cual nos servirá realizar esta configuración.\n\n1.  Primero necesita conocer con exactitud la ruta del ejecutable `python.exe` :collision: que desea usar (*sea con Python, conda, venv, etc*). Para ello abra la consola de su intérprete (*si usa un environment en particular no olvide ingresar a él* :inbox_tray:) y ejecute los comandos mostrados. Guarde dicha dirección en el portapapeles :paperclip:.\n\n::: {#f97097f4 .cell execution_count=1}\n``` {.python .cell-code}\npython\nimport sys\nprint(sys.executable)\n```\n:::\n\n\n![](../../files/images/SysExecutable.png)\n\n2.  Ahora que conoce la dirección correcta de su intérprete de Python :card_index:, diríjase a la ruta mostrada en `Rstudio`. :eyes: En ocasiones no le saldrá para ser seleccionado, por eso es mejor tener la ruta, péguela en la casilla y espere unos segundos :watch: que lo reconozca antes de salir y darle guardar o aplicar (*si realiza lo anterior de forma muy rápida no le quedará*). Le pedirá que reinicie sesión y ya deberá quedar si vuelve a ingresar.\n\n![](../../files/images/PyInterpreter.png)\n\n3.  Por último instalaremos una librería que nos proporcionará un conjunto completo de herramientas para la interoperabilidad entre `Python` y `R` :hammer_and_wrench:.\n\n::: {#7679d88b .cell execution_count=2}\n``` {.python .cell-code}\ninstall.packages(\"reticulate\")\n```\n:::\n\n\n### Conda\n\nComo usaremos dentro de los `.qmd` el parámetro `jupyter: python3`, es necesario tener instalada dicha librería en su intérprete :computer:, para lo cual ejecute (*dentro de su kernel a usar y environment elegido*):\n\n::: {#dc445a50 .cell execution_count=3}\n``` {.python .cell-code}\nconda install jupyter\n# conda install numpy pandas scikit-learn matplotlib seaborn jupyter\n```\n:::\n\n\nCompruebe que efectivamente haya sido descargado con:\n\n::: {#429fc4f5 .cell execution_count=4}\n``` {.python .cell-code}\nconda list\n```\n:::\n\n\n### Quarto\n\nSí ejecuta el siguiente comando en el terminal :keyboard:, deberá obtener algo como lo siguiente:\n\n\n```{shell}\nquarto check jupyter\n```\n\n\n![](../../files/images/CheckJupyter.png)\n\nComo puede observar tenemos un problema :warning: y es que **no quedó** el kernel que elegimos desde un inicio. Y el error mostrado se debe a que obviamente hay módulos que no hemos instalado en dicho intérprete que `Quarto` selecciona por defecto. Si desea obtener más información de dicho error consulte: [Quarto Uses Wrong Python Version](https://github.com/quarto-dev/quarto-cli/discussions/3977).\n\nPara *\"corregir\"* lo anterior debemos apoyarnos de la [documentación oficial](https://quarto.org/docs/projects/environment.html), la cual indica que se debe crear un archivo `_environment` (*sí así tal cual sin extensión alguna*) y establecer los valores para `QUARTO_PYTHON=\"C:\\ProgramData\\miniconda3\\\"` :heavy_check_mark:. Así conseguimos que `Quarto` pueda establecer y fijar dicha configuración local para nuestro `.qmd`.\n\n-   `QUARTO_PYTHON` se establece en: {{< env QUARTO_PYTHON >}}\n-   `PY_PYTHON` se establece en: {{< env PY_PYTHON >}}\n-   `RETICULATE_PYTHON` se establece en: {{< env RETICULATE_PYTHON >}}\n\nEl siguiente [blog](https://eraheem.com/blog/2023/11/20/quarto-jupyter-conda-env-rstudio-config/) :notebook_with_decorative_cover: explica demasiado bien lo que acabamos de hacer a mayor detalle, para renderizar un documento `Quarto` con un entorno específico en `RStudio/Posit`.\n\n:green_circle: Finalmente, cree y ejecute un nuevo `.qmd`, puede utilizar la [plantilla ejemplo](https://quarto.org/docs/computations/python.html#code-blocks), y agregue el siguiente chunk para que verifique por su propia cuenta que, a pesar de que Quarto a nivel global está usando otro intérprete, al definir el `_environment` queda con el que usted especifica.\n\n::: {#dd55a241 .cell execution_count=5}\n``` {.python .cell-code}\nimport sys\nprint(sys.executable)\nprint(sys.prefix)\nprint (sys.version)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nC:\\ProgramData\\miniconda3\\pythonw.exe\nC:\\ProgramData\\miniconda3\n3.12.2 | packaged by Anaconda, Inc. | (main, Feb 27 2024, 17:28:07) [MSC v.1916 64 bit (AMD64)]\n```\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n## :robot: [*IPython*](https://ipython.readthedocs.io/en/stable)\n\n:bookmark: Cualquier comando estándar de shell puede ser utilizado directamente en `IPython` anteponiendo el carácter `!`. Por ejemplo,\n\n::: {#dfae9427 .cell execution_count=6}\n``` {.python .cell-code}\n# : ....................... Shell Commands en IPython ........................ :\n!ls\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBooks\nLICENSE\nProfile.jpg\nPython Course.Rproj\n_environment\n_freeze\n_publish.yml\n_quarto.yml\n_site\nabout.qmd\nfiles\nindex.qmd\nposts\nstyles.css\n```\n:::\n:::\n\n\n::: {#b4537d8c .cell execution_count=7}\n``` {.python .cell-code}\ndirectory = !pwd\nprint(directory)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['/d/Documentos/JOBS/DNPE/CursoPython']\n```\n:::\n:::\n\n\n::: {#2a93f9e5 .cell execution_count=8}\n``` {.python .cell-code}\nmessage = \"Imprimiendo un texto desde shell\"\n!echo {message}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nImprimiendo un texto desde shell\n```\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n## :sparkles: *Conceptos Básicos*\n\n-   :triangular_ruler: **Identación (*no llaves* {} )**: Python utiliza espacios en blanco (*tabuladores o espacios*) para estructurar el código en lugar de utilizar llaves como en muchos otros lenguajes como `R` y `C++`.\n-   :symbols: **No se necesita terminar con `;`**: El punto y coma puede usarse para separar múltiples sentencias en una sola línea. `a = 1; b = 2; c = 3`\n-   :label: Las cadenas admiten tanto comillas simples `'` como comillas dobles `\"`: Se prefieren las comillas dobles, y para cadenas de varias líneas con saltos de línea, puede utilizar comillas triples `\"\"\"`.\n-   :ab: **Vinculación (*binding*)**: En otros lenguajes, la asignación hará que se copien los datos. En Python, hace que se refieran ahora al mismo objeto,\n\n::: {#0b822b83 .cell execution_count=9}\n``` {.python .cell-code}\na = [1, 2, 3]\nb = a\na.append(4)\nb\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n[1, 2, 3, 4]\n```\n:::\n:::\n\n\n::: {#18f6a9d9 .cell execution_count=10}\n``` {.python .cell-code}\n# Cuando se pasan objetos como argumentos a una función, se crean nuevas variables\n# locales que hacen referencia a los objetos originales sin necesidad de copiarlos\ndef myAppend(lista, elemento):\n    lista.append(elemento)\ndata = [1, 2, 3]\nmyAppend(data, 4)\ndata\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n[1, 2, 3, 4]\n```\n:::\n:::\n\n\n-   :muscle: **Un lenguaje tipado**: Cada objeto tiene un tipo (*o clase*) específico, con la ventaja de que las variables no tienen un tipo inherente asociado a ellas.\n\n::: {#b7289e0d .cell execution_count=11}\n``` {.python .cell-code}\na = 5      ; print(type(a))\na = \"cinco\"; print(type(a))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'int'>\n<class 'str'>\n```\n:::\n:::\n\n\n::: {#bdda035d .cell execution_count=12}\n``` {.python .cell-code}\n\"5\" + 5\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg ansi-bold\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg ansi-bold\">TypeError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg ansi-bold\">In[8], line 1</span>\n<span class=\"ansi-green-fg ansi-bold\">----&gt; 1</span> <span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">5</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">+</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">5</span>\n\n<span class=\"ansi-red-fg ansi-bold\">TypeError</span>: can only concatenate str (not \"int\") to str</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#a68d41de .cell execution_count=13}\n``` {.python .cell-code}\na = 4.5\nb = 2\nprint(a / b)\nprint(isinstance(a, (int, float)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2.25\nTrue\n```\n:::\n:::\n\n\n### Help & Time\n\n::: {#6d9f0286 .cell execution_count=14}\n``` {.python .cell-code}\n# Acceso a la Documentación:\nhelp(len)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHelp on built-in function len in module builtins:\n\nlen(obj, /)\n    Return the number of items in a container.\n\n```\n:::\n:::\n\n\n::: {#c3b5c427 .cell execution_count=15}\n``` {.python .cell-code}\nletra = \"a\"\n# letra.<Press Tab>\ngetattr(letra, \"split\")\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n<function str.split(sep=None, maxsplit=-1)>\n```\n:::\n:::\n\n\n::: {#109fb9ca .cell execution_count=16}\n``` {.python .cell-code}\n# Guión bajo '_' para salidas anteriores\n1+1\n2+2\nprint(_)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<built-in method split of str object at 0x00007FF807D71CE0>\n```\n:::\n:::\n\n\n::: {#3107df30 .cell execution_count=17}\n``` {.python .cell-code}\n# Acceder a las entradas anteriores (historial)\n%history -n 1-3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   1:\nimport sys\nprint(sys.executable)\nprint(sys.prefix)\nprint (sys.version)\n   2:\n# : ....................... Shell Commands en IPython ........................ :\n!ls\n   3:\ndirectory = !pwd\nprint(directory)\n```\n:::\n:::\n\n\n::: {#8d484e6f .cell execution_count=18}\n``` {.python .cell-code}\n# : .......................... Timing Code Snippets .......................... :\n%timeit sum(range(100))   # IPython Magic Commands\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n356 ns ± 1.58 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n```\n:::\n:::\n\n\n::: {#3a5cfafb .cell execution_count=19}\n``` {.python .cell-code}\n%%timeit                  # Cuando es más complejo, baja el número de repeticiones\ntotal = 0\nfor i in range(1000):\n    for j in range(1000):\n        total += i * (-1) ** j\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n84.9 ms ± 2.39 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\n```\n:::\n:::\n\n\n### Imports\n\n```{{python}}\n# Modulo.py\nPI = 3.14159\ndef cuadrado(x):\n return x ** 2\n```\n\n::: {#f9ea865f .cell execution_count=20}\n``` {.python .cell-code}\nimport Modulo\nprint(Modulo.cuadrado(5))\npi = Modulo.PI\n# ......................................\nfrom Modulo import PI, cuadrado\ncuadrado(PI)\n# ......................................\nimport Modulo as m\nfrom Modulo import PI as kte, cuadrado as elevado\n\nr1 = m.cuadrado(kte); print(r1)\nr2 = elevado(6)     ; print(r2)\n```\n:::\n\n\n### Operadores Binarios y de Comparación\n\n![](../../files/images/BinaryOperators.png)\n\n::: {#ab776113 .cell execution_count=21}\n``` {.python .cell-code}\na = [1, 2, 3]\nb = a\nc = list(a) # Crea una copia\n\nprint(a is b)\nprint(a is not c)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue\nTrue\n```\n:::\n:::\n\n\n::: {#f52432b7 .cell execution_count=22}\n``` {.python .cell-code}\na.append(4)\na == c\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\nFalse\n```\n:::\n:::\n\n\n::: {#7e394f3d .cell execution_count=23}\n``` {.python .cell-code}\n# Intercambiar los nombres de las variables:\na, b = 1, 2\n# tmp = a\n# a = b\n# b = tmp\nb, a = a, b\nprint(f'a = {a}, b = {b}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\na = 2, b = 1\n```\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n## :information_source: *Tipos Estándar*\n\n| Tipo    | Descripción                                                                               |\n|-------------|-----------------------------------------------------------|\n| `None`  | El valor \"nulo\" de Python (*solo existe una instancia del objeto `None`*)                 |\n| `str`   | Tipo de cadena; contiene cadenas Unicode                                                  |\n| `bytes` | Datos binarios en bruto                                                                   |\n| `float` | Número de punto flotante de doble precisión (*nota que no hay un tipo `double` separado*) |\n| `bool`  | Un valor booleano `True` o `False`                                                        |\n| `int`   | Entero de precisión arbitraria                                                            |\n\n### Booleans\n\n::: {#4398774e .cell execution_count=24}\n``` {.python .cell-code}\nprint(int(False)); print(int(True))\nprint(True + False)\nprint(not not not not True)\nprint(bool(2024.75)) # Todo valor !=0 se convierte en True\nprint(bool(\".\"))     # Todo valor !=\"\" se convierte en True\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\n1\n1\nTrue\nTrue\nTrue\n```\n:::\n:::\n\n\n### [Strings](https://docs.python.org/3/library/string.html)\n\n::: {#6ba893ef .cell execution_count=25}\n``` {.python .cell-code}\na = \"Hola mundo \\\\>\"\nprint(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHola mundo \\>\n```\n:::\n:::\n\n\n::: {#a3f05ced .cell execution_count=26}\n``` {.python .cell-code}\nb = \"\"\"\nEsta cadena es más larga que\nabarca varias líneas\n\"\"\"\nprint(b)\nb.count(\"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nEsta cadena es más larga que\nabarca varias líneas\n\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\n3\n```\n:::\n:::\n\n\n::: {#f91e1653 .cell execution_count=27}\n``` {.python .cell-code}\nc = r\"D:\\Documentos\\Carpeta\"\nprint(c)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nD:\\Documentos\\Carpeta\n```\n:::\n:::\n\n\n::: {#028ab868 .cell execution_count=28}\n``` {.python .cell-code}\n# Los strings en Python son inmutables: no se puede modificar una cadena\nprint(a[5])\na[5] = \"M\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nm\n```\n:::\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg ansi-bold\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg ansi-bold\">TypeError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg ansi-bold\">In[23], line 3</span>\n<span class=\"ansi-green-fg\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Los strings en Python son inmutables: no se puede modificar una cadena</span>\n<span class=\"ansi-green-fg\">      2</span> <span style=\"color:rgb(0,135,0)\">print</span>(a[<span style=\"color:rgb(98,98,98)\">5</span>])\n<span class=\"ansi-green-fg ansi-bold\">----&gt; 3</span> <span class=\"ansi-yellow-bg\">a</span><span class=\"ansi-yellow-bg\">[</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">5</span><span class=\"ansi-yellow-bg\">]</span> <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">M</span><span style=\"color:rgb(175,0,0)\">\"</span>\n\n<span class=\"ansi-red-fg ansi-bold\">TypeError</span>: 'str' object does not support item assignment</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#1b1d89a4 .cell execution_count=29}\n``` {.python .cell-code}\na.replace(\"m\", \"M\")\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\n'Hola Mundo \\\\>'\n```\n:::\n:::\n\n\n::: {#6f862afa .cell execution_count=30}\n``` {.python .cell-code}\na       # Tras esta operación, la variable no se modifica\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\n'Hola mundo \\\\>'\n```\n:::\n:::\n\n\n::: {#f49fc6e8 .cell execution_count=31}\n``` {.python .cell-code}\nlist(a) # Las cadenas son una secuencia de caracteres Unicode\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\n['H', 'o', 'l', 'a', ' ', 'm', 'u', 'n', 'd', 'o', ' ', '\\\\', '>']\n```\n:::\n:::\n\n\n#### **Formatted String**\n\nExisten varios métodos para formatear cadenas de texto, entre los cuales encontramos:\n\n1.  ***Operador de Formato `%`***\n\n::: {#7de717ad .cell execution_count=32}\n``` {.python .cell-code}\nNombre = \"Juan\"\nEdad = 33\nPi   = 3.141592\nprint(\"Hola, mi nombre es %s y tengo %d años. Y sé que pi vale: %.2f.\" % (Nombre, Edad, Pi))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHola, mi nombre es Juan y tengo 33 años. Y sé que pi vale: 3.14.\n```\n:::\n:::\n\n\n2.  ***Método `.format()`***\n\n::: {#d65772cf .cell execution_count=33}\n``` {.python .cell-code}\nprint(\"Hola, mi nombre es {} y tengo {} años. Y sé que pi vale: {:.2f}.\".format(Nombre, Edad, Pi))\nprint(\"Nombre: {name}, Edad: {age}\".format(name = \"Luis\", age = 33))\nprint(\"El {0} se encuentra en el {1} y el {1} se encuentra en el {0}.\".format(\"sol\", \"cielo\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHola, mi nombre es Juan y tengo 33 años. Y sé que pi vale: 3.14.\nNombre: Luis, Edad: 33\nEl sol se encuentra en el cielo y el cielo se encuentra en el sol.\n```\n:::\n:::\n\n\n::: {#3b24c7bb .cell execution_count=34}\n``` {.python .cell-code}\n# 0:.3f El 1re valor será un flotantes con 3 decimales\n# 1:s   El 2do valor será un string\n# 2:d   El 3re valor será un entero\ntemplate = \"{0:.3f} {1:s} equivalen a US${2:d}\"\ntemplate.format(3.960, \"pesos Colombianos\", 1) # Intente modificar el tipo de alguno de estos\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\n'3.960 pesos Colombianos equivalen a US$1'\n```\n:::\n:::\n\n\n3.  ***f-strings***\n\n::: {#22e9f027 .cell execution_count=35}\n``` {.python .cell-code}\nTasa   = 3.960\nMoneda = \"Colombianos\"\nf\"{Tasa:.4f} pesos {Moneda} equivalen a US${Tasa/Tasa}\"\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\n'3.9600 pesos Colombianos equivalen a US$1.0'\n```\n:::\n:::\n\n\n::: {#878c701e .cell execution_count=36}\n``` {.python .cell-code}\n# Cálculos Dentro:\na = 5; b = 10\nprint(f\"La suma de {a} y {b} es {a + b}. Además, a*b = {a*b}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLa suma de 5 y 10 es 15. Además, a*b = 50\n```\n:::\n:::\n\n\n::: {#3eac9b6f .cell execution_count=37}\n``` {.python .cell-code}\n# Alinear Texto:\nprint(f\"{'izquierda':<10} {'centrado':^10} {'derecha':>10}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nizquierda   centrado     derecha\n```\n:::\n:::\n\n\n::: {#590918d1 .cell execution_count=38}\n``` {.python .cell-code}\n# Mostrar Números en Diferentes Bases:\nNumero = 255\nprint(f\"Decimal: {Numero}, Binario: {Numero:b}, Hexadecimal: {Numero:x}, Octal: {Numero:o}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDecimal: 255, Binario: 11111111, Hexadecimal: ff, Octal: 377\n```\n:::\n:::\n\n\n::: {#455ea71f .cell execution_count=39}\n``` {.python .cell-code}\n# Incluir Expresiones y Métodos:\nTxt = \"Amo Python\"\nprint(f\"El texto en mayúsculas es: {Txt.upper()}.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEl texto en mayúsculas es: AMO PYTHON.\n```\n:::\n:::\n\n\n::: {#3878e35a .cell execution_count=40}\n``` {.python .cell-code}\n# Combinación con Diccionarios:\nPais = {\"nombre\": \"Colombia\", \"NoPoblacion\": 50}\nprint(f\"País: {Pais['nombre']} | Habitantes: {Pais['NoPoblacion']}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPaís: Colombia | Habitantes: 50\n```\n:::\n:::\n\n\n::: {#a49a5f4d .cell execution_count=41}\n``` {.python .cell-code}\n# Incluir Llaves Literales:\nprint(f\"Este es un valor literal en llaves: {{Numero}}, y este es el valor de la variable: {Numero}.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEste es un valor literal en llaves: {Numero}, y este es el valor de la variable: 255.\n```\n:::\n:::\n\n\n4.  ***Método `string.Template`***\n\n::: {#f25a3579 .cell execution_count=42}\n``` {.python .cell-code}\nfrom string import Template\ntemplate = Template(\"Hola, mi nombre es $name y tengo $age años.\")\nmensaje  = template.substitute(name = \"Juan\", age = 33)\nprint(mensaje)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHola, mi nombre es Juan y tengo 33 años.\n```\n:::\n:::\n\n\n| Método             | Sintaxis                    | Ventajas                                        | Desventajas                             |\n|----------------|----------------|-----------------------|-------------------|\n| Operador `%`       | `Hola, %s` % \"mundo\"        | Simple y familiar para quienes conocen C        | Menos flexible y más propenso a errores |\n| Método `.format()` | `Hola, {}`.format(\"mundo\")  | Muy flexible, soporta nombres y posiciones      | Sintaxis más verbosa                    |\n| f-strings          | `f\"Hola, {variable}\"`       | Muy legible, permite expresiones dentro de `{}` | Disponible solo en Python 3.6+          |\n| `string.Template`  | `Template(\"Hola, $nombre\")` | Simple y seguro, fácil de leer                  | Menos potente para formateo complejo    |\n\n### None\n\nAbc.\n\n### Dates and times\n\n::: {#394fb443 .cell execution_count=43}\n``` {.python .cell-code}\nfrom datetime import datetime, date, time\n\ndt = datetime(2024, 1, 31, 20, 30, 21)\ndt.day\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```\n31\n```\n:::\n:::\n\n\n::: {#41710eed .cell execution_count=44}\n``` {.python .cell-code}\ndt.date()\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```\ndatetime.date(2024, 1, 31)\n```\n:::\n:::\n\n\n::: {#0dd8f0f6 .cell execution_count=45}\n``` {.python .cell-code}\ndt.time()\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```\ndatetime.time(20, 30, 21)\n```\n:::\n:::\n\n\n::: {#b76bbe34 .cell execution_count=46}\n``` {.python .cell-code}\ndt.strftime(\"%Y-%m-%d %H:%M\")\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```\n'2024-01-31 20:30'\n```\n:::\n:::\n\n\n::: {#330a5dba .cell execution_count=47}\n``` {.python .cell-code}\ndt_hour = dt.replace(minute = 0, second = 0)\ndt_hour\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n```\ndatetime.datetime(2024, 1, 31, 20, 0)\n```\n:::\n:::\n\n\n::: {#5f336992 .cell execution_count=48}\n``` {.python .cell-code}\ndelta = datetime.now() - dt\ndelta\n```\n\n::: {.cell-output .cell-output-display execution_count=43}\n```\ndatetime.timedelta(days=181, seconds=80865, microseconds=14995)\n```\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n## :triangular_flag_on_post: *Objetos Mutables e Inmutables*\n\n### Tuplas\n\n::: callout-note\nUna tupla es una secuencia **ordenada** de objetos de longitud fija e **inmutable** (*una vez asignada no puede modificarse*). La forma más sencilla de crear una tupla es con una secuencia de valores separados por comas entre paréntesis.\n:::\n\n::: {#76103d78 .cell execution_count=49}\n``` {.python .cell-code}\ntup1 = (1, 2, 3)      # Pueden contener elementos repetidos\ntup2 = 4, 5, 6        # Los paréntesis pueden omitirse\nprint(tup1); print(tup2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(1, 2, 3)\n(4, 5, 6)\n```\n:::\n:::\n\n\n::: {#a5c4301d .cell execution_count=50}\n``` {.python .cell-code}\n# Se puede convertir cualquier secuencia o iterador\nprint( tuple([7, 8, 9]) )\nprint( tuple(\"Texto\") )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(7, 8, 9)\n('T', 'e', 'x', 't', 'o')\n```\n:::\n:::\n\n\n::: {#fdad41ef .cell execution_count=51}\n``` {.python .cell-code}\ntupCompleja = (2, 4, 8), (3, 5)\nprint(tupCompleja)\ntupCompleja[0]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n((2, 4, 8), (3, 5))\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=46}\n```\n(2, 4, 8)\n```\n:::\n:::\n\n\n::: {#e4b42afe .cell execution_count=52}\n``` {.python .cell-code}\ntupMixta = tuple(['txt', [1, 2], True])\ntupMixta[1].append(3) # Si un objeto dentro de una tupla es mutable, se puede modificar\nprint(tupMixta)\ntupMixta[2] = False\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n('txt', [1, 2, 3], True)\n```\n:::\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg ansi-bold\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg ansi-bold\">TypeError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg ansi-bold\">In[47], line 4</span>\n<span class=\"ansi-green-fg\">      2</span> tupMixta[<span style=\"color:rgb(98,98,98)\">1</span>]<span style=\"color:rgb(98,98,98)\">.</span>append(<span style=\"color:rgb(98,98,98)\">3</span>) <span style=\"font-style:italic;color:rgb(95,135,135)\"># Si un objeto dentro de una tupla es mutable, se puede modificar</span>\n<span class=\"ansi-green-fg\">      3</span> <span style=\"color:rgb(0,135,0)\">print</span>(tupMixta)\n<span class=\"ansi-green-fg ansi-bold\">----&gt; 4</span> <span class=\"ansi-yellow-bg\">tupMixta</span><span class=\"ansi-yellow-bg\">[</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">2</span><span class=\"ansi-yellow-bg\">]</span> <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>\n\n<span class=\"ansi-red-fg ansi-bold\">TypeError</span>: 'tuple' object does not support item assignment</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#60cbac25 .cell execution_count=53}\n``` {.python .cell-code}\nprint( tup1*2 + (20, 24) + ('year',) )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(1, 2, 3, 1, 2, 3, 20, 24, 'year')\n```\n:::\n:::\n\n\n::: {#595dc834 .cell execution_count=54}\n``` {.python .cell-code}\n# Desempaquetado (unpacking)\nuno, dos, tres = tup1\nprint(uno)\n(a, b, c), (d, e) = tupCompleja\nprint(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n2\n```\n:::\n:::\n\n\n::: {#07c94eee .cell execution_count=55}\n``` {.python .cell-code}\nseq = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nfor a, b, c in seq:\n    print(f'a = {a}, b = {b}, c = {c}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\na = 1, b = 2, c = 3\na = 4, b = 5, c = 6\na = 7, b = 8, c = 9\n```\n:::\n:::\n\n\n::: {#2b3f4355 .cell execution_count=56}\n``` {.python .cell-code}\nfirst, second, *rest = (1, 2, 3, 4, 5)\nprint(f\"{first} || {second} || {rest}\")\n# El guión bajo (_) para descartar las variables no deseadas\nfirst, second, *_ = (1, 2, 3, 4, 5)\nprint(*_)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 || 2 || [3, 4, 5]\n3 4 5\n```\n:::\n:::\n\n\n::: {#f0962197 .cell execution_count=57}\n``` {.python .cell-code}\n# Si desea definir una tupla con un solo elemento debe incluir una coma al final:\nmy_t = (3,)\nprint(my_t)\n# Métodos\n(1, 0, 1, 1, 0).count(0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(3,)\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=52}\n```\n2\n```\n:::\n:::\n\n\n### Listas\n\n::: callout-note\nUna lista es una colección de elementos en un orden determinado. Puedes poner lo que quieras en una lista, y los elementos que la componen no tienen porqué estar relacionados de ninguna manera en particular. En Python, los corchetes `[ ]` indican una lista, y los elementos individuales de la lista están separados por comas.\n:::\n\n::: callout-warning\n-   Las posiciones de índice empiezan en 0, no en 1.\n-   Las listas son de longitud variable y su contenido puede modificarse (son **mutables**).\n:::\n\n::: {#4b109f4c .cell execution_count=58}\n``` {.python .cell-code}\nmotorcycles = [0, \"honda\", \"yamaha\", \"suzuki\", None]\nprint(motorcycles)\nlist(tup1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[0, 'honda', 'yamaha', 'suzuki', None]\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=53}\n```\n[1, 2, 3]\n```\n:::\n:::\n\n\n::: {#6bbecd06 .cell execution_count=59}\n``` {.python .cell-code}\n# Añadir y eliminar elementos\nmotorcycles.append(\"ducati\")\nmotorcycles.insert(1, \"1\")\ndel motorcycles[-2]         # Removing an Item Using the del Statement\nmotorcycles.pop(0)          # Popping Items from Any Position\nprint(motorcycles)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['1', 'honda', 'yamaha', 'suzuki', 'ducati']\n```\n:::\n:::\n\n\n::: callout-caution\nLa inserción (`insert`) es más costosa computacionalmente que la adición (`append`), ya que las referencias a los elementos subsiguientes deben desplazarse internamente para dejar espacio al nuevo elemento.\n:::\n\n::: {#8919db4e .cell execution_count=60}\n``` {.python .cell-code}\nmotorcycles.append(\"2\"); print(motorcycles)\nmotorcycles.remove(\"2\"); print(motorcycles) # Removing an Item by Value\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['1', 'honda', 'yamaha', 'suzuki', 'ducati', '2']\n['1', 'honda', 'yamaha', 'suzuki', 'ducati']\n```\n:::\n:::\n\n\n::: {#9a467e95 .cell execution_count=61}\n``` {.python .cell-code}\n# Sorting a List\nmotorcycles.sort(); print(motorcycles)\nmotorcycles.sort(reverse = True); print(motorcycles)\nprint(sorted(motorcycles)); print(motorcycles)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['1', 'ducati', 'honda', 'suzuki', 'yamaha']\n['yamaha', 'suzuki', 'honda', 'ducati', '1']\n['1', 'ducati', 'honda', 'suzuki', 'yamaha']\n['yamaha', 'suzuki', 'honda', 'ducati', '1']\n```\n:::\n:::\n\n\n::: {#ed9a9e80 .cell execution_count=62}\n``` {.python .cell-code}\nprint(motorcycles.reverse())\nlen(motorcycles)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNone\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=57}\n```\n5\n```\n:::\n:::\n\n\n::: {#d86a2ca5 .cell execution_count=63}\n``` {.python .cell-code}\n# Python returns another index error\nlistA = []\nprint(listA[-1])\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg ansi-bold\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg ansi-bold\">IndexError</span>                                Traceback (most recent call last)\nCell <span class=\"ansi-green-fg ansi-bold\">In[58], line 3</span>\n<span class=\"ansi-green-fg\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Python returns another index error</span>\n<span class=\"ansi-green-fg\">      2</span> listA <span style=\"color:rgb(98,98,98)\">=</span> []\n<span class=\"ansi-green-fg ansi-bold\">----&gt; 3</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span class=\"ansi-yellow-bg\">listA</span><span class=\"ansi-yellow-bg\">[</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">-</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">1</span><span class=\"ansi-yellow-bg\">]</span>)\n\n<span class=\"ansi-red-fg ansi-bold\">IndexError</span>: list index out of range</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#3ed28108 .cell execution_count=64}\n``` {.python .cell-code}\nsquares = []\nfor value in range(1, 11):\n    squares.append(value ** 2)\nprint(squares)\n# List Comprehensions\nsquares = [value**2 for value in range(1, 11)]\nprint(squares)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n```\n:::\n:::\n\n\n::: {#bc698819 .cell execution_count=65}\n``` {.python .cell-code}\n# Slicing a List\nprint(motorcycles[0:3])\nprint(motorcycles[2:])\nprint(motorcycles[-2:])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['1', 'ducati', 'honda']\n['honda', 'suzuki', 'yamaha']\n['suzuki', 'yamaha']\n```\n:::\n:::\n\n\n::: {#585c30c2 .cell execution_count=66}\n``` {.python .cell-code}\n# Copying a List\nonces = [\"pizza\", \"arepa\", \"empanada\"]\ntusOnces = onces[:]\nonces.append(\"buñuelo\")\ntusOnces.append(\"pan\")\nprint(onces); print(tusOnces)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['pizza', 'arepa', 'empanada', 'buñuelo']\n['pizza', 'arepa', 'empanada', 'pan']\n```\n:::\n:::\n\n\n### Diccionarios\n\n::: callout-note\nUn diccionario (*conocido en otros lenguajes como `maps` o `associative arrays`*) almacena una colección de pares `clave-valor`, donde `clave` y `valor` son objetos Python. Cada clave está asociada a un valor, de modo que un valor puede ser convenientemente recuperado, insertado, modificado o eliminado dada una clave en particular. Tenga presente que las claves únicas (*no permiten duplicados en las claves*).\n:::\n\n::: {#3fde9686 .cell execution_count=67}\n``` {.python .cell-code}\nfisico = {'color': 'blanco', 'altura': 1.79}\nfisico[\"ojos\"] = \"azules\"\nfisico[\"peso\"] = 87\nprint(fisico)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'color': 'blanco', 'altura': 1.79, 'ojos': 'azules', 'peso': 87}\n```\n:::\n:::\n\n\n::: {#a26f4eaa .cell execution_count=68}\n``` {.python .cell-code}\n# Diccionario con tuplas como claves\npuntos = {\n    (0, 0): \"Origen\",\n    (1, 2): \"Punto A\",\n    (3, 4): \"Punto B\"\n}\nprint(puntos[(1, 2)])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPunto A\n```\n:::\n:::\n\n\n### Conjuntos\n\nAbc.\n\n::: {#f2e31777 .cell execution_count=69}\n``` {.python .cell-code}\n# Mutable\nmi_lista = [1, 2, 3]\nprint(id(mi_lista))  # Ejemplo de ID: 2180570982400\nmi_lista.append(4)\nprint(id(mi_lista))  # Mismo ID: 2180570982400\n\n# Inmutable\nmi_tupla = (1, 2, 3)\nprint(id(mi_tupla))  # Ejemplo de ID: 2180571003840\nmi_tupla = (1, 2, 3, 4)\nprint(id(mi_tupla))  # Nuevo ID: 2180571086992\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1610394567040\n1610394567040\n1610394610496\n1610394566256\n```\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n## :loop: *Flujo de Control*\n\n### `if`, `elif`, and `else`\n\n::: {#5ea9e289 .cell execution_count=70}\n``` {.python .cell-code}\nw = 5; x = 4; y = 3; z = 2\nif x < 0:\n    print(\"x es negativo.\")\nelif x == 0:\n    print(\"x es cero\")\nelif w > x > y > z:\n    print(\"Los valores están en orden.\")\nelse:\n    print(\"Otro caso diferente.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLos valores están en orden.\n```\n:::\n:::\n\n\n### `for`\n\n::: {#4343e82c .cell execution_count=71}\n``` {.python .cell-code}\nnumeros = [1, 2, None, 4, None, 5] # sum(numeros)\ntotal = 0\nfor value in numeros:\n    if value is None:\n        continue\n    if value == 4:\n        break       # La sentencia 'break' se usa para salir del bucle\n    total += value\ntotal\n```\n\n::: {.cell-output .cell-output-display execution_count=66}\n```\n3\n```\n:::\n:::\n\n\n::: {#320de95e .cell execution_count=72}\n``` {.python .cell-code}\n# 'break' sólo termina el for más interno, cualquier for externo continuará\nfor i in range(4):\n    for j in range(4):\n        if j > i:\n            break\n        print((i, j))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(0, 0)\n(1, 0)\n(1, 1)\n(2, 0)\n(2, 1)\n(2, 2)\n(3, 0)\n(3, 1)\n(3, 2)\n(3, 3)\n```\n:::\n:::\n\n\n### `while`\n\nEsta estructura permite ejecutar repetidamente un bloque de código mientras una condición especificada se evalúa como **verdadera**. Este ciclo es útil cuando no se sabe de antemano cuántas veces se necesitará repetir el bloque de código, a diferencia del ciclo `for`, que itera sobre una secuencia de elementos de longitud conocida.\n\n::: {#14aad9ea .cell execution_count=73}\n``` {.python .cell-code}\nwhile True:\n    entrada = input(\"Escribe 'salir' para terminar: \")\n    if entrada.lower() == \"salir\":\n        break\n```\n:::\n\n\n### `pass`\n\nEs la sentencia `no-op` (o `no hacer nada`) de Python. Puede usarse en bloques en los que no se va a realizar ninguna acción. Sólo es necesaria porque Python utiliza espacios en blanco para delimitar los bloques.\n\n\n\nCuando la ejecución del programa alcanza una sentencia `continue`, la ejecución del programa salta inmediatamente al inicio del bucle y reevalúa la condición del bucle.\n\n::: {#30174206 .cell execution_count=75}\n``` {.python .cell-code}\nwhile True:\n    print('¿Quién eres tú?')\n    name = input()\n    if name != 'Juan':\n        continue\n    print('Hola Juan, cuál es tu contraseña (es un equipo)')\n    password = input()\n    if password == 'nacional':\n        break\nprint('Acceso Concedido.')\n```\n:::\n\n\n> -   **Pass** (`for`, `if`): No realiza ninguna acción y se utiliza como marcador de lugar (*placeholder para futura implementación*).\n> -   **Continue** (`for`, `while`): Salta a la siguiente iteración del bucle, omitiendo el resto del código en la iteración actual.\n> -   **Break** (`if`): Termina el bucle inmediatamente, saliendo de la estructura de control de flujo.\n\n### `range`\n\n::: {#cd019c08 .cell execution_count=76}\n``` {.python .cell-code}\nprint(f\"{   range(10)   }\")\nprint(f\"{   range(1, 10)   }\")\nprint(f\"{   list(range(0, 20, 2))   }\")\nprint(f\"{   list(range(5, -1, -1))   }\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nrange(0, 10)\nrange(1, 10)\n[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\n[5, 4, 3, 2, 1, 0]\n```\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n## :loop: *Funciones*\n\nLas funciones en Python son bloques de código reutilizables que permiten estructurar y organizar mejor los programas. Se definen usando la palabra clave `def` y pueden aceptar argumentos y devolver valores.\n\n::: {#3ba1f36b .cell execution_count=77}\n``` {.python .cell-code}\n# Py añade return None al final de cualquier definición de función sin sentencia return:\ndef Saludo(nombre):\n    print(\"Hola \" + nombre)\n\nspam = Saludo(\"Carlos\")\nNone == spam\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHola Carlos\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=69}\n```\nTrue\n```\n:::\n:::\n\n\nEn un programa de Python, hay exactamente un único ámbito global. Este ámbito global es el contexto en el que las variables globales se definen y existen a lo largo de la ejecución del programa.\n\n-   En cuanto a los ámbitos locales, el número de estos puede variar. Cada vez que se define y se llama a una función, se crea un nuevo ámbito local. Por lo tanto, el número de ámbitos locales depende del número de funciones (*incluidas las funciones anidadas*) y métodos que se llaman durante la ejecución del programa.\n\n::: {#5b332bd1 .cell execution_count=78}\n``` {.python .cell-code}\n# Las variables locales no pueden utilizarse en el ámbito global:\ndef getPI():\n    PI = 3.1415\ngetPI()\nprint(PI)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg ansi-bold\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg ansi-bold\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg ansi-bold\">In[70], line 5</span>\n<span class=\"ansi-green-fg\">      3</span>     PI <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">3.1415</span>\n<span class=\"ansi-green-fg\">      4</span> getPI()\n<span class=\"ansi-green-fg ansi-bold\">----&gt; 5</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span class=\"ansi-yellow-bg\">PI</span>)\n\n<span class=\"ansi-red-fg ansi-bold\">NameError</span>: name 'PI' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#3d8703ad .cell execution_count=79}\n``` {.python .cell-code}\n# Los ámbitos locales no pueden utilizar variables de otros ámbitos locales:\ndef a():\n    phone = 444\n    b()\n    print(phone)\ndef b():\n    phone = 555\na()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n444\n```\n:::\n:::\n\n\n::: {#e07e90a4 .cell execution_count=80}\n``` {.python .cell-code}\n# Las variables globales pueden leerse desde un ámbito local:\ndef a():\n    print(cte)\ncte = 1234\na()\nprint(cte)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1234\n1234\n```\n:::\n:::\n\n\n::: {#36623b37 .cell execution_count=81}\n``` {.python .cell-code}\n# Si necesitas modificar una variable global desde dentro de una función:\ndef a():\n    global cte\n    cte = 'Ahora soy una Variable Global'\n\ncte = 'Global'\na()\nprint(cte)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAhora soy una Variable Global\n```\n:::\n:::\n\n\n::: {#4838aa4f .cell execution_count=82}\n``` {.python .cell-code}\n# Funciones con Valores por Defecto:\ndef saludar(nombre = \"Paola\"):\n    print(f\"¡Hola, {nombre}!\")\n\nsaludar()\nsaludar(\"Pedro\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n¡Hola, Paola!\n¡Hola, Pedro!\n```\n:::\n:::\n\n\n::: {#fc5ece77 .cell execution_count=83}\n``` {.python .cell-code}\n# Funciones con Varios Valores de Retorno:\ndef operaciones(a, b):\n    suma  = a + b\n    resta = a - b\n    return suma, resta\n\nsuma, resta = operaciones(10, 2)\nprint(f\"Suma: {suma}\\t| Resta: {resta}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSuma: 12\t| Resta: 8\n```\n:::\n:::\n\n\n::: {#e78eb433 .cell execution_count=84}\n``` {.python .cell-code}\n# Evitar que un programa se bloquee cuando recibe un error:\ndef a(b):\n    try:\n        return 1/b\n    except ZeroDivisionError:\n        print('Error: b debe ser diferente de 0.')\nprint(a(2))\nprint(a(0))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0.5\nError: b debe ser diferente de 0.\nNone\n```\n:::\n:::\n\n\n### [*`*args`*](https://www.geeksforgeeks.org/args-kwargs-python/)\n\nEl parámetro *args se usa en las funciones para pasar un número variable de argumentos posicionales. Dentro de la función,* `args` es una tupla que contiene todos los argumentos posicionales proporcionados.\n\nCaracterísticas:\n\n-   Permite pasar una cantidad variable de argumentos a una función.\n-   Los argumentos se agrupan en una tupla dentro de la función.\n\n::: {#de7eb6e1 .cell execution_count=85}\n``` {.python .cell-code}\ndef imprimir_argumentos(*args):\n    for i, arg in enumerate(args):\n        print(f\"Argumento {i}: {arg}\")\n\nimprimir_argumentos('a', 'b', 'c')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nArgumento 0: a\nArgumento 1: b\nArgumento 2: c\n```\n:::\n:::\n\n\n### *`**kwargs`*\n\nEl parámetro **kwargs se usa para pasar un número variable de argumentos con nombre (palabra clave). Dentro de la función,** `kwargs` es un diccionario que contiene todos los argumentos con nombre proporcionados.\n\nCaracterísticas:\n\n-   Permite pasar una cantidad variable de argumentos con nombre a una función.\n-   Los argumentos se agrupan en un diccionario dentro de la función.\n\n::: {#84ef47f8 .cell execution_count=86}\n``` {.python .cell-code}\ndef mostrar_info(**kwargs):\n    for key, value in kwargs.items():\n        print(f\"{key}: {value}\")\n\nmostrar_info(nombre = \"Alice\", edad = 30, ciudad = \"Nueva York\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nnombre: Alice\nedad: 30\nciudad: Nueva York\n```\n:::\n:::\n\n\n::: {#fef7de5b .cell execution_count=87}\n``` {.python .cell-code}\n# Ejemplo combinado:\ndef combinar(*args, **kwargs):\n    print(\"Argumentos posicionales:\", args)\n    print(\"Argumentos con nombre:\", kwargs)\n\ncombinar(1, 2, 3, a = \"Uno\", b = \"Dos\", c = \"Tres\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nArgumentos posicionales: (1, 2, 3)\nArgumentos con nombre: {'a': 'Uno', 'b': 'Dos', 'c': 'Tres'}\n```\n:::\n:::\n\n\n### *Funciones Lambda*\n\nSon funciones anónimas y de una sola línea que pueden ser definidas usando la palabra clave `lambda argumentos: expresión`. Son especialmente útiles cuando se necesita una función pequeña y desechable que se puede definir en una expresión.\n\n::: {#19d9492c .cell execution_count=88}\n``` {.python .cell-code}\ncuadrado = lambda x: x ** 2\nprint(cuadrado(5))\n\nmultiplicar = lambda x, y: x * y\nprint(multiplicar(4, 6))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n25\n24\n```\n:::\n:::\n\n\n**Uso con Funciones Integradas**\n\nLas funciones lambda son especialmente útiles cuando se combinan con ciertas funciones integradas de Python.\n\n1.  `map()`: Aplica una función a cada ítem de un iterable (*como una lista*) y devuelve un nuevo iterable con los resultados.\n\n::: {#5c5b1d13 .cell execution_count=89}\n``` {.python .cell-code}\nnumeros = list(range(11))\ncuadrados = map(lambda x: x**2, numeros)\nprint(list(cuadrados))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n```\n:::\n:::\n\n\n2.  `filter()`: Filtra un iterable, permitiendo sólo los ítems que coincidan con una condición.\n\n::: {#42aaa384 .cell execution_count=90}\n``` {.python .cell-code}\npares = filter(lambda x: x%2 == 0, numeros)\nprint(list(pares))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[0, 2, 4, 6, 8, 10]\n```\n:::\n:::\n\n\n::: {#8a78cfb6 .cell execution_count=91}\n``` {.python .cell-code}\nprint(list(filter(lambda x: (x % 2 == 0) and (x > 7), numeros)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[8, 10]\n```\n:::\n:::\n\n\n3.  `reduce()`: Aplica una función a los ítems de un iterable, acumulando el resultado.\n\n::: {#caa99a4d .cell execution_count=92}\n``` {.python .cell-code}\nfrom functools import reduce\n\nsuma_total = reduce(lambda x,y: x + y, numeros)\nprint(suma_total)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n55\n```\n:::\n:::\n\n\n4.  `sorted()`: Las funciones lambda pueden ser usadas para personalizar el ordenamiento de listas.\n\n::: {#78325876 .cell execution_count=93}\n``` {.python .cell-code}\ncoordenadas = [(1, 2), (3, 4), (5, 1), (7, 3)]\nordenado = sorted(coordenadas, key = lambda x: x[1])\nprint(ordenado)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[(5, 1), (1, 2), (7, 3), (3, 4)]\n```\n:::\n:::\n\n\n::: {#e653ffd5 .cell execution_count=94}\n``` {.python .cell-code}\nNotas = [\n    {'Nombre': 'Ana', 'Definitiva': 8},\n    {'Nombre': 'Juan', 'Definitiva': 6},\n    {'Nombre': 'Maria', 'Definitiva': 9}\n]\nprint(sorted(Notas, key = lambda x: x['Definitiva']))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[{'Nombre': 'Juan', 'Definitiva': 6}, {'Nombre': 'Ana', 'Definitiva': 8}, {'Nombre': 'Maria', 'Definitiva': 9}]\n```\n:::\n:::\n\n\n**Limitaciones**\n\n-   Una sola expresión: Las lambdas están limitadas a una única expresión. No pueden contener declaraciones ni múltiples líneas de código.\n-   Legibilidad: Aunque útiles para funciones cortas y simples, las lambdas pueden hacer el código más difícil de leer si se usan en exceso o de manera compleja.\n\n### *Decoradores*\n\nLos decoradores en Python son una herramienta poderosa que permite modificar el comportamiento de una función o método. Los decoradores permiten envolver una función en otra función, lo que facilita añadir funcionalidades adicionales de una manera muy elegante y reutilizable.\n\n::: {#f4b11e5e .cell execution_count=95}\n``` {.python .cell-code}\ndef decorador(func):\n    def envoltura():\n        print(\"Antes de la función\")\n        func()\n        print(\"Después de la función\")\n    return envoltura\n@decorador\ndef f():\n    print(\"Función original\")\nf()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAntes de la función\nFunción original\nDespués de la función\n```\n:::\n:::\n\n\n::: {#62ee51dc .cell execution_count=96}\n``` {.python .cell-code}\n# Registro de Llamadas a Funciones:\ndef registrar(func):\n    def envoltura(*args, **kwargs):\n        print(f\"Llamando a {func.__name__} con {args} y {kwargs}\")\n        resultado = func(*args, **kwargs)\n        print(f\"{func.__name__} retornó {resultado}\")\n        return resultado\n    return envoltura\n\n@registrar\ndef suma(a, b):\n    return a + b\n\nsuma(3, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLlamando a suma con (3, 5) y {}\nsuma retornó 8\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=88}\n```\n8\n```\n:::\n:::\n\n\n::: {#26692120 .cell execution_count=97}\n``` {.python .cell-code}\n# Contador de Llamadas a una Función:\ndef contador_de_llamadas(func):\n    def wrapper(*args, **kwargs):\n        wrapper.llamadas += 1\n        print(f\"Llamada número: {wrapper.llamadas}\")\n        return func(*args, **kwargs)\n    wrapper.llamadas = 0\n    return wrapper\n\n@contador_de_llamadas\ndef mi_funcion():\n    print(\"Ejecutando la función\")\n\nmi_funcion()\nmi_funcion()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLlamada número: 1\nEjecutando la función\nLlamada número: 2\nEjecutando la función\n```\n:::\n:::\n\n\n::: {#25fbe327 .cell execution_count=98}\n``` {.python .cell-code}\n# Medición de Tiempo de Ejecución:\nimport time\ndef medir_tiempo(func):\n    def envoltura(*args, **kwargs):\n        inicio = time.time()\n        resultado = func(*args, **kwargs)\n        fin = time.time()\n        print(f\"{func.__name__} tomó {fin - inicio} segundos\")\n        return resultado\n    return envoltura\n\n@medir_tiempo\ndef contar_hasta(numero):\n    for i in range(numero):\n        pass\n    return numero\n\ncontar_hasta(1000000)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncontar_hasta tomó 0.018638134002685547 segundos\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=90}\n```\n1000000\n```\n:::\n:::\n\n\n::: {#a17f3c8d .cell execution_count=99}\n``` {.python .cell-code}\n# Memorización de Resultados:\ndef memoize(func):\n    cache = {}\n    def envoltura(*args):\n        if args in cache:\n            return cache[args]\n        resultado = func(*args)\n        cache[args] = resultado\n        return resultado\n    return envoltura\n\n@memoize\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)\n\nprint(fibonacci(30))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n832040\n```\n:::\n:::\n\n\n::: {#7e31d0e0 .cell execution_count=100}\n``` {.python .cell-code}\n# Decoradores con Parámetros:\ndef repetir(veces):\n    def decorador(func):\n        def envoltura(*args, **kwargs):\n            for _ in range(veces):\n                func(*args, **kwargs)\n        return envoltura\n    return decorador\n\n@repetir(3)\ndef saludar():\n    print(\"¡Hola!\")\n\nsaludar()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n¡Hola!\n¡Hola!\n¡Hola!\n```\n:::\n:::\n\n\n### *Documentación de funciones*\n\nEn Python, la documentación de funciones se suele escribir utilizando docstrings, que son cadenas de texto que describen el propósito y el uso de una función, método, clase o módulo.\n\n```         \ndef nombre_funcion(param1, param2):\n    \"\"\"\n    Descripción breve de lo que hace la función.\n\n    Args:\n        param1 (tipo): Descripción de param1.\n        param2 (tipo): Descripción de param2.\n\n    Returns:\n        tipo: Descripción de lo que devuelve la función.\n\n    Raises:\n        ExceptionType: Descripción de las excepciones que puede lanzar la función.\n    \"\"\"\n    pass\n```\n\n::: {#a347e5c6 .cell execution_count=101}\n``` {.python .cell-code}\ndef division(a, b):\n    \"\"\"\n    Divide a entre b.\n\n    Args:\n        a (float): El numerador.\n        b (float): El denominador.\n\n    Returns:\n        float: El resultado de la división.\n\n    Examples:\n        >>> division(1, 2)\n        0.5\n        >>> division(1, 10)\n        0.1\n\n    Raises:\n        ValueError: Si b es cero.\n        \n    \"\"\"\n    if b == 0:\n        raise ValueError(\"El denominador no puede ser cero.\")\n    return a / b\n\nhelp(division)\ndivision(1, 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHelp on function division in module __main__:\n\ndivision(a, b)\n    Divide a entre b.\n\n    Args:\n        a (float): El numerador.\n        b (float): El denominador.\n\n    Returns:\n        float: El resultado de la división.\n\n    Examples:\n        >>> division(1, 2)\n        0.5\n        >>> division(1, 10)\n        0.1\n\n    Raises:\n        ValueError: Si b es cero.\n\n```\n:::\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg ansi-bold\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg ansi-bold\">ValueError</span>                                Traceback (most recent call last)\nCell <span class=\"ansi-green-fg ansi-bold\">In[93], line 27</span>\n<span class=\"ansi-green-fg\">     24</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> a <span style=\"color:rgb(98,98,98)\">/</span> b\n<span class=\"ansi-green-fg\">     26</span> help(division)\n<span class=\"ansi-green-fg ansi-bold\">---&gt; 27</span> <span class=\"ansi-yellow-bg\">division</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">1</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">0</span><span class=\"ansi-yellow-bg\">)</span>\n\nCell <span class=\"ansi-green-fg ansi-bold\">In[93], line 23</span>, in <span class=\"ansi-cyan-fg\">division</span><span class=\"ansi-blue-fg ansi-bold\">(a, b)</span>\n<span class=\"ansi-green-fg\">      2</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">\"\"\"</span>\n<span class=\"ansi-green-fg\">      3</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">Divide a entre b.</span>\n<span class=\"ansi-green-fg\">      4</span> \n<span class=\"ansi-green-fg ansi-bold\">   (...)</span>\n<span class=\"ansi-green-fg\">     20</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">    </span>\n<span class=\"ansi-green-fg\">     21</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">\"\"\"</span>\n<span class=\"ansi-green-fg\">     22</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> b <span style=\"color:rgb(98,98,98)\">==</span> <span style=\"color:rgb(98,98,98)\">0</span>:\n<span class=\"ansi-green-fg ansi-bold\">---&gt; 23</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">raise</span> <span style=\"font-weight:bold;color:rgb(215,95,95)\">ValueError</span>(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">El denominador no puede ser cero.</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg\">     24</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> a <span style=\"color:rgb(98,98,98)\">/</span> b\n\n<span class=\"ansi-red-fg ansi-bold\">ValueError</span>: El denominador no puede ser cero.</pre>\n```\n:::\n\n:::\n:::\n\n\n**Convenciones de Formato**\n\nHay varias convenciones para escribir docstrings. La más común en Python es la convención de estilo Google, pero también existen otras como el estilo NumPy/SciPy y el estilo reStructuredText (reST), que es utilizado por Sphinx para generar documentación.\n\n> Estilo Google\n\n::: {#f83f1546 .cell execution_count=102}\n``` {.python .cell-code}\ndef f(param1, param2):\n    \"\"\"\n    Una breve descripción de la función.\n\n    Args:\n        param1 (int): El primer parámetro.\n        param2 (str): El segundo parámetro.\n\n    Returns:\n        bool: El valor de retorno.\n    \"\"\"\n    pass\n```\n:::\n\n\n> Estilo NumPy/SciPy\n\n::: {#21476789 .cell execution_count=103}\n``` {.python .cell-code}\ndef f(param1, param2):\n    \"\"\"\n    Una breve descripción de la función.\n\n    Parameters\n    ----------\n    param1 : int\n        El primer parámetro.\n    param2 : str\n        El segundo parámetro.\n\n    Returns\n    -------\n    bool\n        El valor de retorno.\n    \"\"\"\n    pass\n```\n:::\n\n\n> Estilo reStructuredText (reST)\n\n::: {#a2888e9f .cell execution_count=104}\n``` {.python .cell-code}\ndef f(param1, param2):\n    \"\"\"\n    Una breve descripción de la función.\n\n    :param param1: El primer parámetro.\n    :type param1: int\n    :param param2: El segundo parámetro.\n    :type param2: str\n    :returns: El valor de retorno.\n    :rtype: bool\n    \"\"\"\n    pass\n```\n:::\n\n\n------------------------------------------------------------------------\n\n## *Variables Especiales y Útiles*\n\n### `name`\n\nEn Python, **name** es una variable especial que se define automáticamente. Su valor depende de cómo se ejecuta el archivo:\n\n-   Si el archivo se ejecuta directamente, **name** es igual a \"**main**\".\n-   Si el archivo se importa como un módulo en otro archivo, **name** toma el nombre del archivo (*sin la extensión* `.py`).\n\n¿Por qué usar `if name == \"main\"`:?\n\nEl uso de esta construcción permite definir una sección de código que solo se ejecutará cuando el archivo se ejecute directamente, y no cuando se importe como módulo. Esto es útil para escribir scripts que pueden funcionar tanto como programas independientes como módulos reutilizables.\n\n::: {#18f268c0 .cell execution_count=105}\n``` {.python .cell-code}\n# mi_script.py\ndef saludo():\n    print(\"¡Hola, Mundo!\")\n\nif __name__ == \"__main__\":\n    saludo()\n# Si ejecutas mi_script.py directamente, la salida será ¡Hola, Mundo!.\n# Si importas mi_script.py en otro archivo, no se ejecutará automáticamente saludo().\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n¡Hola, Mundo!\n```\n:::\n:::\n\n\n### `sys.argv`\n\nEl módulo `sys` proporciona acceso a algunos objetos utilizados o mantenidos por el intérprete de Python y a funciones que interaccionan fuertemente con el intérprete.\n\n::: {#5b36a2d1 .cell execution_count=106}\n``` {.python .cell-code}\nimport sys\n\n# Lista en la que cada elemento es un argumento pasado al script\ndef main():\n    print(\"Nombre del script:\", sys.argv[0])\n    for i, arg in enumerate(sys.argv[1:], start = 1):\n        print(f\"Argumento {i}: {arg}\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNombre del script: C:\\Users\\Jason\\AppData\\Roaming\\Python\\Python312\\site-packages\\ipykernel_launcher.py\nArgumento 1: -f\nArgumento 2: C:\\Users\\Jason\\AppData\\Local\\Temp\\tmp9upt3ui7.json\nArgumento 3: --HistoryManager.hist_file=:memory:\n```\n:::\n:::\n\n\n### `os.environ`\n\nEl módulo `os` permite interactuar con el sistema operativo.\n\n::: {#4f1276f8 .cell execution_count=107}\n``` {.python .cell-code}\nimport os\n\n# Diccionario que contiene las variables de entorno del sistema\ndef mostrar_variables_entorno():\n    for clave, valor in os.environ.items():\n        print(f\"{clave}: {valor}\")\n\nif __name__ == \"__main__\":\n    mostrar_variables_entorno()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nALLUSERSPROFILE: C:\\ProgramData\nAPPDATA: C:\\Users\\Jason\\AppData\\Roaming\nCLICOLOR_FORCE: 1\nCOMMONPROGRAMFILES: C:\\Program Files\\Common Files\nCOMMONPROGRAMFILES(X86): C:\\Program Files (x86)\\Common Files\nCOMMONPROGRAMW6432: C:\\Program Files\\Common Files\nCOMPUTERNAME: JEISONALARCON\nCOMSPEC: C:\\Windows\\system32\\cmd.exe\nCURL_CA_BUNDLE: C:/PROGRA~1/R/R-44~1.0PA/etc/curl-ca-bundle.crt\nDENO_DOM_PLUGIN: C:\\PROGRA~1\\Quarto\\bin\\tools\\x86_64\\deno_dom\\plugin.dll\nDENO_NO_UPDATE_CHECK: 1\nDENO_TLS_CA_STORE: system,mozilla\nDISPLAY: :0\nDRIVERDATA: C:\\Windows\\System32\\Drivers\\DriverData\nEFC_5056: 1\nGFORTRAN_STDERR_UNIT: -1\nGFORTRAN_STDOUT_UNIT: -1\nGIT_ASKPASS: rpostback-askpass\nHOME: C:\\Users\\Jason\\OneDrive\\Documents\nHOMEDRIVE: C:\nHOMEPATH: \\Users\\Jason\nIPY_INTERRUPT_EVENT: 1116\nJPY_INTERRUPT_EVENT: 1116\nJPY_PARENT_PID: 852\nLOCALAPPDATA: C:\\Users\\Jason\\AppData\\Local\nLOGONSERVER: \\\\JEISONALARCON\nMPLBACKEND: module://matplotlib_inline.backend_inline\nMPLENGINE: tkAgg\nMSYS2_ENV_CONV_EXCL: R_ARCH\nNO_COLOR: TRUE\nNUMBER_OF_PROCESSORS: 16\nONEDRIVE: C:\\Users\\Jason\\OneDrive\nORIGINAL_XDG_CURRENT_DESKTOP: undefined\nOS: Windows_NT\nPATH: C:\\rtools44\\x86_64-w64-mingw32.static.posix\\bin;C:\\rtools44\\usr\\bin;C:\\Program Files\\R\\R-4.4.0patched\\bin\\x64;C:\\Program Files\\Quarto\\bin;C:\\Program Files\\Python312\\Scripts\\;C:\\Program Files\\Python312\\;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Windows\\System32\\OpenSSH\\;C:\\Program Files\\Git\\cmd;C:\\Users\\Jason\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\Jason\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;C:\\Users\\Jason\\AppData\\Local\\Programs\\MiKTeX\\miktex\\bin\\x64\\;C:\\Program Files\\Quarto\\bin;C:\\Program Files\\RStudio\\resources\\app\\bin\\postback\nPATHEXT: .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.PY;.PYW\nPROCESSOR_ARCHITECTURE: AMD64\nPROCESSOR_IDENTIFIER: AMD64 Family 25 Model 116 Stepping 1, AuthenticAMD\nPROCESSOR_LEVEL: 25\nPROCESSOR_REVISION: 7401\nPROGRAMDATA: C:\\ProgramData\nPROGRAMFILES: C:\\Program Files\nPROGRAMFILES(X86): C:\\Program Files (x86)\nPROGRAMW6432: C:\\Program Files\nPSMODULEPATH: C:\\Program Files\\WindowsPowerShell\\Modules;C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\nPUBLIC: C:\\Users\\Public\nPYDEVD_DISABLE_FILE_VALIDATION: 1\nPYTHONIOENCODING: utf-8\nPY_PYTHON: C:\\ProgramData\\miniconda3\\\nQUARTO_BIN_PATH: C:\\PROGRA~1\\Quarto\\bin\nQUARTO_DENO: C:\\PROGRA~1\\Quarto\\bin\\tools\\x86_64\\deno\nQUARTO_DOCUMENT_PATH: D:\\Documentos\\JOBS\\DNPE\\CursoPython\\posts\\Getting Started\nQUARTO_FIG_DPI: 192\nQUARTO_FIG_FORMAT: png\nQUARTO_FIG_HEIGHT: 5\nQUARTO_FIG_WIDTH: 7\nQUARTO_PROFILE: \nQUARTO_PROJECT_ROOT: D:\\Documentos\\JOBS\\DNPE\\CursoPython\nQUARTO_PYTHON: C:\\ProgramData\\miniconda3\\\nQUARTO_RENDER_TOKEN: f20dd7d5-943c-414a-9790-0d782f256425\nQUARTO_SHARE_PATH: C:\\PROGRA~1\\Quarto\\share\nRETICULATE_PYTHON: C:\\ProgramData\\miniconda3\\\nRMARKDOWN_MATHJAX_PATH: C:/Program Files/RStudio/resources/app/resources/mathjax-27\nRSTUDIO: 1\nRSTUDIO_CHILD_PROCESS_PANE: job\nRSTUDIO_CLI_HYPERLINKS: true\nRSTUDIO_CONSOLE_COLOR: 256\nRSTUDIO_CONSOLE_WIDTH: 193\nRSTUDIO_DESKTOP_EXE: C:\\Program Files\\RStudio\\rstudio.exe\nRSTUDIO_MSYS_SSH: C:/Program Files/RStudio/resources/app/bin/msys-ssh-1000-18\nRSTUDIO_PANDOC: C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools\nRSTUDIO_PROGRAM_MODE: desktop\nRSTUDIO_SESSION_PID: 9388\nRSTUDIO_SESSION_PORT: 37453\nRSTUDIO_USER_IDENTITY: Jason\nRSTUDIO_WINUTILS: C:/Program Files/RStudio/resources/app/bin/winutils\nRS_LOCAL_PEER: \\\\.\\pipe\\37453-rsession\nRS_LOG_LEVEL: WARN\nRS_RPOSTBACK_PATH: C:/Program Files/RStudio/resources/app/bin/rpostback.exe\nRS_SHARED_SECRET: 3a833e1a-f1b9-434a-8e77-092fec2a585e\nRTOOLS44_HOME: C:\\rtools44\nR_ARCH: /x64\nR_CLI_HAS_HYPERLINK_IDE_HELP: true\nR_CLI_HAS_HYPERLINK_IDE_RUN: true\nR_CLI_HAS_HYPERLINK_IDE_VIGNETTE: true\nR_COMPILED_BY: gcc 13.2.0\nR_DOC_DIR: C:/PROGRA~1/R/R-44~1.0PA/doc\nR_HOME: C:/PROGRA~1/R/R-44~1.0PA\nR_INCLUDE_DIR: C:/PROGRA~1/R/R-44~1.0PA/include\nR_LIBS_SITE: C:/PROGRA~1/R/R-44~1.0PA/site-library\nR_LIBS_USER: C:\\Users\\Jason\\AppData\\Local/R/win-library/4.4\nR_PLATFORM: \nR_RTOOLS44_PATH: C:\\rtools44/x86_64-w64-mingw32.static.posix/bin;C:\\rtools44/usr/bin\nR_RUNTIME: ucrt\nR_SHARE_DIR: C:/PROGRA~1/R/R-44~1.0PA/share\nR_USER: C:/Users/Jason/OneDrive/Documents\nSESSIONNAME: Console\nSSH_ASKPASS: rpostback-askpass\nSYSTEMDRIVE: C:\nSYSTEMROOT: C:\\Windows\nTEMP: C:\\Users\\Jason\\AppData\\Local\\Temp\nTERM: xterm-color\nTMP: C:\\Users\\Jason\\AppData\\Local\\Temp\nUSERDOMAIN: JEISONALARCON\nUSERDOMAIN_ROAMINGPROFILE: JEISONALARCON\nUSERNAME: Jason\nUSERPROFILE: C:\\Users\\Jason\nWINDIR: C:\\Windows\nPYDEVD_USE_FRAME_EVAL: NO\nCLICOLOR: 1\nFORCE_COLOR: 1\nPAGER: cat\nGIT_PAGER: cat\n```\n:::\n:::\n\n\n## `Python` VS. `R`\n\n::: {#1a7bc80a .cell execution_count=108}\n``` {.python .cell-code}\ncadena = \"Hola, Mundo!\"\n# Convertir a minúsculas\nprint(cadena.lower())                     # tolower(cadena)\n\n# Reemplazar caracteres\nprint(cadena.replace(\"Mundo\", \"Python\"))  # sub(\"Mundo\", \"R\", cadena)\n\n# Dividir cadenas\nprint(cadena.split(\", \"))                 # strsplit(cadena, \", \")\n\n# Comprensiones de Listas\nprint([x ** 2 for x in range(10)])        # sapply(0:9, function(x) x^2)\n```\n:::\n\n\n### *Funciones Anidadas y Clausuras*\n\n::: {#dc4b519a .cell execution_count=109}\n``` {.python .cell-code}\ndef exterior(x):\n    def interior(y):\n        return x + y\n    return interior\n\nprint(exterior(5)) \n```\n:::\n\n\n```{r}\n#| eval: false\nexterior <- function(x) {\n    interior <- function(y) {\n        x + y\n    }\n    interior\n}\n\nexterior(5)\n```\n\n\n### *Creación de Factores*\n\n::: {#f16396ad .cell execution_count=110}\n``` {.python .cell-code}\nsexo = [\"M\", \"F\", \"F\", \"M\", \"M\"]\nniveles = {\"M\": \"Male\", \"F\": \"Female\"}\nprint([niveles[s] for s in sexo])\n```\n:::\n\n\n```{r}\n#| eval: false\nsexo <- factor(c(\"M\", \"F\", \"F\", \"M\", \"M\"))\nlevels(sexo) <- c(\"Female\", \"Male\")\nprint(sexo)\n```\n\n\n### *Programación Orientada a Objetos (OOP)*\n\n::: {#52e47c7c .cell execution_count=111}\n``` {.python .cell-code}\nclass Coche:\n    def __init__(self, marca, modelo):\n        self.marca = marca\n        self.modelo = modelo\n    \n    def descripcion(self):\n        return f\"Coche: {self.marca} {self.modelo}\"\n\nmi_coche = Coche(\"Toyota\", \"Corolla\")\nprint(mi_coche.descripcion())  # Coche: Toyota Corolla\n```\n:::\n\n\n```{r}\n#| eval: false\nsetClass(\"Coche\",\n         slots = list(marca = \"character\", modelo = \"character\"))\n\nsetMethod(\"initialize\", \"Coche\",\n          function(.Object, marca, modelo) {\n            .Object@marca <- marca\n            .Object@modelo <- modelo\n            .Object\n          })\n\nsetMethod(\"descripcion\", \"Coche\",\n          function(object) {\n            paste(\"Coche:\", object@marca, object@modelo)\n          })\n\nmi_coche <- new(\"Coche\", marca = \"Toyota\", modelo = \"Corolla\")\ndescripcion(mi_coche)  # \"Coche: Toyota Corolla\"\n```\n\n\nPython Enhancement Proposal (PEP): https://peps.python.org/pep-0008/\n\nhttps://docs.python.org/es/3/library/trace.html python -m trace --count -C . somefile.py Esto ejecutará somefile.py y generará listados anotados de todos los módulos de Python importados durante la ejecución en el directorio actual.\n\nhttps://jjallaire.github.io/pydata-quarto-dashboards/#/learning-more\n\n::: {#499eecee .cell execution_count=112}\n``` {.python .cell-code}\n# import numpy as np\n# import matplotlib.pyplot as plt\n# import pandas as pd\n# import seaborn as sns\n# import statsmodels as sm\n#\n# pd.options.display.max_columns = 20\n# pd.options.display.max_rows = 20\n# pd.options.display.max_colwidth = 80\n# np.set_printoptions(precision = 4, suppress = True)\n```\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}